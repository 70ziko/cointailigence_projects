require('dotenv').config()

const debug = require('hgi-debug')
const jwt = require("jsonwebtoken")

module.exports = { generate, authorize, payload }

const expiryTime = ( process.env.JWT_EXPIRY_TIME || 900 ) * 1000;

function generate(payload = {})
{
    const secretKey = process.env.JWT_SECRET;

    if(secretKey === undefined) {
        debug.log('[hgi-jwt]', 'JWT secret is missing, add JWT_SECRET to the .env file');
        return;
    }

    const token = jwt.sign(
        payload, 
        secretKey, {
            algorithm: "HS256",
            expiresIn: expiryTime,
        }
    )

    return token;
}

function authorize(options = {}) 
{
    return function(req, res, next) {

        const secretKey = process.env.JWT_SECRET
        const disableAuth = process.env.JWT_NO_AUTH

        const ip = req.headers['x-real-ip'] || req.connection.remoteAddress;

        if(disableAuth == 'Yes') {
            debug.log('[hgi-jwt]', ip, 'authorization disabled - granting free access')
            return next()
        }

        const excluded = regexFrom(options.exclude, "gi")

        debug.log('[hgi-jwt]', ip, 'req.path:', req.path)
        debug.log('[hgi-jwt]', ip, 'excluded:', excluded)

        if(options.exclude) {
            if(excluded.test(req.path)) {
                debug.log('[hgi-jwt]', ip, 'on excluded list, granting access!')
                return next()
            }
            debug.log('[hgi-jwt]', ip, 'not on excluded list, checking...')
        }

        if(secretKey === undefined) {
            debug.log('[hgi-jwt]', 'JWT secret is missing, add JWT_SECRET to the .env file');
            return res.status(401).json({ error: 'Unauthorized - JWT_SECRET is missing' }).end()
        }

        let token = req.cookies.jwt;

        if(token === undefined) {
            debug.log('[hgi-jwt]', ip, 'JWT token is missing - unauthorized');
            return res.status(401).json({ error: 'Unauthorized - JWT token is missing' }).end()
        }

        let payload;

	    try {

            payload = jwt.verify(token, secretKey)
            debug.log('[hgi-jwt]', ip, 'payload:', payload)

            let requiredRole = options?.role ?? 'user'
            
            if(payload.role === undefined || payload.role != requiredRole) {
                debug.log('[hgi-jwt]', ip, 'unauthorized, wrong role: ', payload.role, ' vs ', requiredRole)
			    return res.status(401).send({ error: 'Unauthorized - wrong role' }).end()
            }

            debug.log('[hgi-jwt]', ip, 'authorized!')
            return next()

	    } catch (e) {
            debug.log('[hgi-jwt]', 'exception:', e)
		    if (e instanceof jwt.JsonWebTokenError) {
			    return res.status(401).send({ error: 'JWT is unauthorized' }).end()
		    }
		    return res.status(400).end()
	    }
    }
}

function payload(req) {

    const secretKey = process.env.JWT_SECRET;
    let token = req?.cookies?.jwt;

    if(token == undefined)
        return { }

    try {
        return jwt.verify(token, secretKey)
    } catch (e) {
        return { }
    }
}

function regexFrom(strings, flags) {
  return new RegExp(
    strings
      .map(s => s.replace(/[()[\]{}?^$|#,\/\\\s-]/g, "\\$&"))
      .map(s => '^' + s + '$')
      .sort((a, b) => b.length - a.length)
      .join("|"),
    flags
  )
}