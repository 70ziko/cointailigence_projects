'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
var Theming = require('@ui5/webcomponents-base/dist/Theming');
var reactJss = require('react-jss');
var StyleClassHelper = require('@ui5/webcomponents-react-base/lib/StyleClassHelper');
var useConsolidatedRef = require('@ui5/webcomponents-react-base/lib/useConsolidatedRef');
var usePassThroughHtmlProps = require('@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps');
var ButtonDesign = require('@ui5/webcomponents-react/lib/ButtonDesign');
var ResponsivePopover$1 = require('@ui5/webcomponents-react/lib/ResponsivePopover');
var React = require('react');
var reactDom = require('react-dom');
var ThemingParameters = require('@ui5/webcomponents-react-base/lib/ThemingParameters');
var spacing = require('@ui5/webcomponents-react-base/lib/spacing');
var hooks = require('@ui5/webcomponents-react-base/lib/hooks');
var Utils = require('@ui5/webcomponents-react-base/lib/Utils');
var i18nDefaults = require('@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults');
var DeviationIndicator = require('@ui5/webcomponents-react/lib/DeviationIndicator');
var FlexBox$1 = require('@ui5/webcomponents-react/lib/FlexBox');
var FlexBoxAlignItems = require('@ui5/webcomponents-react/lib/FlexBoxAlignItems');
var FlexBoxDirection = require('@ui5/webcomponents-react/lib/FlexBoxDirection');
var FlexBoxJustifyContent = require('@ui5/webcomponents-react/lib/FlexBoxJustifyContent');
var FlexBoxWrap = require('@ui5/webcomponents-react/lib/FlexBoxWrap');
var ObjectStatus$1 = require('@ui5/webcomponents-react/lib/ObjectStatus');
var ValueState = require('@ui5/webcomponents-react/lib/ValueState');
var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var GlobalStyleClasses = require('@ui5/webcomponents-react/lib/GlobalStyleClasses');
var TableScaleWidthMode = require('@ui5/webcomponents-react/lib/TableScaleWidthMode');
var TableSelectionBehavior = require('@ui5/webcomponents-react/lib/TableSelectionBehavior');
var TableSelectionMode = require('@ui5/webcomponents-react/lib/TableSelectionMode');
var TableVisibleRowCountMode = require('@ui5/webcomponents-react/lib/TableVisibleRowCountMode');
var debounce = require('lodash/debounce');
var reactTable = require('react-table');
var CssSizeVariables = require('@ui5/webcomponents-react-base/lib/CssSizeVariables');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var reactVirtual = require('react-virtual');
require('@ui5/webcomponents-icons/dist/filter');
require('@ui5/webcomponents-icons/dist/group-2');
require('@ui5/webcomponents-icons/dist/sort-ascending');
require('@ui5/webcomponents-icons/dist/sort-descending');
var Icon$1 = require('@ui5/webcomponents-react/lib/Icon');
var Text$1 = require('@ui5/webcomponents-react/lib/Text');
require('@ui5/webcomponents-icons/dist/decline');
var List$1 = require('@ui5/webcomponents-react/lib/List');
var ListItemTypes = require('@ui5/webcomponents-react/lib/ListItemTypes');
var PlacementType = require('@ui5/webcomponents-react/lib/PlacementType');
var Popover$1 = require('@ui5/webcomponents-react/lib/Popover');
var PopoverHorizontalAlign = require('@ui5/webcomponents-react/lib/PopoverHorizontalAlign');
var StandardListItem$1 = require('@ui5/webcomponents-react/lib/StandardListItem');
var VerticalAlign = require('@ui5/webcomponents-react/lib/VerticalAlign');
var Input$1 = require('@ui5/webcomponents-react/lib/Input');
var Device = require('@ui5/webcomponents-react-base/lib/Device');
var TextAlign = require('@ui5/webcomponents-react/lib/TextAlign');
var Loader$1 = require('@ui5/webcomponents-react/lib/Loader');
var ContentLoader = require('react-content-loader');
var CheckBox$1 = require('@ui5/webcomponents-react/lib/CheckBox');
var _createForOfIteratorHelper = require('@babel/runtime/helpers/createForOfIteratorHelper');
require('@ui5/webcomponents-icons/dist/navigation-down-arrow');
require('@ui5/webcomponents-icons/dist/navigation-right-arrow');
var Title$1 = require('@ui5/webcomponents-react/lib/Title');
var AvatarFitType = require('@ui5/webcomponents-react/lib/AvatarFitType');
var AvatarShape = require('@ui5/webcomponents-react/lib/AvatarShape');
var withWebComponent$1 = require('@ui5/webcomponents-react/lib/withWebComponent');
require('@ui5/webcomponents/dist/Avatar');
var AvatarGroupType = require('@ui5/webcomponents-react/lib/AvatarGroupType');
var AvatarSize = require('@ui5/webcomponents-react/lib/AvatarSize');
require('@ui5/webcomponents/dist/AvatarGroup');
require('@ui5/webcomponents/dist/Badge');
var BarDesign = require('@ui5/webcomponents-react/lib/BarDesign');
require('@ui5/webcomponents-fiori/dist/Bar');
var BreadcrumbsSeparatorStyle = require('@ui5/webcomponents-react/lib/BreadcrumbsSeparatorStyle');
var Label$1 = require('@ui5/webcomponents-react/lib/Label');
var BusyIndicatorSize = require('@ui5/webcomponents-react/lib/BusyIndicatorSize');
require('@ui5/webcomponents/dist/BusyIndicator');
require('@ui5/webcomponents/dist/Button');
var CalendarSelection = require('@ui5/webcomponents-react/lib/CalendarSelection');
var CalendarType = require('@ui5/webcomponents-react/lib/CalendarType');
require('@ui5/webcomponents/dist/Calendar');
require('@ui5/webcomponents/dist/Card');
var CarouselArrowsPlacement = require('@ui5/webcomponents-react/lib/CarouselArrowsPlacement');
require('@ui5/webcomponents/dist/Carousel');
require('@ui5/webcomponents/dist/CheckBox');
require('@ui5/webcomponents/dist/ComboBox');
require('@ui5/webcomponents/dist/ComboBoxItem');
require('@ui5/webcomponents/dist/CustomListItem');
require('@ui5/webcomponents/dist/DatePicker');
require('@ui5/webcomponents/dist/DateRangePicker');
require('@ui5/webcomponents/dist/DateTimePicker');
require('@ui5/webcomponents/dist/Dialog');
require('@ui5/webcomponents/dist/DurationPicker');
var PageBackgroundDesign = require('@ui5/webcomponents-react/lib/PageBackgroundDesign');
require('@ui5/webcomponents-icons/dist/slim-arrow-down.js');
require('@ui5/webcomponents-icons/dist/slim-arrow-up.js');
var Button$1 = require('@ui5/webcomponents-react/lib/Button');
var ToggleButton$1 = require('@ui5/webcomponents-react/lib/ToggleButton');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Toolbar$1 = require('@ui5/webcomponents-react/lib/Toolbar');
var ToolbarDesign = require('@ui5/webcomponents-react/lib/ToolbarDesign');
var ToolbarSeparator$1 = require('@ui5/webcomponents-react/lib/ToolbarSeparator');
var ToolbarSpacer$1 = require('@ui5/webcomponents-react/lib/ToolbarSpacer');
var ToolbarStyle = require('@ui5/webcomponents-react/lib/ToolbarStyle');
require('@ui5/webcomponents/dist/FileUploader');
var _toPropertyKey = require('@babel/runtime/helpers/toPropertyKey');
var BusyIndicator$1 = require('@ui5/webcomponents-react/lib/BusyIndicator');
require('@ui5/webcomponents-icons/dist/search');
var Bar$1 = require('@ui5/webcomponents-react/lib/Bar');
var Dialog$1 = require('@ui5/webcomponents-react/lib/Dialog');
var TitleLevel = require('@ui5/webcomponents-react/lib/TitleLevel');
var FCLLayout = require('@ui5/webcomponents-react/lib/FCLLayout');
require('@ui5/webcomponents-fiori/dist/FlexibleColumnLayout');
var _wrapRegExp = require('@babel/runtime/helpers/wrapRegExp');
var useViewportRange = require('@ui5/webcomponents-react-base/lib/useViewportRange');
var GridPosition = require('@ui5/webcomponents-react/lib/GridPosition');
require('@ui5/webcomponents/dist/GroupHeaderListItem');
require('@ui5/webcomponents/dist/Icon');
var InputType = require('@ui5/webcomponents-react/lib/InputType');
require('@ui5/webcomponents/dist/Input');
require('@ui5/webcomponents/dist/Label');
var LinkDesign = require('@ui5/webcomponents-react/lib/LinkDesign');
require('@ui5/webcomponents/dist/Link');
var ListMode = require('@ui5/webcomponents-react/lib/ListMode');
var ListSeparators = require('@ui5/webcomponents-react/lib/ListSeparators');
require('@ui5/webcomponents/dist/List');
var LoaderType = require('@ui5/webcomponents-react/lib/LoaderType');
require('@ui5/webcomponents-icons/dist/hint');
require('@ui5/webcomponents-icons/dist/message-error');
require('@ui5/webcomponents-icons/dist/message-information');
require('@ui5/webcomponents-icons/dist/message-success');
require('@ui5/webcomponents-icons/dist/message-warning');
require('@ui5/webcomponents-icons/dist/question-mark');
var MessageBoxActions = require('@ui5/webcomponents-react/lib/MessageBoxActions');
var MessageBoxTypes = require('@ui5/webcomponents-react/lib/MessageBoxTypes');
var MessageStripType = require('@ui5/webcomponents-react/lib/MessageStripType');
require('@ui5/webcomponents/dist/MessageStrip');
require('@ui5/webcomponents/dist/MultiComboBox');
require('@ui5/webcomponents/dist/MultiComboBoxItem');
require('@ui5/webcomponents/dist/MultiInput');
require('@ui5/webcomponents-fiori/dist/NotificationAction');
var Priority = require('@ui5/webcomponents-react/lib/Priority');
require('@ui5/webcomponents-fiori/dist/NotificationListGroupItem');
require('@ui5/webcomponents-fiori/dist/NotificationListItem');
var ObjectPageMode = require('@ui5/webcomponents-react/lib/ObjectPageMode');
require('@ui5/webcomponents-icons/dist/pushpin-off');
require('@ui5/webcomponents-icons/dist/slim-arrow-down');
require('@ui5/webcomponents-icons/dist/slim-arrow-up');
var TabContainer$1 = require('@ui5/webcomponents-react/lib/TabContainer');
require('@ui5/webcomponents/dist/StandardListItem');
var Tab$1 = require('@ui5/webcomponents-react/lib/Tab');
var _toArray = require('@babel/runtime/helpers/toArray');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _inherits = require('@babel/runtime/helpers/inherits');
var _createSuper = require('@babel/runtime/helpers/createSuper');
var _wrapNativeSuper = require('@babel/runtime/helpers/wrapNativeSuper');
require('@ui5/webcomponents-icons/dist/status-critical');
require('@ui5/webcomponents-icons/dist/status-inactive');
require('@ui5/webcomponents-icons/dist/status-negative');
require('@ui5/webcomponents-icons/dist/status-positive');
require('@ui5/webcomponents/dist/Option');
require('@ui5/webcomponents-icons/dist/navigation-left-arrow');
var PanelAccessibleRoles = require('@ui5/webcomponents-react/lib/PanelAccessibleRoles');
require('@ui5/webcomponents/dist/Panel');
var PopoverVerticalAlign = require('@ui5/webcomponents-react/lib/PopoverVerticalAlign');
require('@ui5/webcomponents/dist/Popover');
require('@ui5/webcomponents-fiori/dist/ProductSwitch');
require('@ui5/webcomponents-fiori/dist/ProductSwitchItem');
require('@ui5/webcomponents/dist/ProgressIndicator');
require('@ui5/webcomponents/dist/RadioButton');
require('@ui5/webcomponents/dist/RangeSlider');
require('@ui5/webcomponents/dist/RatingIndicator');
require('@ui5/webcomponents/dist/ResponsivePopover');
require('@ui5/webcomponents/dist/SegmentedButton');
require('@ui5/webcomponents/dist/Select');
require('@ui5/webcomponents-fiori/dist/ShellBar');
require('@ui5/webcomponents-fiori/dist/ShellBarItem');
require('@ui5/webcomponents-fiori/dist/SideNavigation');
require('@ui5/webcomponents-fiori/dist/SideNavigationItem');
require('@ui5/webcomponents-fiori/dist/SideNavigationSubItem');
require('@ui5/webcomponents/dist/Slider');
require('@ui5/webcomponents/dist/SuggestionItem');
require('@ui5/webcomponents/dist/Switch');
var SemanticColor = require('@ui5/webcomponents-react/lib/SemanticColor');
require('@ui5/webcomponents/dist/Tab');
var TabContainerTabsPlacement = require('@ui5/webcomponents-react/lib/TabContainerTabsPlacement');
var TabLayout = require('@ui5/webcomponents-react/lib/TabLayout');
require('@ui5/webcomponents/dist/TabContainer');
require('@ui5/webcomponents/dist/TabSeparator');
require('@ui5/webcomponents/dist/Table');
require('@ui5/webcomponents/dist/TableCell');
require('@ui5/webcomponents/dist/TableColumn');
require('@ui5/webcomponents/dist/TableRow');
require('@ui5/webcomponents/dist/TextArea');
var RTL = require('@ui5/webcomponents-base/dist/config/RTL');
var Theme = require('@ui5/webcomponents-base/dist/config/Theme');
var i18nBundle = require('@ui5/webcomponents-base/dist/i18nBundle');
var ContentDensity = require('@ui5/webcomponents-react/lib/ContentDensity');
require('@ui5/webcomponents/dist/TimePicker');
require('@ui5/webcomponents-fiori/dist/Timeline');
require('@ui5/webcomponents-fiori/dist/TimelineItem');
require('@ui5/webcomponents/dist/Title');
var ToastPlacement = require('@ui5/webcomponents-react/lib/ToastPlacement');
require('@ui5/webcomponents/dist/Toast');
require('@ui5/webcomponents/dist/ToggleButton');
require('@ui5/webcomponents/dist/Token');
require('@ui5/webcomponents-icons/dist/overflow');
require('@ui5/webcomponents/dist/Tree');
require('@ui5/webcomponents/dist/TreeItem');
require('@ui5/webcomponents-fiori/dist/UploadCollection');
var UploadState = require('@ui5/webcomponents-react/lib/UploadState');
require('@ui5/webcomponents-fiori/dist/UploadCollectionItem');
require('@ui5/webcomponents-fiori/dist/Wizard');
require('@ui5/webcomponents-fiori/dist/WizardStep');
var CustomElementsScope = require('@ui5/webcomponents-base/dist/CustomElementsScope');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutProperties);
var ContentLoader__default = /*#__PURE__*/_interopDefaultLegacy(ContentLoader);
var _createForOfIteratorHelper__default = /*#__PURE__*/_interopDefaultLegacy(_createForOfIteratorHelper);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _toPropertyKey__default = /*#__PURE__*/_interopDefaultLegacy(_toPropertyKey);
var _wrapRegExp__default = /*#__PURE__*/_interopDefaultLegacy(_wrapRegExp);
var _toArray__default = /*#__PURE__*/_interopDefaultLegacy(_toArray);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
var _createSuper__default = /*#__PURE__*/_interopDefaultLegacy(_createSuper);
var _wrapNativeSuper__default = /*#__PURE__*/_interopDefaultLegacy(_wrapNativeSuper);

var styles = {
  /*
   *  is being applied to the encapsulating ul element
   */
  actionSheet: {
    margin: 0,
    padding: '0.1875rem 0.375rem',
    '& ui5-button': {
      display: 'block'
    }
  }
};

var useStyles = reactJss.createUseStyles(styles, {
  name: 'ActionSheet'
});
Theming.addCustomCSS('ui5-button', "\n  :host([data-is-action-sheet-button]) .ui5-button-root {\n    justify-content: flex-start;\n  }\n  ");
/**
 * The `ActionSheet` holds a list of buttons from which the user can select to complete an action. <br />
 * The children of the action sheet should be `Button` components. Elements in the `ActionSheet` are left-aligned. Actions should be arranged in order of importance, from top to bottom.
 */

var ActionSheet = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      style = props.style,
      slot = props.slot,
      className = props.className,
      allowTargetOverlap = props.allowTargetOverlap,
      headerText = props.headerText,
      horizontalAlign = props.horizontalAlign,
      initialFocus = props.initialFocus,
      modal = props.modal,
      noArrow = props.noArrow,
      placementType = props.placementType,
      verticalAlign = props.verticalAlign,
      footer = props.footer,
      header = props.header,
      onAfterClose = props.onAfterClose,
      onAfterOpen = props.onAfterOpen,
      onBeforeClose = props.onBeforeClose,
      onBeforeOpen = props.onBeforeOpen;
  var classes = useStyles();
  var actionSheetClasses = StyleClassHelper.StyleClassHelper.of(classes.actionSheet).putIfPresent(className);
  var popoverRef = useConsolidatedRef.useConsolidatedRef(ref);

  var onActionButtonClicked = function onActionButtonClicked(handler) {
    return function (e) {
      popoverRef.current.close();

      if (typeof handler === 'function') {
        handler(e);
      }
    };
  };

  var renderActionSheetButton = function renderActionSheetButton(element, index) {
    return /*#__PURE__*/React.cloneElement(element, {
      key: index,
      design: ButtonDesign.ButtonDesign.Transparent,
      onClick: onActionButtonClicked(element.props.onClick),
      'data-is-action-sheet-button': ''
    });
  };

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onAfterClose', 'onAfterOpen', 'onBeforeClose', 'onBeforeOpen']);
  return /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default['default'].createElement(ResponsivePopover$1.ResponsivePopover, _extends__default['default']({
    ref: popoverRef,
    style: style,
    slot: slot,
    className: actionSheetClasses.className,
    allowTargetOverlap: allowTargetOverlap,
    headerText: headerText,
    horizontalAlign: horizontalAlign,
    initialFocus: initialFocus,
    modal: modal,
    noArrow: noArrow,
    placementType: placementType,
    verticalAlign: verticalAlign,
    footer: footer,
    header: header,
    onAfterClose: onAfterClose,
    onAfterOpen: onAfterOpen,
    onBeforeClose: onBeforeClose,
    onBeforeOpen: onBeforeOpen
  }, passThroughProps), React.Children.map(children, renderActionSheetButton)), document.body);
});
ActionSheet.displayName = 'ActionSheet';

var styles$1 = {
  card: {
    backgroundColor: ThemingParameters.ThemingParameters.sapTile_Background,
    border: "0.0625rem solid ".concat(ThemingParameters.ThemingParameters.sapTile_BorderColor),
    boxShadow: ThemingParameters.ThemingParameters.sapContent_Shadow0,
    borderRadius: ThemingParameters.ThemingParameters.sapElement_BorderCornerRadius,
    textAlign: 'start',
    overflow: 'hidden',
    position: 'relative',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    boxSizing: 'border-box',
    width: '20rem'
  },
  content: spacing.sapUiContentPadding
};

var useStyles$1 = reactJss.createUseStyles(styles$1, {
  name: 'AnalyticalCard'
});
/**
 * The `AnalyticalCard` is mainly used for data visualization. It consists of two areas – a header area and a chart area with a visual representation of the data.<br />
 */

var AnalyticalCard = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      header = props.header;
  var classes = useStyles$1();
  var classNameString = StyleClassHelper.StyleClassHelper.of(classes.card);

  if (className) {
    classNameString.put(className);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    className: classNameString.toString(),
    style: style,
    title: tooltip
  }, passThroughProps), header, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.content
  }, children));
});
AnalyticalCard.displayName = 'AnalyticalCard';

var styles$2 = {
  helpText: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapTextColor
  },
  cardHeader: _objectSpread__default['default'](_objectSpread__default['default']({}, spacing.sapUiContentPadding), {}, {
    outlineOffset: '-0.125rem',
    boxShadow: ThemingParameters.ThemingParameters.sapContent_HeaderShadow,
    borderBottom: "0.0625rem solid ".concat(ThemingParameters.ThemingParameters.sapTile_SeparatorColor),
    backgroundColor: ThemingParameters.ThemingParameters.sapTile_Background,
    fontFamily: ThemingParameters.ThemingParameters.sapFontHeaderFamily,
    '&:hover': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_Background
    },
    '&:active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_Background
    }
  }),
  arrowIndicatorShape: {
    width: 0,
    height: 0
  },
  arrowUp: {
    borderLeft: '8px solid transparent',
    borderRight: '8px solid transparent',
    borderBottom: '8px solid'
  },
  arrowDown: {
    borderLeft: '8px solid transparent',
    borderRight: '8px solid transparent',
    borderTop: '8px solid'
  },
  arrowRight: {
    borderLeft: "8px solid ",
    borderTop: '8px solid transparent',
    borderBottom: '8px solid transparent'
  },
  cardHeaderClickable: {
    cursor: 'pointer'
  },
  headerContent: {
    marginLeft: '1rem',
    marginRight: '1rem',
    position: 'relative'
  },
  headerTitles: {
    overflow: 'hidden',
    textAlign: 'left',
    whiteSpace: 'normal',
    wordWrap: 'break-word'
  },
  headerText: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontHeaderFamily,
    fontWeight: 'normal',
    // was ThemingParameters.sapUiFontHeaderWeight
    fontSize: ThemingParameters.ThemingParameters.sapFontHeader5Size,
    color: ThemingParameters.ThemingParameters.sapTile_TitleTextColor,
    overflow: 'hidden',
    display: '-webkit-box',
    lineHeight: '18px',
    maxHeight: '54px'
    /* height * number of lines */
    ,
    WebkitLineClamp: '3'
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical'
  },
  subHeaderText: {
    overflow: 'hidden',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontWeight: 'normal',
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    color: ThemingParameters.ThemingParameters.sapTile_TextColor,
    textAlign: 'left',
    whiteSpace: 'normal',
    wordWrap: 'break-word',
    textOverflow: 'ellipsis',
    marginTop: '0.5rem',
    width: '100%',
    display: '-webkit-box',
    lineHeight: '16px',
    maxHeight: '32px',
    WebkitLineClamp: '2',
    WebkitBoxOrient: 'vertical'
  },
  counter: {
    fontSize: ThemingParameters.ThemingParameters.sapFontSmallSize,
    margin: '0.188rem 0  0 1rem',
    lineHeight: 'normal',
    textAlign: 'right'
  },
  currency: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapTile_TextColor,
    overflow: 'hidden',
    marginLeft: '0.25rem',
    textAlign: 'right'
  },
  helpIcon: {
    position: 'absolute',
    right: '0',
    top: '0'
  },
  kpiContent: {
    fontWeight: 'normal',
    marginTop: '0.5rem',
    color: ThemingParameters.ThemingParameters.sapTile_TextColor,
    width: '100%',
    boxSizing: 'border-box'
  },
  valueAndUnit: {
    display: 'flex',
    alignItems: 'end',
    color: ThemingParameters.ThemingParameters.sapNeutralTextColor
  },
  value: {
    fontSize: '2rem',
    maxWidth: '135px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    display: 'block'
  },
  unit: {
    marginLeft: '0.25rem',
    fontSize: '1rem'
  },
  indicatorAndUnit: {
    display: 'flex',
    height: '2rem',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'flex-end'
  },
  targetAndDeviation: {
    width: '60%',
    paddingBottom: '0.25rem',
    textAlign: 'right',
    fontSize: ThemingParameters.ThemingParameters.sapFontSmallSize,
    color: ThemingParameters.ThemingParameters.sapTile_TextColor
  },
  targetAndDeviationColumn: {
    maxWidth: '45%',
    marginLeft: '1rem'
  },
  targetAndDeviationValue: {
    color: ThemingParameters.ThemingParameters.sapTile_TitleTextColor,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  description: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSmallSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapTile_TextColor,
    whiteSpace: 'normal',
    overflow: 'hidden',
    textAlign: 'left',
    textOverflow: 'ellipsis',
    marginTop: '0.25rem',
    width: '100%',
    display: '-webkit-box',
    lineHeight: '14px',
    maxHeight: '14px'
    /* height * number of lines */
    ,
    WebkitLineClamp: '1'
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical'
  },
  good: {
    color: ThemingParameters.ThemingParameters.sapPositiveTextColor
  },
  error: {
    color: ThemingParameters.ThemingParameters.sapNegativeTextColor
  },
  critical: {
    color: ThemingParameters.ThemingParameters.sapCriticalTextColor
  },
  none: {
    color: ThemingParameters.ThemingParameters.sapNeutralTextColor
  }
};

var useStyles$2 = reactJss.createUseStyles(styles$2, {
  name: 'AnalyticalCardHeader'
});
var AnalyticalCardHeader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var title = props.title,
      subTitle = props.subTitle,
      value = props.value,
      unit = props.unit,
      target = props.target,
      deviation = props.deviation,
      valueState = props.valueState,
      onHeaderPress = props.onHeaderPress,
      showIndicator = props.showIndicator,
      tooltip = props.tooltip,
      className = props.className,
      description = props.description,
      counter = props.counter,
      counterState = props.counterState,
      currency = props.currency,
      indicatorState = props.indicatorState,
      arrowIndicator = props.arrowIndicator,
      style = props.style;
  var classes = useStyles$2(props);
  var onClick = React.useCallback(function (e) {
    if (onHeaderPress) {
      onHeaderPress(Utils.enrichEventWithDetails(e));
    }
  }, [onHeaderPress]);
  var indicatorIcon = React.useMemo(function () {
    var arrowClasses = StyleClassHelper.StyleClassHelper.of(classes.arrowIndicatorShape);

    switch (arrowIndicator) {
      case DeviationIndicator.DeviationIndicator.Up:
        arrowClasses.put(classes.arrowUp);
        break;

      case DeviationIndicator.DeviationIndicator.Down:
        arrowClasses.put(classes.arrowDown);
        break;

      default:
        arrowClasses.put(classes.arrowRight);
        break;
    }

    switch (indicatorState) {
      case ValueState.ValueState.Success:
        arrowClasses.put(classes.good);
        break;

      case ValueState.ValueState.Error:
        arrowClasses.put(classes.error);
        break;

      case ValueState.ValueState.Warning:
        arrowClasses.put(classes.critical);
        break;

      default:
        arrowClasses.put(classes.none);
        break;
    }

    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: arrowClasses.valueOf()
    });
  }, [arrowIndicator, indicatorState, classes]);
  var headerClasses = StyleClassHelper.StyleClassHelper.of(classes.cardHeader);

  if (onHeaderPress) {
    headerClasses.put(classes.cardHeaderClickable);
  }

  var valueAndUnitClasses = StyleClassHelper.StyleClassHelper.of(classes.valueAndUnit);

  if (valueState === ValueState.ValueState.Error) {
    valueAndUnitClasses.put(classes.error);
  }

  if (valueState === ValueState.ValueState.Warning) {
    valueAndUnitClasses.put(classes.critical);
  }

  if (valueState === ValueState.ValueState.Success) {
    valueAndUnitClasses.put(classes.good);
  }

  if (className) {
    headerClasses.put(className);
  }

  var shouldRenderContent = [value, unit, deviation, target].some(function (v) {
    return v !== null;
  });
  var passThroughProps = hooks.usePassThroughHtmlProps(props, ['onHeaderPress']);
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    className: headerClasses.valueOf(),
    title: tooltip,
    style: style
  }, passThroughProps, {
    onClick: onClick
  }), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.headerContent
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.headerTitles
  }, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    justifyContent: FlexBoxJustifyContent.FlexBoxJustifyContent.SpaceBetween,
    wrap: FlexBoxWrap.FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.headerText
  }, title), /*#__PURE__*/React__default['default'].createElement(ObjectStatus$1.ObjectStatus, {
    className: classes.counter,
    state: counterState
  }, counter)), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.subHeaderText
  }, subTitle, currency && " | ".concat(currency))), shouldRenderContent && /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Row,
    className: classes.kpiContent,
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.End
  }, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Row
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: valueAndUnitClasses.valueOf()
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.value
  }, value), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.indicatorAndUnit
  }, showIndicator && indicatorIcon, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.unit
  }, unit)))), /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Row,
    wrap: FlexBoxWrap.FlexBoxWrap.NoWrap,
    className: classes.targetAndDeviation
  }, target !== null && /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Column,
    className: classes.targetAndDeviationColumn,
    wrap: FlexBoxWrap.FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React__default['default'].createElement("span", null, i18nBundle.getText(i18nDefaults.TARGET)), /*#__PURE__*/React__default['default'].createElement("span", {
    className: classes.targetAndDeviationValue
  }, target)), deviation !== null && /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Column,
    className: classes.targetAndDeviationColumn,
    wrap: FlexBoxWrap.FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React__default['default'].createElement("span", null, i18nBundle.getText(i18nDefaults.DEVIATION)), /*#__PURE__*/React__default['default'].createElement("span", {
    className: classes.targetAndDeviationValue
  }, deviation)))), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.description
  }, description)));
});
AnalyticalCardHeader.displayName = 'AnalyticalCardHeader';
AnalyticalCardHeader.defaultProps = {
  title: null,
  subTitle: null,
  arrowIndicator: DeviationIndicator.DeviationIndicator.None,
  showIndicator: true,
  indicatorState: ValueState.ValueState.None,
  value: null,
  unit: null,
  valueState: ValueState.ValueState.None,
  target: null,
  deviation: null,
  onHeaderPress: null,
  description: null,
  counter: null,
  counterState: ValueState.ValueState.None,
  currency: null
};

var styles$3 = {
  table: {
    position: 'relative',
    width: '100%',
    maxWidth: '100%',
    overflowY: 'hidden',
    overflowX: 'auto',
    height: '100%',
    minHeight: '3rem',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    backgroundColor: ThemingParameters.ThemingParameters.sapList_Background
  },
  tableHeaderRow: {
    height: CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    display: 'inline-flex',
    '& div:first-child $th': {
      borderLeft: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
    }
  },
  hasNavigationIndicator: {
    '& $tableHeaderRow :nth-last-child(2) $th': {
      borderRight: 'none'
    },
    '& $tr :nth-last-child(2)': {
      borderRight: 'none'
    }
  },
  tableHeaderBackgroundElement: {
    boxSizing: 'border-box',
    position: 'absolute',
    left: 0,
    right: 0,
    height: CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    backgroundColor: ThemingParameters.ThemingParameters.sapList_HeaderBackground,
    borderTop: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
  },
  th: {
    height: CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    color: ThemingParameters.ThemingParameters.sapList_HeaderTextColor,
    backgroundColor: ThemingParameters.ThemingParameters.sapList_HeaderBackground,
    borderTop: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    borderRight: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    padding: "0 0.5rem",
    textAlign: 'start',
    boxSizing: 'border-box',
    '&[data-column-id="__ui5wcr__internal_highlight_column"]': {
      borderRight: 'none'
    },
    '&:last-child': {
      '& [data-resizer]': {
        transform: 'translateX(0px)'
      }
    }
  },
  tbody: {
    position: 'relative',
    overflowX: 'hidden',
    overflowY: 'auto',
    scrollBarWidth: 'none !important',
    '-ms-overflow-style': 'none',
    '&::-webkit-scrollbar': {
      width: 0,
      height: 0
    }
  },
  alternateRowColor: {
    backgroundColor: ThemingParameters.ThemingParameters.sapList_AlternatingBackground
  },
  tr: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    color: ThemingParameters.ThemingParameters.sapList_TextColor,
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    boxSizing: 'border-box',
    display: 'flex',
    willChange: 'transform',
    '&:hover': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_Background
    },
    '&[data-is-selected]': {
      borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_SelectionBorderColor),
      backgroundColor: ThemingParameters.ThemingParameters.sapList_SelectionBackgroundColor
    },
    '&[data-is-selected]:hover': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_SelectionBackground
    }
  },
  trActive: {
    '&:hover': {
      cursor: 'pointer'
    },
    '&:active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Active_Background,
      '& $tableCell': {
        borderRight: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_Active_Background),
        color: "".concat(ThemingParameters.ThemingParameters.sapList_Active_TextColor),
        '--sapTextColor': ThemingParameters.ThemingParameters.sapList_Active_TextColor
      }
    }
  },
  tableGroupHeader: {
    '&$tr': {
      backgroundColor: "".concat(ThemingParameters.ThemingParameters.sapList_TableGroupHeaderBackground),
      border: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_TableGroupHeaderBorderColor),
      color: ThemingParameters.ThemingParameters.sapList_TextColor,
      '& $tableCell': {
        borderRight: 'none'
      }
    }
  },
  tableCell: {
    height: '100%',
    boxSizing: 'border-box',
    borderRight: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    display: 'inline-flex',
    padding: '0 0.5rem',
    '&:first-child': {
      borderLeft: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
    },
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    alignItems: 'center',
    position: 'relative',
    '&:focus': {
      outlineOffset: '-2px',
      outline: "1px dotted ".concat(ThemingParameters.ThemingParameters.sapContent_FocusColor)
    }
  },
  noDataContainer: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: '100%',
    backgroundColor: ThemingParameters.ThemingParameters.sapList_Background,
    width: '100%',
    boxSizing: 'border-box',
    color: ThemingParameters.ThemingParameters.sapList_TextColor,
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
  },
  valueStateSuccess: {
    backgroundColor: ThemingParameters.ThemingParameters.sapSuccessColor
  },
  valueStateError: {
    backgroundColor: ThemingParameters.ThemingParameters.sapErrorColor
  },
  valueStateWarning: {
    backgroundColor: ThemingParameters.ThemingParameters.sapWarningColor
  },
  valueStateInformation: {
    backgroundColor: ThemingParameters.ThemingParameters.sapInformationColor
  }
};

var stopPropagation = function stopPropagation(e) {
  e.stopPropagation();
  e.stopImmediatePropagation();
};

var styles$4 = {
  popover: {
    fontWeight: 'normal'
  },
  filter: {
    padding: '0px 1rem',
    height: 'var(--_ui5_custom_list_item_height)',
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
  },
  filterIcon: {
    paddingRight: '0.5rem',
    minWidth: '1rem',
    minHeight: '1rem'
  }
};
var useStyles$3 = reactJss.createUseStyles(styles$4, {
  name: 'ColumnHeaderModal'
});
var ColumnHeaderModal = function ColumnHeaderModal(props) {
  var column = props.column,
      onSort = props.onSort,
      onGroupBy = props.onGroupBy,
      open = props.open,
      setPopoverOpen = props.setPopoverOpen,
      targetRef = props.targetRef;
  var classes = useStyles$3();
  var showFilter = column.canFilter;
  var showGroup = column.canGroupBy;
  var showSort = column.canSort;
  var ref = React.useRef(null);
  var Filter = column.Filter;
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  var clearSortingText = i18nBundle.getText(i18nDefaults.CLEAR_SORTING);
  var sortAscendingText = i18nBundle.getText(i18nDefaults.SORT_ASCENDING);
  var sortDescendingText = i18nBundle.getText(i18nDefaults.SORT_DESCENDING);
  var groupText = i18nBundle.getText(i18nDefaults.GROUP);
  var ungroupText = i18nBundle.getText(i18nDefaults.UNGROUP);
  var handleSort = React.useCallback(function (e) {
    var sortType = e.detail.item.getAttribute('data-sort');

    switch (sortType) {
      case 'asc':
        column.toggleSortBy(false);

        if (typeof onSort === 'function') {
          onSort(Utils.enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'desc':
        column.toggleSortBy(true);

        if (typeof onSort === 'function') {
          onSort(Utils.enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'clear':
        column.clearSortBy();

        if (typeof onSort === 'function') {
          onSort(Utils.enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'group':
        var willGroup = !column.isGrouped;
        column.toggleGroupBy(willGroup);

        if (typeof onGroupBy === 'function') {
          onGroupBy(Utils.enrichEventWithDetails(e, {
            column: column,
            isGrouped: willGroup
          }));
        }

        break;
    }

    if (ref.current) {
      ref.current.close();
    }
  }, [column, ref, onGroupBy, onSort]);
  var isSortedAscending = column.isSorted && column.isSortedDesc === false;
  var isSortedDescending = column.isSorted && column.isSortedDesc === true;
  React.useEffect(function () {
    var popoverInstance = ref.current;

    if (open) {
      popoverInstance === null || popoverInstance === void 0 ? void 0 : popoverInstance.openBy(targetRef.current);
    }
  }, [open, targetRef.current, ref.current]);
  var onAfterClose = React.useCallback(function (e) {
    var _ref$current;

    stopPropagation(e);
    ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.close();
    setPopoverOpen(false);
  }, [setPopoverOpen]);
  if (!open) return null;
  return /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default['default'].createElement(Popover$1.Popover, {
    noArrow: true,
    horizontalAlign: PopoverHorizontalAlign.PopoverHorizontalAlign.Left,
    placementType: PlacementType.PlacementType.Bottom,
    ref: ref,
    className: classes.popover,
    onAfterClose: onAfterClose
  }, /*#__PURE__*/React__default['default'].createElement(List$1.List, {
    onItemClick: handleSort
  }, isSortedAscending && /*#__PURE__*/React__default['default'].createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "decline",
    "data-sort": "clear"
  }, clearSortingText), showSort && !isSortedAscending && /*#__PURE__*/React__default['default'].createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "sort-ascending",
    "data-sort": "asc"
  }, sortAscendingText), showSort && !isSortedDescending && /*#__PURE__*/React__default['default'].createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "sort-descending",
    "data-sort": "desc"
  }, sortDescendingText), isSortedDescending && /*#__PURE__*/React__default['default'].createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "decline",
    "data-sort": "clear"
  }, clearSortingText), showFilter && !column.isGrouped && /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Center,
    className: classes.filter
  }, /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
    name: "filter",
    className: classes.filterIcon
  }), /*#__PURE__*/React__default['default'].createElement(Filter, {
    column: column,
    popoverRef: ref
  })), showGroup && /*#__PURE__*/React__default['default'].createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "group-2",
    "data-sort": 'group'
  }, column.isGrouped ? ungroupText : groupText))), document.body);
};
ColumnHeaderModal.displayName = 'ColumnHeaderModal';

var styles$5 = {
  header: {
    height: '100%',
    display: 'flex',
    justifyContent: 'begin',
    alignItems: 'center',
    textAlign: 'left',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapList_TextColor,
    background: ThemingParameters.ThemingParameters.sapList_HeaderBackground,
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    maxWidth: '100%',
    position: 'relative',
    width: '100%',
    overflowX: 'hidden',
    overflowY: 'hidden',
    boxSizing: 'border-box',
    '&[data-h-align="End"]': {
      '& $text': {
        textAlign: 'end'
      }
    }
  },
  text: {
    width: '100%',
    textAlign: 'start'
  },
  iconContainer: {
    display: 'inline-block',
    position: 'absolute',
    color: ThemingParameters.ThemingParameters.sapContent_IconColor
  }
};
var useStyles$4 = reactJss.createUseStyles(styles$5, {
  name: 'TableColumnHeader'
});
var ColumnHeader = function ColumnHeader(props) {
  var classes = useStyles$4(props);
  var id = props.id,
      children = props.children,
      column = props.column,
      className = props.className,
      style = props.style,
      onSort = props.onSort,
      onGroupBy = props.onGroupBy,
      onDragEnter = props.onDragEnter,
      onDragOver = props.onDragOver,
      onDragStart = props.onDragStart,
      onDrop = props.onDrop,
      onDragEnd = props.onDragEnd,
      headerTooltip = props.headerTooltip,
      isDraggable = props.isDraggable,
      dragOver = props.dragOver,
      role = props.role,
      virtualColumn = props.virtualColumn,
      isRtl = props.isRtl;
  var isFiltered = column.filterValue && column.filterValue.length > 0;

  var _useState = React.useState(false),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      popoverOpen = _useState2[0],
      setPopoverOpen = _useState2[1];

  var tooltip = React.useMemo(function () {
    if (headerTooltip) {
      return headerTooltip;
    }

    if (typeof children === 'string') {
      return children;
    }

    return null;
  }, [children, headerTooltip]);
  var textStyle = React.useMemo(function () {
    var margin = 0;
    if (column.isSorted) margin++;
    if (column.isGrouped) margin++;
    if (isFiltered) margin++;

    if (margin === 0) {
      return {};
    }

    if (margin > 0) margin += 0.5;

    if (isRtl) {
      return {
        marginLeft: "".concat(margin, "rem")
      };
    }

    return {
      marginRight: "".concat(margin, "rem")
    };
  }, [column.isSorted, column.isGrouped, isFiltered, isRtl]);
  var hasPopover = column.canGroupBy || column.canSort || column.canFilter;
  var onOpenPopover = React.useCallback(function () {
    if (hasPopover) {
      setPopoverOpen(true);
    }
  }, [hasPopover]);
  var directionStyles = isRtl ? {
    right: 0,
    transform: "translateX(-".concat(virtualColumn.start, "px)")
  } : {
    left: 0,
    transform: "translateX(".concat(virtualColumn.start, "px)")
  };
  var iconContainerDirectionStyles = isRtl ? {
    left: '0.5rem'
  } : {
    right: '0.5rem'
  };
  var targetRef = React.useRef();
  if (!column) return null;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    ref: targetRef,
    style: _objectSpread__default['default']({
      position: 'absolute',
      top: 0,
      width: "".concat(virtualColumn.size, "px")
    }, directionStyles)
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    id: id,
    className: className,
    style: _objectSpread__default['default'](_objectSpread__default['default']({}, style), {}, {
      cursor: hasPopover ? 'pointer' : 'auto',
      borderLeft: dragOver ? "3px solid ".concat(ThemingParameters.ThemingParameters.sapSelectedColor) : undefined
    }),
    role: role,
    draggable: isDraggable,
    onDragEnter: onDragEnter,
    onDragOver: onDragOver,
    onDragStart: onDragStart,
    onDrop: onDrop,
    onDragEnd: onDragEnd,
    "data-column-id": id,
    onClick: onOpenPopover
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.header,
    "data-h-align": column.hAlign
  }, /*#__PURE__*/React__default['default'].createElement(Text$1.Text, {
    tooltip: tooltip,
    wrapping: false,
    style: textStyle,
    className: classes.text
  }, children), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.iconContainer,
    style: iconContainerDirectionStyles
  }, isFiltered && /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
    name: "filter"
  }), column.isSorted && /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
    name: column.isSortedDesc ? 'sort-descending' : 'sort-ascending'
  }), column.isGrouped && /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
    name: "group-2"
  }))), hasPopover && targetRef.current && /*#__PURE__*/React__default['default'].createElement(ColumnHeaderModal, {
    column: column,
    onSort: onSort,
    onGroupBy: onGroupBy,
    targetRef: targetRef,
    open: popoverOpen,
    setPopoverOpen: setPopoverOpen
  })));
};

var styles$6 = {
  resizer: {
    display: 'inline-block',
    width: '3px',
    height: '100%',
    position: 'absolute',
    bottom: 0,
    top: 0,
    zIndex: 1,
    cursor: 'col-resize',
    willChange: 'transform',
    '&:hover, &:active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapContent_DragAndDropActiveColor
    }
  }
};
var useStyles$5 = reactJss.createUseStyles(styles$6, {
  name: 'Resizer'
});
var ColumnHeaderContainer = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var headerProps = props.headerProps,
      headerGroup = props.headerGroup,
      onSort = props.onSort,
      onGroupByChanged = props.onGroupByChanged,
      onDragStart = props.onDragStart,
      onDragOver = props.onDragOver,
      onDrop = props.onDrop,
      onDragEnter = props.onDragEnter,
      onDragEnd = props.onDragEnd,
      dragOver = props.dragOver,
      tableRef = props.tableRef,
      visibleColumnsWidth = props.visibleColumnsWidth,
      overscanCountHorizontal = props.overscanCountHorizontal,
      resizeInfo = props.resizeInfo,
      reactWindowRef = props.reactWindowRef,
      isRtl = props.isRtl;
  var columnVirtualizer = reactVirtual.useVirtual({
    size: visibleColumnsWidth.length,
    parentRef: tableRef,
    estimateSize: React.useCallback(function (index) {
      return visibleColumnsWidth[index];
    }, [visibleColumnsWidth]),
    horizontal: true,
    overscan: overscanCountHorizontal
  });
  reactWindowRef.current = _objectSpread__default['default'](_objectSpread__default['default']({}, reactWindowRef.current), {}, {
    horizontalScrollToOffset: columnVirtualizer.scrollToOffset,
    horizontalScrollToIndex: columnVirtualizer.scrollToIndex
  });
  var classes = useStyles$5();
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({}, headerProps, {
    style: {
      width: "".concat(columnVirtualizer.totalSize, "px")
    },
    ref: ref
  }), columnVirtualizer.virtualItems.map(function (virtualColumn) {
    var column = headerGroup.headers[virtualColumn.index];

    if (!column) {
      return null;
    }

    var isLastColumn = !column.disableResizing && virtualColumn.index + 1 === headerGroup.headers.length;
    var resizerDirectionStyle = isRtl ? {
      right: "".concat(column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0), "px"),
      transform: 'translateX(50%)'
    } : {
      left: "".concat(column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0), "px"),
      transform: 'translateX(-50%)'
    };

    var _column$getHeaderProp = column.getHeaderProps(),
        key = _column$getHeaderProp.key,
        rest = _objectWithoutProperties__default['default'](_column$getHeaderProp, ["key"]);

    return /*#__PURE__*/React__default['default'].createElement(React.Fragment, {
      key: key
    }, column.canResize && column.getResizerProps && /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({}, column.getResizerProps(), {
      "data-resizer": true,
      className: classes.resizer,
      style: resizerDirectionStyle
    })), /*#__PURE__*/React__default['default'].createElement(ColumnHeader, _extends__default['default']({}, rest, {
      onSort: onSort,
      onGroupBy: onGroupByChanged,
      onDragStart: onDragStart,
      onDragOver: onDragOver,
      onDrop: onDrop,
      onDragEnter: onDragEnter,
      onDragEnd: onDragEnd,
      dragOver: column.id === dragOver,
      headerTooltip: column.headerTooltip,
      isDraggable: column.canReorder && !resizeInfo.isResizingColumn,
      virtualColumn: virtualColumn,
      isRtl: isRtl
    }), column.render('Header')));
  }));
});

var DefaultFilterComponent = function DefaultFilterComponent(_ref) {
  var column = _ref.column;
  var handleChange = React.useCallback(function (e) {
    column.setFilter(e.target.value || undefined);
  }, [column.setFilter]);
  return /*#__PURE__*/React__default['default'].createElement(Input$1.Input, {
    onInput: handleChange,
    value: column.filterValue
  });
};

var Cell = function Cell(_ref) {
  var _ref$cell = _ref.cell,
      _ref$cell$value = _ref$cell.value,
      value = _ref$cell$value === void 0 ? '' : _ref$cell$value,
      isGrouped = _ref$cell.isGrouped,
      row = _ref.row;
  var cellContent = "".concat(value !== null && value !== void 0 ? value : '');

  if (isGrouped) {
    cellContent += " (".concat(row.subRows.length, ")");
  }

  return /*#__PURE__*/React__default['default'].createElement(Text$1.Text, {
    wrapping: false,
    tooltip: cellContent
  }, cellContent);
};

var tableGroupExpandCollapseIcon = {
  color: 'var(--sapContent_IconColor)',
  height: '0.75rem',
  width: '0.75rem',
  padding: '0.625rem',
  display: 'block'
};
var isBrowserIe = Device.isIE();

var getPadding = function getPadding(level) {
  switch (level) {
    case 0:
      return 0;

    case 1:
      return isBrowserIe ? '1rem' : CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel1;

    case 2:
      return isBrowserIe ? '1.5rem' : CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel2;

    case 3:
      return isBrowserIe ? '2rem' : CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel3;

    default:
      return isBrowserIe ? "calc(2rem + ".concat(level - 3, "rem * 0.5)") : "calc(".concat(CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel3, " + ").concat(level - 3, "rem * 0.5)");
  }
};

var Expandable = function Expandable(props) {
  var cell = props.cell,
      row = props.row,
      column = props.column,
      columns = props.columns,
      webComponentsReactProperties = props.webComponentsReactProperties;
  var tableColumns = columns.filter(function (_ref) {
    var id = _ref.id;
    return id !== '__ui5wcr__internal_selection_column' && id !== '__ui5wcr__internal_highlight_column' && id !== '__ui5wcr__internal_navigation_column';
  });
  var columnIndex = tableColumns.findIndex(function (col) {
    return col.id === column.id;
  });
  var paddingLeft;

  if (row.canExpand) {
    paddingLeft = columnIndex === 0 ? getPadding(row.depth) : 0;
  } else {
    paddingLeft = columnIndex === 0 ? "calc(".concat(getPadding(row.depth), " + 2rem)") : 0;
  }

  var style = {
    paddingLeft: paddingLeft
  };
  var rowProps = row.getToggleRowExpandedProps();
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, columnIndex === 0 && (row.canExpand || !!webComponentsReactProperties.renderRowSubComponent) ? /*#__PURE__*/React__default['default'].createElement("span", {
    onClick: rowProps.onClick,
    title: rowProps.title,
    style: _objectSpread__default['default'](_objectSpread__default['default']({}, rowProps.style), style)
  }, /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
    name: "".concat(row.isExpanded ? 'navigation-down-arrow' : 'navigation-right-arrow'),
    style: tableGroupExpandCollapseIcon
  })) : /*#__PURE__*/React__default['default'].createElement("span", {
    style: style
  }), cell.render('Cell'));
};

var tableGroupExpandCollapseIcon$1 = {
  color: 'var(--sapContent_IconColor)',
  height: '0.75rem',
  width: '0.75rem',
  padding: '0.625rem',
  display: 'block'
};
var Grouped = function Grouped(props) {
  var cell = props.cell,
      row = props.row;
  var style = {};

  if (cell.column.hAlign && (cell.column.hAlign !== TextAlign.TextAlign.Left || cell.column.hAlign !== TextAlign.TextAlign.Begin)) {
    style.marginRight = 'auto';
  }

  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("span", row.getToggleRowExpandedProps({
    style: style
  }), /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
    name: "".concat(row.isExpanded ? 'navigation-down-arrow' : 'navigation-right-arrow'),
    style: tableGroupExpandCollapseIcon$1
  })), cell.render('Cell'));
};

var PopInStyles = {
  container: {
    width: '100%'
  },
  defaultCell: {
    fontFamily: "".concat(ThemingParameters.ThemingParameters.sapFontBoldFamily),
    '& *': {
      fontFamily: "".concat(ThemingParameters.ThemingParameters.sapFontBoldFamily)
    }
  },
  header: {
    height: '16px'
  }
};
var useStyles$6 = reactJss.createUseStyles(PopInStyles, {
  name: 'PopIn'
});
var PopIn = function PopIn(instance) {
  var _state$popInColumns;

  var state = instance.state,
      contentToRender = instance.contentToRender,
      cell = instance.cell,
      row = instance.row,
      internalRowHeight = instance.internalRowHeight;
  var classes = useStyles$6();
  return /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Column,
    className: classes.container
  }, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    alignItems: contentToRender !== 'Grouped' && contentToRender !== 'Expandable' ? FlexBoxAlignItems.FlexBoxAlignItems.Start : FlexBoxAlignItems.FlexBoxAlignItems.Center,
    wrap: FlexBoxWrap.FlexBoxWrap.NoWrap,
    className: classes.defaultCell,
    style: {
      height: internalRowHeight
    }
  }, cell.render(contentToRender)), contentToRender !== 'Grouped' && ((_state$popInColumns = state.popInColumns) === null || _state$popInColumns === void 0 ? void 0 : _state$popInColumns.map(function (item) {
    var _item$column2;

    var popInInstanceProps = row.allCells.find(function (cell) {
      return cell.column.id === item.id;
    });

    var renderHeader = function renderHeader() {
      if (item.column.PopInHeader) {
        return typeof item.column.PopInHeader === 'function' ? item.column.PopInHeader(_objectSpread__default['default'](_objectSpread__default['default']({}, instance), popInInstanceProps)) : item.column.PopInHeader;
      }

      return typeof item.column.Header === 'function' ? reactTable.makeRenderer(_objectSpread__default['default'](_objectSpread__default['default']({}, instance), popInInstanceProps), item.column)(item.column.Header) : item.column.Header;
    };

    var renderCell = function renderCell() {
      var _item$column;

      if ((_item$column = item.column) !== null && _item$column !== void 0 && _item$column.Cell) {
        var _cell = item.column.Cell;

        if (typeof _cell === 'string') {
          return /*#__PURE__*/React__default['default'].createElement(Text$1.Text, {
            wrapping: false,
            tooltip: _cell
          }, _cell);
        }

        return reactTable.makeRenderer(_objectSpread__default['default'](_objectSpread__default['default'](_objectSpread__default['default']({}, instance), popInInstanceProps), {}, {
          isPopIn: true
        }), item.column)(item.column.Cell);
      }

      return popInInstanceProps !== null && popInInstanceProps !== void 0 && popInInstanceProps.value ? /*#__PURE__*/React__default['default'].createElement(Text$1.Text, {
        wrapping: false,
        tooltip: popInInstanceProps.value
      }, popInInstanceProps.value) : null;
    };

    return /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
      direction: FlexBoxDirection.FlexBoxDirection.Column,
      key: item.id
    }, ((_item$column2 = item.column) === null || _item$column2 === void 0 ? void 0 : _item$column2.Header) && /*#__PURE__*/React__default['default'].createElement("div", {
      className: classes.header
    }, renderHeader(), ":"), /*#__PURE__*/React__default['default'].createElement("div", {
      style: {
        height: internalRowHeight
      }
    }, popInInstanceProps && renderCell()));
  })));
};

var RepeatedValue = function RepeatedValue() {
  return null;
};

var DEFAULT_COLUMN_WIDTH = 60;

var defaultFilterMethod = function defaultFilterMethod(filter, row) {
  return new RegExp(filter.value, 'gi').test(String(row[filter.id]));
};

var DefaultColumn = {
  Filter: DefaultFilterComponent,
  canResize: true,
  canReorder: true,
  minWidth: DEFAULT_COLUMN_WIDTH,
  vAlign: VerticalAlign.VerticalAlign.Middle,
  defaultFilter: defaultFilterMethod,
  Grouped: Grouped,
  Cell: Cell,
  Expandable: Expandable,
  RepeatedValue: RepeatedValue,
  PopIn: PopIn
};

var styles$7 = {
  loader: {
    position: 'absolute',
    top: CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    left: 0,
    right: 0,
    zIndex: 1
  }
};
var useStyles$7 = reactJss.createUseStyles(styles$7, {
  name: 'LoadingComponent'
});

var DefaultLoadingComponent = function DefaultLoadingComponent(_ref) {
  var style = _ref.style;
  var classes = useStyles$7();
  return /*#__PURE__*/React__default['default'].createElement(Loader$1.Loader, {
    delay: 500,
    style: style,
    className: classes.loader
  });
};

DefaultLoadingComponent.displayName = 'DefaultLoadingComponent';

var getArrayOfLength = function getArrayOfLength(len) {
  return Array.from(Array(len).keys());
};

var TableRow = function TableRow(_ref) {
  var columns = _ref.columns,
      y = _ref.y,
      row = _ref.row;
  var columnOffset = 0;
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, columns.map(function (column, i) {
    var el = /*#__PURE__*/React__default['default'].createElement("rect", {
      key: "column-".concat(i, "-row-").concat(row),
      x: columnOffset + 2,
      y: y,
      rx: "2",
      ry: "8",
      width: column.totalWidth - 4,
      height: "16"
    });
    columnOffset += column.totalWidth;
    return el;
  }));
};

var TablePlaceholder = function TablePlaceholder(props) {
  var columns = props.columns,
      rows = props.rows,
      style = props.style,
      rowHeight = props.rowHeight,
      tableWidth = props.tableWidth,
      isRtl = props.isRtl;
  var height = rows * rowHeight;
  var innerStyles = React.useMemo(function () {
    return _objectSpread__default['default']({
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Background
    }, style);
  }, [style, ThemingParameters.ThemingParameters.sapList_Background]);
  return /*#__PURE__*/React__default['default'].createElement(ContentLoader__default['default'], {
    style: innerStyles,
    height: height,
    width: tableWidth,
    rtl: isRtl,
    speed: 2,
    backgroundColor: ThemingParameters.ThemingParameters.sapContent_ImagePlaceholderBackground,
    foregroundColor: ThemingParameters.ThemingParameters.sapContent_ImagePlaceholderForegroundColor,
    backgroundOpacity: ThemingParameters.ThemingParameters.sapContent_DisabledOpacity
  }, getArrayOfLength(rows).map(function (_, index) {
    return /*#__PURE__*/React__default['default'].createElement(TableRow, {
      key: index,
      columns: columns,
      y: rowHeight * index + rowHeight / 2,
      row: index
    });
  }));
};
TablePlaceholder.displayName = 'TablePlaceholder';
TablePlaceholder.defaultProps = {
  rows: 5
};

var DefaultNoDataComponent = function DefaultNoDataComponent(_ref) {
  var noDataText = _ref.noDataText,
      className = _ref.className,
      style = _ref.style;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: className,
    style: style
  }, noDataText);
};

var getColumnId = function getColumnId(column) {
  return typeof column.accessor === 'string' ? column.accessor : column.id;
};

var useDragAndDrop = function useDragAndDrop(props, isRtl, setColumnOrder, columnOrder, resizeInfo, columns) {
  var onColumnsReordered = props.onColumnsReordered;

  var _useState = React.useState(''),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      dragOver = _useState2[0],
      setDragOver = _useState2[1];

  var handleDragStart = React.useCallback(function (e) {
    if (resizeInfo.isResizingColumn) {
      e.preventDefault();
      return;
    }

    e.dataTransfer.setData('text', e.currentTarget.dataset.columnId);
  }, [resizeInfo.isResizingColumn]);
  var handleDragOver = React.useCallback(function (e) {
    e.preventDefault();
  }, []);
  var handleDragEnter = React.useCallback(function (e) {
    setDragOver(e.currentTarget.dataset.columnId);
  }, []);
  var handleOnDrop = React.useCallback(function (e) {
    setDragOver('');
    var droppedColId = e.currentTarget.dataset.columnId;
    var draggedColId = e.dataTransfer.getData('text');
    if (droppedColId === draggedColId) return;
    var internalColumnOrder = columnOrder.length > 0 ? columnOrder : columns.map(function (col) {
      return getColumnId(col);
    });
    var droppedColIdx = internalColumnOrder.findIndex(function (col) {
      return col === droppedColId;
    });
    var draggedColIdx = internalColumnOrder.findIndex(function (col) {
      return col === draggedColId;
    });

    var tempCols = _toConsumableArray__default['default'](internalColumnOrder);

    var targetIndex = droppedColIdx > draggedColIdx ? isRtl ? droppedColIdx : droppedColIdx - 1 : droppedColIdx;
    tempCols.splice(targetIndex, 0, tempCols.splice(draggedColIdx, 1)[0]);
    setColumnOrder(tempCols);
    var columnsNewOrder = tempCols.map(function (tempColId) {
      return columns.find(function (col) {
        return getColumnId(col) === tempColId;
      });
    });
    onColumnsReordered(Utils.enrichEventWithDetails(e, {
      columnsNewOrder: columnsNewOrder,
      column: columns[draggedColIdx]
    }));
  }, [columnOrder, onColumnsReordered, columns]);
  var handleOnDragEnd = React.useCallback(function () {
    setDragOver('');
  }, [dragOver]);
  return [dragOver, handleDragEnter, handleDragStart, handleDragOver, handleOnDrop, handleOnDragEnd];
};

var ROW_SAMPLE_SIZE = 20;
var DEFAULT_HEADER_NUM_CHAR = 10;
var MAX_WIDTH = 700; // a function, which approximates header px sizes given a character length

var approximateHeaderPxFromCharLength = function approximateHeaderPxFromCharLength(charLength) {
  return charLength < 15 ? Math.sqrt(charLength * 1500) : 8 * charLength;
};

var approximateContentPxFromCharLength = function approximateContentPxFromCharLength(charLength) {
  return 8 * charLength;
};

var columnsDeps = function columnsDeps(deps, _ref) {
  var _ref$instance = _ref.instance,
      state = _ref$instance.state,
      webComponentsReactProperties = _ref$instance.webComponentsReactProperties,
      visibleColumns = _ref$instance.visibleColumns;
  return [].concat(_toConsumableArray__default['default'](deps), [state.tableClientWidth, visibleColumns === null || visibleColumns === void 0 ? void 0 : visibleColumns.length, webComponentsReactProperties.scaleWidthMode, webComponentsReactProperties.loading]);
};

var columns = function columns(_columns, _ref2) {
  var instance = _ref2.instance;

  if (!instance.state || !instance.rows) {
    return _columns;
  }

  var rows = instance.rows,
      state = instance.state;
  var hiddenColumns = state.hiddenColumns,
      totalWidth = state.tableClientWidth;
  var _instance$webComponen = instance.webComponentsReactProperties,
      scaleWidthMode = _instance$webComponen.scaleWidthMode,
      loading = _instance$webComponen.loading;
  if (_columns.length === 0 || !totalWidth) return _columns; //map columns to visibleColumns

  var visibleColumns = instance.visibleColumns.map(function (visCol) {
    var column = _columns.find(function (col) {
      return col.id === visCol.id || col.accessor !== undefined && visCol.id !== undefined && col.accessor === visCol.id;
    });

    if (column) {
      return column;
    }

    return column !== null && column !== void 0 ? column : false;
  }).filter(Boolean);

  var calculateDefaultTableWidth = function calculateDefaultTableWidth() {
    var columnsWithWidthProperties = visibleColumns.filter(function (column) {
      var _ref3, _ref4, _column$width;

      return (_ref3 = (_ref4 = (_column$width = column.width) !== null && _column$width !== void 0 ? _column$width : column.minWidth) !== null && _ref4 !== void 0 ? _ref4 : column.maxWidth) !== null && _ref3 !== void 0 ? _ref3 : false;
    }).map(function (column) {
      var _column$id;

      return {
        accessor: (_column$id = column.id) !== null && _column$id !== void 0 ? _column$id : column.accessor,
        minWidth: column.minWidth,
        width: column.width,
        maxWidth: column.maxWidth
      };
    });
    var availableWidth = totalWidth;
    var defaultColumnsCount = visibleColumns.length;
    var columnsWithFixedWidth = columnsWithWidthProperties.map(function (column) {
      var width = column.width,
          minWidth = column.minWidth,
          maxWidth = column.maxWidth,
          accessor = column.accessor;

      if (width) {
        // necessary because of default minWidth
        var acceptedWidth = accessor !== '__ui5wcr__internal_highlight_column' && accessor !== '__ui5wcr__internal_selection_column' && accessor !== '__ui5wcr__internal_navigation_column' && width < 60 ? 60 : width;
        availableWidth -= acceptedWidth;
        defaultColumnsCount--;
        return acceptedWidth;
      }

      var columnsWithMaxWidth = columnsWithWidthProperties.filter(function (item) {
        return item.maxWidth;
      });
      var aggregatedColumnsMaxWidth = columnsWithMaxWidth.reduce(function (acc, cur) {
        return acc + cur.maxWidth;
      }, 0);
      var aggregatedColumnsMinWidth = columnsWithWidthProperties.filter(function (item) {
        return item.minWidth && !item.maxWidth;
      }).reduce(function (acc, cur) {
        return acc + cur.minWidth;
      }, 0);

      if (minWidth > availableWidth / defaultColumnsCount) {
        // don't apply minWidth if enough space is available because of maxWidth properties
        if (availableWidth - aggregatedColumnsMaxWidth > aggregatedColumnsMinWidth + (visibleColumns.length - columnsWithWidthProperties.length) * 60) {
          // apply minWidth only if it's larger than the calculated available width
          if (minWidth > (availableWidth - aggregatedColumnsMaxWidth) / columnsWithMaxWidth.length) {
            availableWidth -= minWidth;
            defaultColumnsCount--;
            return minWidth;
          }

          return false;
        }

        availableWidth -= minWidth;
        defaultColumnsCount--;
        return minWidth;
      }

      if (maxWidth < availableWidth / defaultColumnsCount) {
        availableWidth -= maxWidth;
        defaultColumnsCount--;
        return maxWidth;
      }

      return false;
    }).filter(Boolean);
    var fixedWidth = columnsWithFixedWidth.reduce(function (acc, val) {
      return acc + val;
    }, 0); // check if columns are visible and table has width

    if (visibleColumns.length > 0 && totalWidth > 0) {
      // set fixedWidth as defaultWidth if all visible columns have fixed value
      if (visibleColumns.length === columnsWithFixedWidth.length) {
        return fixedWidth / visibleColumns.length;
      } // spread default columns


      if (totalWidth >= fixedWidth + defaultColumnsCount * DEFAULT_COLUMN_WIDTH) {
        return (totalWidth - fixedWidth) / defaultColumnsCount;
      }
    }

    return DEFAULT_COLUMN_WIDTH;
  };

  var hasData = rows.some(function (row) {
    var _row$original;

    return !((_row$original = row.original) !== null && _row$original !== void 0 && _row$original.emptyRow);
  });

  if (scaleWidthMode === TableScaleWidthMode.TableScaleWidthMode.Default || !hasData && loading) {
    var defaultWidth = calculateDefaultTableWidth();
    return _columns.map(function (column) {
      var _column$width2;

      return _objectSpread__default['default'](_objectSpread__default['default']({}, column), {}, {
        width: (_column$width2 = column.width) !== null && _column$width2 !== void 0 ? _column$width2 : defaultWidth
      });
    });
  }

  var rowSample = rows.slice(0, ROW_SAMPLE_SIZE);
  var columnMeta = visibleColumns.reduce(function (acc, column) {
    var _column$id5;

    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_navigation_column') {
      var _column$id2;

      acc[(_column$id2 = column.id) !== null && _column$id2 !== void 0 ? _column$id2 : column.accessor] = {
        minHeaderWidth: column.width,
        fullWidth: column.width,
        contentCharAvg: 0
      };
      return acc;
    }

    var headerLength = typeof column.Header === 'string' ? column.Header.length : DEFAULT_HEADER_NUM_CHAR; // max character length

    var contentMaxCharLength = Math.max.apply(Math, [headerLength].concat(_toConsumableArray__default['default'](rowSample.map(function (row) {
      var _row$values, _column$id3;

      var dataPoint = (_row$values = row.values) === null || _row$values === void 0 ? void 0 : _row$values[(_column$id3 = column.id) !== null && _column$id3 !== void 0 ? _column$id3 : column.accessor];

      if (dataPoint) {
        if (typeof dataPoint === 'string') return dataPoint.length;
        if (typeof dataPoint === 'number') return (dataPoint + '').length;
      }

      return 0;
    })))); // avg character length

    var contentCharAvg = rowSample.reduce(function (acc, item) {
      var _item$values, _column$id4;

      var dataPoint = (_item$values = item.values) === null || _item$values === void 0 ? void 0 : _item$values[(_column$id4 = column.id) !== null && _column$id4 !== void 0 ? _column$id4 : column.accessor];
      var val = 0;

      if (dataPoint) {
        if (typeof dataPoint === 'string') val = dataPoint.length;
        if (typeof dataPoint === 'number') val = (dataPoint + '').length;
      }

      return acc + val;
    }, 0) / rowSample.length;
    var minHeaderWidth = approximateHeaderPxFromCharLength(headerLength);
    acc[(_column$id5 = column.id) !== null && _column$id5 !== void 0 ? _column$id5 : column.accessor] = {
      minHeaderWidth: minHeaderWidth,
      fullWidth: Math.max(minHeaderWidth, approximateContentPxFromCharLength(contentMaxCharLength)),
      contentCharAvg: contentCharAvg
    };
    return acc;
  }, {});
  var totalCharNum = Object.values(columnMeta).reduce(function (acc, item) {
    return acc + item.contentCharAvg;
  }, 0);
  var reservedWidth = visibleColumns.reduce(function (acc, column) {
    var _column$id6;

    var _columnMeta = columnMeta[(_column$id6 = column.id) !== null && _column$id6 !== void 0 ? _column$id6 : column.accessor],
        minHeaderWidth = _columnMeta.minHeaderWidth,
        fullWidth = _columnMeta.fullWidth;
    return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0, scaleWidthMode === TableScaleWidthMode.TableScaleWidthMode.Grow ? fullWidth : 0) || 0;
  }, 0);
  var availableWidth = totalWidth - reservedWidth;

  if (scaleWidthMode === TableScaleWidthMode.TableScaleWidthMode.Smart || availableWidth > 0) {
    if (scaleWidthMode === TableScaleWidthMode.TableScaleWidthMode.Grow) {
      reservedWidth = visibleColumns.reduce(function (acc, column) {
        var _column$id7;

        var minHeaderWidth = columnMeta[(_column$id7 = column.id) !== null && _column$id7 !== void 0 ? _column$id7 : column.accessor].minHeaderWidth;
        return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0) || 0;
      }, 0);
      availableWidth = totalWidth - reservedWidth;
    }

    return _columns.map(function (column) {
      var _column$isVisible, _column$id8, _column$id9;

      var isColumnVisible = ((_column$isVisible = column.isVisible) !== null && _column$isVisible !== void 0 ? _column$isVisible : true) && !hiddenColumns.includes((_column$id8 = column.id) !== null && _column$id8 !== void 0 ? _column$id8 : column.accessor);
      var meta = columnMeta[(_column$id9 = column.id) !== null && _column$id9 !== void 0 ? _column$id9 : column.accessor];

      if (isColumnVisible && meta) {
        var _column$width3, _column$minWidth;

        var minHeaderWidth = meta.minHeaderWidth,
            contentCharAvg = meta.contentCharAvg;
        var additionalSpaceFactor = totalCharNum > 0 ? contentCharAvg / totalCharNum : 1 / visibleColumns.length;
        var targetWidth = additionalSpaceFactor * availableWidth + minHeaderWidth;
        return _objectSpread__default['default'](_objectSpread__default['default']({}, column), {}, {
          width: (_column$width3 = column.width) !== null && _column$width3 !== void 0 ? _column$width3 : targetWidth,
          minWidth: (_column$minWidth = column.minWidth) !== null && _column$minWidth !== void 0 ? _column$minWidth : minHeaderWidth
        });
      }

      return column;
    });
  } // TableScaleWidthMode Grow


  return _columns.map(function (column) {
    var _column$isVisible2, _column$id10, _column$id11;

    var isColumnVisible = ((_column$isVisible2 = column.isVisible) !== null && _column$isVisible2 !== void 0 ? _column$isVisible2 : true) && !hiddenColumns.includes((_column$id10 = column.id) !== null && _column$id10 !== void 0 ? _column$id10 : column.accessor);
    var meta = columnMeta[(_column$id11 = column.id) !== null && _column$id11 !== void 0 ? _column$id11 : column.accessor];

    if (isColumnVisible && meta) {
      var _column$width4;

      var fullWidth = meta.fullWidth;
      return _objectSpread__default['default'](_objectSpread__default['default']({}, column), {}, {
        width: (_column$width4 = column.width) !== null && _column$width4 !== void 0 ? _column$width4 : fullWidth,
        maxWidth: MAX_WIDTH
      });
    }

    return column;
  });
};

var useDynamicColumnWidths = function useDynamicColumnWidths(hooks) {
  hooks.columns.push(columns);
  hooks.columnsDeps.push(columnsDeps);
};

var popInVisibleColumnsDeps = function popInVisibleColumnsDeps(deps, _ref) {
  var state = _ref.instance.state;
  return [].concat(_toConsumableArray__default['default'](deps), [state.tableClientWidth]);
};

var popInVisibleColumns = function popInVisibleColumns(cols, _ref2) {
  var instance = _ref2.instance;
  var state = instance.state,
      dispatch = instance.dispatch;
  var tableClientWidth = state.isScrollable ? (state === null || state === void 0 ? void 0 : state.tableClientWidth) + 14
  /*scrollbar width*/
  : state === null || state === void 0 ? void 0 : state.tableClientWidth;
  var popInColumns = cols.filter(function (item) {
    return item.responsivePopIn && tableClientWidth < item.responsiveMinWidth;
  }).map(function (item) {
    var _item$id;

    return {
      id: (_item$id = item.id) !== null && _item$id !== void 0 ? _item$id : item.accessor,
      column: item
    };
  });
  dispatch({
    type: 'SET_POPIN_COLUMNS',
    payload: popInColumns
  });
  return cols.filter(function (col) {
    return !popInColumns.some(function (item) {
      var _col$id;

      return item.id === ((_col$id = col.id) !== null && _col$id !== void 0 ? _col$id : col.accessor);
    }) && (col.hasOwnProperty('responsiveMinWidth') ? !tableClientWidth || tableClientWidth >= col.responsiveMinWidth : true);
  });
};

var usePopIn = function usePopIn(hooks) {
  hooks.visibleColumns.push(popInVisibleColumns);
  hooks.visibleColumnsDeps.push(popInVisibleColumnsDeps);
};

var baseStyles = {
  width: '100%',
  height: '100%'
};
var StyleClassMap = new Map();
StyleClassMap.set(ValueState.ValueState.None, undefined);
StyleClassMap.set(ValueState.ValueState.Success, 'valueStateSuccess');
StyleClassMap.set(ValueState.ValueState.Warning, 'valueStateWarning');
StyleClassMap.set(ValueState.ValueState.Error, 'valueStateError');
StyleClassMap.set(ValueState.ValueState.Information, 'valueStateInformation');
/*
 * COMPONENTS
 */

var Header = function Header() {
  return /*#__PURE__*/React__default['default'].createElement("div", {
    style: {
      width: '6px'
    }
  });
};

var Cell$1 = function Cell(instance) {
  var cell = instance.cell,
      webComponentsReactProperties = instance.webComponentsReactProperties;
  var styleClass = StyleClassMap.get(cell.value) ? webComponentsReactProperties.classes[StyleClassMap.get(cell.value)] : undefined;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    style: baseStyles,
    className: styleClass
  });
};
/*
 * TABLE HOOKS
 */


var columnsDeps$1 = function columnsDeps(deps, _ref) {
  var webComponentsReactProperties = _ref.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray__default['default'](deps), [webComponentsReactProperties.withRowHighlight, webComponentsReactProperties.highlightField]);
};

var visibleColumnsDeps = function visibleColumnsDeps(deps, _ref2) {
  var instance = _ref2.instance;
  return [].concat(_toConsumableArray__default['default'](deps), [instance.webComponentsReactProperties.withRowHighlight]);
};

var visibleColumns = function visibleColumns(currentVisibleColumns, _ref3) {
  var webComponentsReactProperties = _ref3.instance.webComponentsReactProperties;

  if (!webComponentsReactProperties.withRowHighlight) {
    return currentVisibleColumns.filter(function (_ref4) {
      var id = _ref4.id;
      return id !== '__ui5wcr__internal_highlight_column';
    });
  }

  var highlightColumn = currentVisibleColumns.find(function (_ref5) {
    var id = _ref5.id;
    return id === '__ui5wcr__internal_highlight_column';
  });
  return [highlightColumn].concat(_toConsumableArray__default['default'](currentVisibleColumns.filter(function (_ref6) {
    var id = _ref6.id;
    return id !== '__ui5wcr__internal_highlight_column';
  })));
};

var columns$1 = function columns(currentColumns, _ref7) {
  var instance = _ref7.instance;
  var _instance$webComponen = instance.webComponentsReactProperties,
      withRowHighlight = _instance$webComponen.withRowHighlight,
      highlightField = _instance$webComponen.highlightField;

  if (!withRowHighlight) {
    return currentColumns;
  }

  return [{
    id: '__ui5wcr__internal_highlight_column',
    accessor: highlightField,
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    canReorder: false,
    width: 6,
    minWidth: 6,
    maxWidth: 6,
    Header: Header,
    Cell: Cell$1
  }].concat(_toConsumableArray__default['default'](currentColumns));
};

var useRowHighlight = function useRowHighlight(hooks) {
  hooks.columns.push(columns$1);
  hooks.columnsDeps.push(columnsDeps$1);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps);
  hooks.visibleColumns.push(visibleColumns);
};
useRowHighlight.pluginName = 'useRowHighlight';

var baseStyles$1 = {
  width: '100%',
  height: '100%'
};
/*
 * COMPONENTS
 */

var Header$1 = function Header() {
  return /*#__PURE__*/React__default['default'].createElement("div", {
    style: {
      width: '6px'
    }
  });
};

var Cell$2 = function Cell(instance) {
  var isNavigatedCell = instance.isNavigatedCell,
      webComponentsReactProperties = instance.webComponentsReactProperties;

  if (isNavigatedCell) {
    return /*#__PURE__*/React__default['default'].createElement("div", {
      style: baseStyles$1,
      className: webComponentsReactProperties.classes.valueStateInformation
    });
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    style: baseStyles$1
  });
};
/*
 * TABLE HOOKS
 */


var columnsDeps$2 = function columnsDeps(deps, _ref) {
  var webComponentsReactProperties = _ref.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray__default['default'](deps), [webComponentsReactProperties.withNavigationHighlight]);
};

var visibleColumnsDeps$1 = function visibleColumnsDeps(deps, _ref2) {
  var instance = _ref2.instance;
  return [].concat(_toConsumableArray__default['default'](deps), [instance.webComponentsReactProperties.withNavigationHighlight]);
};

var visibleColumns$1 = function visibleColumns(currentVisibleColumns, _ref3) {
  var webComponentsReactProperties = _ref3.instance.webComponentsReactProperties;

  if (!webComponentsReactProperties.withNavigationHighlight) {
    return currentVisibleColumns.filter(function (_ref4) {
      var id = _ref4.id;
      return id !== '__ui5wcr__internal_navigation_column';
    });
  }

  var highlightColumn = currentVisibleColumns.find(function (_ref5) {
    var id = _ref5.id;
    return id === '__ui5wcr__internal_navigation_column';
  });
  return [].concat(_toConsumableArray__default['default'](currentVisibleColumns.filter(function (_ref6) {
    var id = _ref6.id;
    return id !== '__ui5wcr__internal_navigation_column';
  })), [highlightColumn]);
};

var columns$2 = function columns(currentColumns, _ref7) {
  var instance = _ref7.instance;
  var withNavigationHighlight = instance.webComponentsReactProperties.withNavigationHighlight;

  if (!withNavigationHighlight) {
    return currentColumns;
  }

  return [].concat(_toConsumableArray__default['default'](currentColumns), [{
    id: '__ui5wcr__internal_navigation_column',
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    canReorder: false,
    width: 6,
    minWidth: 6,
    maxWidth: 6,
    Header: Header$1,
    Cell: Cell$2
  }]);
};

var useRowNavigationIndicators = function useRowNavigationIndicators(hooks) {
  hooks.columns.push(columns$2);
  hooks.columnsDeps.push(columnsDeps$2);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps$1);
  hooks.visibleColumns.push(visibleColumns$1);
};

var divStyle = {
  width: '100%',
  height: '100%',
  cursor: 'pointer'
};
var customCheckBoxStyling = {
  cursor: 'pointer',
  verticalAlign: 'middle'
};
/*
 * COMPONENTS
 */

var Header$2 = function Header(_ref) {
  var getToggleAllRowsSelectedProps = _ref.getToggleAllRowsSelectedProps,
      flatRows = _ref.flatRows,
      _ref$webComponentsRea = _ref.webComponentsReactProperties,
      onRowSelected = _ref$webComponentsRea.onRowSelected,
      selectionMode = _ref$webComponentsRea.selectionMode,
      toggleAllRowsSelected = _ref.toggleAllRowsSelected;
  var onChange = React.useCallback(function (e) {
    var allRowsSelected = e.target.checked;
    toggleAllRowsSelected(allRowsSelected);

    if (typeof onRowSelected === 'function') {
      onRowSelected( // cannot use instance.selectedFlatRows here as it only returns all rows on the first level
      Utils.enrichEventWithDetails(e, {
        allRowsSelected: allRowsSelected,
        selectedFlatRows: allRowsSelected ? flatRows : []
      }));
    }
  }, [toggleAllRowsSelected, flatRows]);

  if (selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
    return null;
  }

  return /*#__PURE__*/React__default['default'].createElement(CheckBox$1.CheckBox, _extends__default['default']({}, getToggleAllRowsSelectedProps(), {
    style: customCheckBoxStyling,
    onChange: onChange
  }));
};

var Cell$3 = function Cell(_ref2) {
  var row = _ref2.row,
      _ref2$webComponentsRe = _ref2.webComponentsReactProperties,
      selectionBehavior = _ref2$webComponentsRe.selectionBehavior,
      selectionMode = _ref2$webComponentsRe.selectionMode;
  var handleCellClick = React.useCallback(function (e) {
    if (TableSelectionBehavior.TableSelectionBehavior.ROW_SELECTOR === selectionBehavior) {
      row.getRowProps().onClick(e, true);
    }
  }, [selectionMode, row]);

  if (row.isGrouped && selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
    return null;
  }

  if (selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
    return /*#__PURE__*/React__default['default'].createElement("div", {
      style: divStyle,
      onClick: handleCellClick,
      "data-name": "internal_selection_column"
    });
  }

  return /*#__PURE__*/React__default['default'].createElement(CheckBox$1.CheckBox, _extends__default['default']({}, row.getToggleRowSelectedProps(), {
    onChange: handleCellClick,
    style: customCheckBoxStyling,
    "data-name": "internal_selection_column"
  }));
};
/*
 * TABLE HOOKS
 */


var columnDeps = function columnDeps(deps, _ref3) {
  var webComponentsReactProperties = _ref3.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray__default['default'](deps), [webComponentsReactProperties.selectionMode, webComponentsReactProperties.selectionBehavior]);
};

var visibleColumnsDeps$2 = function visibleColumnsDeps(deps, _ref4) {
  var instance = _ref4.instance;
  return [].concat(_toConsumableArray__default['default'](deps), [instance.webComponentsReactProperties.selectionMode, instance.webComponentsReactProperties.selectionBehavior]);
};

var visibleColumns$2 = function visibleColumns(currentVisibleColumns, _ref5) {
  var webComponentsReactProperties = _ref5.instance.webComponentsReactProperties;

  if (webComponentsReactProperties.selectionMode === TableSelectionMode.TableSelectionMode.NONE || webComponentsReactProperties.selectionBehavior === TableSelectionBehavior.TableSelectionBehavior.ROW_ONLY) {
    return currentVisibleColumns;
  }

  var selectionColumn = currentVisibleColumns.find(function (_ref6) {
    var id = _ref6.id;
    return id === '__ui5wcr__internal_selection_column';
  });
  return [selectionColumn].concat(_toConsumableArray__default['default'](currentVisibleColumns.filter(function (_ref7) {
    var id = _ref7.id;
    return id !== '__ui5wcr__internal_selection_column';
  })));
};

var columns$3 = function columns(currentColumns, _ref8) {
  var instance = _ref8.instance;
  var webComponentsReactProperties = instance.webComponentsReactProperties;
  var selectionMode = webComponentsReactProperties.selectionMode,
      selectionBehavior = webComponentsReactProperties.selectionBehavior,
      tableRef = webComponentsReactProperties.tableRef;

  if (selectionMode === TableSelectionMode.TableSelectionMode.NONE || selectionBehavior === TableSelectionBehavior.TableSelectionBehavior.ROW_ONLY) {
    return currentColumns;
  }

  var tableSelectionColumnWidth = tableRef.current && parseInt(getComputedStyle(tableRef.current).getPropertyValue("--".concat(CssSizeVariables.CssSizeVariablesNames.sapWcrAnalyticalTableSelectionColumnWidth)), 10);
  var selectionColumnWidth = !isNaN(tableSelectionColumnWidth) ? tableSelectionColumnWidth : 47;
  return [{
    id: '__ui5wcr__internal_selection_column',
    accessor: '__ui5wcr__internal_selection_column',
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    canReorder: false,
    width: selectionColumnWidth,
    minWidth: selectionColumnWidth,
    maxWidth: selectionColumnWidth,
    Header: Header$2,
    Cell: Cell$3
  }].concat(_toConsumableArray__default['default'](currentColumns));
};

var useRowSelectionColumn = function useRowSelectionColumn(hooks) {
  hooks.columns.push(columns$3);
  hooks.columnsDeps.push(columnDeps);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps$2);
  hooks.visibleColumns.push(visibleColumns$2);
};
useRowSelectionColumn.pluginName = 'useRowSelectionColumn';

var tagNamesWhichShouldNotSelectARow = new Set(['UI5-INPUT', 'UI5-LINK', 'UI5-BUTTON', 'UI5-CHECKBOX', 'UI5-COMBOBOX', 'UI5-MULTI-COMBOBOX', 'UI5-SELECT', 'UI5-RADIOBUTTON', 'UI5-SEGMENTEDBUTTON', 'UI5-SWITCH', 'UI5-TOGGLEBUTTON', 'UI5-DATE-PICKER', 'UI5-DATERANGE-PICKER', 'UI5-DATETIME-PICKER', 'UI5-DURATION-PICKER', 'UI5-TIME-PICKER', 'UI5-FILE-UPLOADER']);

var getRowProps = function getRowProps(rowProps, _ref) {
  var row = _ref.row,
      instance = _ref.instance;
  var webComponentsReactProperties = instance.webComponentsReactProperties,
      toggleRowSelected = instance.toggleRowSelected,
      selectedFlatRows = instance.selectedFlatRows;
  return [rowProps, {
    onClick: function onClick(e) {
      var _e$target, _e$target$dataset, _e$nativeEvent, _row$original, _e$target2, _e$target2$dataset;

      var selectionCellClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (((_e$target = e.target) === null || _e$target === void 0 ? void 0 : (_e$target$dataset = _e$target.dataset) === null || _e$target$dataset === void 0 ? void 0 : _e$target$dataset.name) !== 'internal_selection_column' && !(e.markerAllowTableRowSelection === true || ((_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 ? void 0 : _e$nativeEvent.markerAllowTableRowSelection) === true) && tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {
        return;
      } // dont select empty rows


      var isEmptyRow = (_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow;

      if (isEmptyRow) {
        return;
      } // dont select grouped rows


      if (row.isGrouped) {
        return;
      }

      var selectionBehavior = webComponentsReactProperties.selectionBehavior,
          selectionMode = webComponentsReactProperties.selectionMode,
          onRowSelected = webComponentsReactProperties.onRowSelected,
          onRowClick = webComponentsReactProperties.onRowClick;

      if (typeof onRowClick === 'function' && ((_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : (_e$target2$dataset = _e$target2.dataset) === null || _e$target2$dataset === void 0 ? void 0 : _e$target2$dataset.name) !== 'internal_selection_column') {
        onRowClick(Utils.enrichEventWithDetails(e, {
          row: row
        }));
      }

      if (webComponentsReactProperties.selectionMode === TableSelectionMode.TableSelectionMode.NONE) {
        return;
      } // dont continue if the row was clicked and selection mode is row selector only


      if (selectionBehavior === TableSelectionBehavior.TableSelectionBehavior.ROW_SELECTOR && !selectionCellClick) {
        return;
      }

      if (selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
        var _iterator = _createForOfIteratorHelper__default['default'](selectedFlatRows),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _row = _step.value;
            toggleRowSelected(_row.id, false);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      instance.toggleRowSelected(row.id); // fire event

      if (typeof onRowSelected === 'function') {
        var payload = {
          row: row,
          isSelected: !row.isSelected,
          selectedFlatRows: !row.isSelected ? [row.id] : []
        };

        if (selectionMode === TableSelectionMode.TableSelectionMode.MULTI_SELECT) {
          payload.selectedFlatRows = !row.isSelected ? [].concat(_toConsumableArray__default['default'](selectedFlatRows), [row]) : selectedFlatRows.filter(function (prevRow) {
            return prevRow.id !== row.id;
          });
        }

        onRowSelected(Utils.enrichEventWithDetails(e, payload));
      }
    }
  }];
};

var useSingleRowStateSelection = function useSingleRowStateSelection(hooks) {
  hooks.getRowProps.push(getRowProps);
};
useSingleRowStateSelection.pluginName = 'useSingleRowStateSelection';

var getHeaderGroupProps = function getHeaderGroupProps(headerGroupProps, _ref) {
  var instance = _ref.instance;
  var classes = instance.webComponentsReactProperties.classes;
  return [headerGroupProps, {
    className: classes.tableHeaderRow
  }];
};

var getHeaderProps = function getHeaderProps(columnProps, _ref2) {
  var instance = _ref2.instance,
      column = _ref2.column;
  var classes = instance.webComponentsReactProperties.classes;
  var style = {
    width: column.totalWidth
  };

  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_navigation_column') {
    style.padding = 0;
  }

  return [columnProps, {
    className: classes.th,
    column: column,
    style: style,
    id: column.id
  }];
};

var ROW_SELECTION_ATTRIBUTE = 'data-is-selected';

var getRowProps$1 = function getRowProps(rowProps, _ref3) {
  var _row$original;

  var instance = _ref3.instance,
      row = _ref3.row;
  var webComponentsReactProperties = instance.webComponentsReactProperties;
  var classes = webComponentsReactProperties.classes,
      selectionBehavior = webComponentsReactProperties.selectionBehavior,
      selectionMode = webComponentsReactProperties.selectionMode,
      alternateRowColor = webComponentsReactProperties.alternateRowColor;
  var isEmptyRow = (_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow;
  var className = classes.tr;
  var rowCanBeSelected = [TableSelectionMode.TableSelectionMode.SINGLE_SELECT, TableSelectionMode.TableSelectionMode.MULTI_SELECT].includes(selectionMode) && !isEmptyRow;

  if (row.isGrouped) {
    className += " ".concat(classes.tableGroupHeader);
  }

  if (alternateRowColor && row.index % 2 !== 0) {
    className += " ".concat(classes.alternateRowColor);
  }

  var newRowProps = {
    className: className,
    role: 'row',
    'aria-rowindex': row.index
  };

  if (rowCanBeSelected) {
    if (TableSelectionBehavior.TableSelectionBehavior.ROW_SELECTOR !== selectionBehavior) {
      newRowProps.className += " ".concat(classes.trActive);
    }

    if (row.isSelected) {
      newRowProps[ROW_SELECTION_ATTRIBUTE] = '';
    }
  }

  return [rowProps, newRowProps];
};

var getCellProps = function getCellProps(cellProps, _ref4) {
  var column = _ref4.cell.column,
      instance = _ref4.instance;
  var columnIndex = instance.visibleColumns.findIndex(function (_ref5) {
    var id = _ref5.id;
    return id === column.id;
  });
  var classes = instance.webComponentsReactProperties.classes;
  var style = {
    width: "".concat(column.totalWidth, "px")
  };

  switch (column.hAlign) {
    case TextAlign.TextAlign.Begin:
      style.justifyContent = 'flex-start';
      style.textAlign = 'start';
      break;

    case TextAlign.TextAlign.Center:
      style.justifyContent = 'center';
      style.textAlign = 'center';
      break;

    case TextAlign.TextAlign.End:
      style.justifyContent = 'flex-end';
      style.textAlign = 'end';
      break;

    case TextAlign.TextAlign.Left:
      style.justifyContent = 'left';
      style.textAlign = 'left';
      break;

    case TextAlign.TextAlign.Right:
      style.justifyContent = 'right';
      style.textAlign = 'right';
      break;
  }

  switch (column.vAlign) {
    case VerticalAlign.VerticalAlign.Bottom:
      style.alignItems = 'flex-end';
      break;

    case VerticalAlign.VerticalAlign.Middle:
      style.alignItems = 'center';
      break;

    case VerticalAlign.VerticalAlign.Top:
      style.alignItems = 'flex-start';
      break;
  }

  var className = classes.tableCell;

  if (column.className) {
    className += " ".concat(column.className);
  }

  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_navigation_column') {
    style.padding = 0;
  }

  return [cellProps, {
    className: className,
    style: style,
    tabIndex: -1,
    'aria-colindex': columnIndex + 1 // aria index is 1 based, not 0

  }];
};

var useStyling = function useStyling(hooks) {
  hooks.getHeaderGroupProps.push(getHeaderGroupProps);
  hooks.getHeaderProps.push(getHeaderProps);
  hooks.getRowProps.push(getRowProps$1);
  hooks.getCellProps.push(getCellProps);
};
useStyling.pluginName = 'useStyling';

var useTableScrollHandles = function useTableScrollHandles(ref) {
  var analyticalTableRef = useConsolidatedRef.useConsolidatedRef(ref);
  var reactWindowRef = React.useRef({});
  React.useEffect(function () {
    if (analyticalTableRef.current) {
      Object.assign(analyticalTableRef.current, {
        scrollTo: function scrollTo(offset, align) {
          var _reactWindowRef$curre;

          if (typeof ((_reactWindowRef$curre = reactWindowRef.current) === null || _reactWindowRef$curre === void 0 ? void 0 : _reactWindowRef$curre.scrollToOffset) === 'function') {
            reactWindowRef.current.scrollToOffset(offset, {
              align: align
            });
          }
        },
        scrollToItem: function scrollToItem(index, align) {
          var _reactWindowRef$curre2;

          if (typeof ((_reactWindowRef$curre2 = reactWindowRef.current) === null || _reactWindowRef$curre2 === void 0 ? void 0 : _reactWindowRef$curre2.scrollToIndex) === 'function') {
            reactWindowRef.current.scrollToIndex(index, {
              align: align
            });
          }
        },
        horizontalScrollTo: function horizontalScrollTo(offset, align) {
          var _reactWindowRef$curre3;

          if (typeof ((_reactWindowRef$curre3 = reactWindowRef.current) === null || _reactWindowRef$curre3 === void 0 ? void 0 : _reactWindowRef$curre3.horizontalScrollToOffset) === 'function') {
            reactWindowRef.current.horizontalScrollToOffset(offset, {
              align: align
            });
          }
        },
        horizontalScrollToItem: function horizontalScrollToItem(index, align) {
          var _reactWindowRef$curre4;

          if (typeof ((_reactWindowRef$curre4 = reactWindowRef.current) === null || _reactWindowRef$curre4 === void 0 ? void 0 : _reactWindowRef$curre4.horizontalScrollToIndex) === 'function') {
            reactWindowRef.current.horizontalScrollToIndex(index, {
              align: align
            });
          }
        }
      });
    }
  }, [analyticalTableRef.current, reactWindowRef.current.scrollToIndex, reactWindowRef.current.scrollToOffset, reactWindowRef.current.horizontalScrollToIndex, reactWindowRef.current.horizontalScrollToOffset]);
  return [analyticalTableRef, reactWindowRef];
};

var getToggleRowExpandedProps = function getToggleRowExpandedProps(rowProps, _ref) {
  var row = _ref.row,
      instance = _ref.instance;
  var _instance$webComponen = instance.webComponentsReactProperties,
      onRowExpandChange = _instance$webComponen.onRowExpandChange,
      isTreeTable = _instance$webComponen.isTreeTable,
      renderRowSubComponent = _instance$webComponen.renderRowSubComponent;
  var onClick = React.useCallback(function (e) {
    e.stopPropagation();
    e.persist();
    row.toggleRowExpanded();
    var column = null;

    if (!isTreeTable && !renderRowSubComponent) {
      column = row.cells.find(function (cell) {
        return cell.column.id === row.groupByID;
      }).column;
    }

    onRowExpandChange(Utils.enrichEventWithDetails(e, {
      row: row,
      column: column
    }));
  }, [row, isTreeTable, onRowExpandChange]);
  return [rowProps, {
    onClick: onClick
  }];
};

var useToggleRowExpand = function useToggleRowExpand(hooks) {
  hooks.getToggleRowExpandedProps.push(getToggleRowExpandedProps);
};
useToggleRowExpand.pluginName = 'useToggleRowExpand';

var getVisibleColumnsWidth = function getVisibleColumnsWidth(instance) {
  var visibleColumnsWidth = instance.visibleColumns.map(function (item) {
    return item.totalWidth;
  });
  Object.assign(instance, {
    visibleColumnsWidth: visibleColumnsWidth
  });
};

var useVisibleColumnsWidth = function useVisibleColumnsWidth(hooks) {
  hooks.useInstance.push(getVisibleColumnsWidth);
};
useVisibleColumnsWidth.pluginName = 'useVisibleColumnsWidth';

var styles$8 = {
  headerSection: {
    boxSizing: 'border-box',
    borderTop: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    borderRight: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    backgroundColor: ThemingParameters.ThemingParameters.sapList_HeaderBackground
  },
  scrollbar: {
    overflowY: 'auto',
    borderRight: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    boxSizing: 'border-box'
  },
  bottomSection: {
    flexGrow: 1,
    backgroundColor: ThemingParameters.ThemingParameters.sapList_HeaderBackground,
    boxSizing: 'border-box',
    borderRight: 'none',
    borderBottom: 'none'
  },
  bottomSectionWithScrollbar: {
    borderRight: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
  }
};
var useStyles$8 = reactJss.createUseStyles(styles$8, {
  name: 'VerticalScrollbar'
});
var VerticalScrollbar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _tableRef$current, _tableRef$current2;

  var internalRowHeight = props.internalRowHeight,
      tableRef = props.tableRef,
      minRows = props.minRows,
      rows = props.rows,
      handleVerticalScrollBarScroll = props.handleVerticalScrollBarScroll,
      popInRowHeight = props.popInRowHeight;
  var classes = useStyles$8();
  var hasHorizontalScrollbar = (tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.clientWidth) !== (tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current2 = tableRef.current) === null || _tableRef$current2 === void 0 ? void 0 : _tableRef$current2.scrollWidth);
  var horizontalScrollbarSectionStyles = StyleClassHelper.StyleClassHelper.of(classes.bottomSection);

  if (hasHorizontalScrollbar) {
    horizontalScrollbarSectionStyles.put(classes.bottomSectionWithScrollbar);
  }

  return /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Column,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    style: {
      height: "".concat(internalRowHeight, "px")
    },
    className: classes.headerSection
  }), /*#__PURE__*/React__default['default'].createElement("div", {
    ref: ref,
    style: {
      height: tableRef.current ? "".concat(tableRef.current.clientHeight - internalRowHeight, "px") : '0'
    },
    onScroll: handleVerticalScrollBarScroll,
    className: "".concat(GlobalStyleClasses.GlobalStyleClasses.sapScrollBar, " ").concat(classes.scrollbar)
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    style: {
      height: "".concat(Math.max(minRows, rows.length) * popInRowHeight, "px"),
      width: '1px'
    }
  })), /*#__PURE__*/React__default['default'].createElement("div", {
    className: horizontalScrollbarSectionStyles.valueOf()
  }));
});
VerticalScrollbar.displayName = 'VerticalScrollbar';

var VirtualTableBody = function VirtualTableBody(props) {
  var classes = props.classes,
      prepareRow = props.prepareRow,
      rows = props.rows,
      minRows = props.minRows,
      reactWindowRef = props.reactWindowRef,
      isTreeTable = props.isTreeTable,
      internalRowHeight = props.internalRowHeight,
      visibleRows = props.visibleRows,
      overscanCount = props.overscanCount,
      visibleColumns = props.visibleColumns,
      tableRef = props.tableRef,
      visibleColumnsWidth = props.visibleColumnsWidth,
      parentRef = props.parentRef,
      overscanCountHorizontal = props.overscanCountHorizontal,
      renderRowSubComponent = props.renderRowSubComponent,
      popInRowHeight = props.popInRowHeight,
      markNavigatedRow = props.markNavigatedRow,
      isRtl = props.isRtl;
  var rowSubComponentsHeight = React.useRef({});
  var itemCount = Math.max(minRows, rows.length);
  var overscan = overscanCount ? overscanCount : Math.floor(visibleRows / 2);
  var consolidatedParentRef = useConsolidatedRef.useConsolidatedRef(parentRef);
  var rowHeight = popInRowHeight !== internalRowHeight ? popInRowHeight : internalRowHeight;
  var rowVirtualizer = reactVirtual.useVirtual({
    size: itemCount,
    parentRef: consolidatedParentRef,
    estimateSize: React__default['default'].useCallback(function (index) {
      if (renderRowSubComponent && rows[index].isExpanded && rowSubComponentsHeight.current.hasOwnProperty(index)) {
        var _rowSubComponentsHeig, _rowSubComponentsHeig2;

        return rowHeight + ((_rowSubComponentsHeig = (_rowSubComponentsHeig2 = rowSubComponentsHeight.current) === null || _rowSubComponentsHeig2 === void 0 ? void 0 : _rowSubComponentsHeig2[index]) !== null && _rowSubComponentsHeig !== void 0 ? _rowSubComponentsHeig : 0);
      }

      return rowHeight;
    }, [rowHeight, rows, renderRowSubComponent]),
    overscan: overscan
  });
  var columnVirtualizer = reactVirtual.useVirtual({
    size: visibleColumns.length,
    parentRef: tableRef,
    estimateSize: React.useCallback(function (index) {
      return visibleColumnsWidth[index];
    }, [visibleColumnsWidth]),
    horizontal: true,
    overscan: overscanCountHorizontal
  });
  reactWindowRef.current = _objectSpread__default['default'](_objectSpread__default['default']({}, reactWindowRef.current), {}, {
    scrollToOffset: rowVirtualizer.scrollToOffset,
    scrollToIndex: rowVirtualizer.scrollToIndex
  });
  var currentlyFocusedCell = React.useRef(null);
  var onTableFocus = React.useCallback(function (e) {
    var firstCell = e.target.querySelector('div[role="row"]:first-child div[role="cell"]:first-child');

    if (firstCell) {
      firstCell.tabIndex = 0;
      firstCell.focus();
      currentlyFocusedCell.current = firstCell;
    }
  }, [currentlyFocusedCell]);
  var onKeyboardNavigation = React.useCallback(function (e) {
    if (currentlyFocusedCell.current) {
      switch (e.key) {
        case 'ArrowRight':
          {
            var newElement = currentlyFocusedCell.current.nextElementSibling;

            if (newElement) {
              currentlyFocusedCell.current.tabIndex = -1;
              newElement.tabIndex = 0;
              newElement.focus();
              currentlyFocusedCell.current = newElement;
            }

            break;
          }

        case 'ArrowLeft':
          {
            var _newElement = currentlyFocusedCell.current.previousElementSibling;

            if (_newElement) {
              currentlyFocusedCell.current.tabIndex = -1;
              _newElement.tabIndex = 0;

              _newElement.focus();

              currentlyFocusedCell.current = _newElement;
            }

            break;
          }

        case 'ArrowDown':
          {
            var nextRow = currentlyFocusedCell.current.parentElement.nextElementSibling;

            if (nextRow) {
              currentlyFocusedCell.current.tabIndex = -1;
              var currentColumnIndex = currentlyFocusedCell.current.getAttribute('aria-colindex');

              var _newElement2 = nextRow.querySelector("div[aria-colindex=\"".concat(currentColumnIndex, "\"]"));

              _newElement2.tabIndex = 0;

              _newElement2.focus();

              currentlyFocusedCell.current = _newElement2;
            }

            break;
          }

        case 'ArrowUp':
          {
            var previousRow = currentlyFocusedCell.current.parentElement.previousElementSibling;

            if (previousRow) {
              currentlyFocusedCell.current.tabIndex = -1;

              var _currentColumnIndex = currentlyFocusedCell.current.getAttribute('aria-colindex');

              var _newElement3 = previousRow.querySelector("div[aria-colindex=\"".concat(_currentColumnIndex, "\"]"));

              _newElement3.tabIndex = 0;

              _newElement3.focus();

              currentlyFocusedCell.current = _newElement3;
            }

            break;
          }
      }
    }
  }, [currentlyFocusedCell]);
  var popInColumn = React.useMemo(function () {
    return visibleColumns.filter(function (item) {
      return item.id !== '__ui5wcr__internal_highlight_column' && item.id !== '__ui5wcr__internal_selection_column' && item.id !== '__ui5wcr__internal_navigation_column';
    })[0];
  }, [visibleColumns]);
  return /*#__PURE__*/React__default['default'].createElement("div", {
    tabIndex: 0,
    onFocus: onTableFocus,
    onKeyDown: onKeyboardNavigation,
    style: {
      position: 'relative',
      height: "".concat(rowVirtualizer.totalSize, "px"),
      width: "".concat(columnVirtualizer.totalSize, "px")
    }
  }, rowVirtualizer.virtualItems.map(function (virtualRow) {
    var row = rows[virtualRow.index];

    var setSubcomponentsRefs = function setSubcomponentsRefs(el) {
      if (el !== null && el !== void 0 && el.offsetHeight) {
        rowSubComponentsHeight.current[virtualRow.index] = el.offsetHeight;
      }
    };

    if (!row) {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        key: "empty_row_".concat(virtualRow.index),
        className: classes.tr,
        style: {
          height: "".concat(virtualRow.size, "px"),
          transform: "translateY(".concat(virtualRow.start, "px)")
        }
      });
    }

    prepareRow(row);
    var rowProps = row.getRowProps();
    var isNavigatedCell = markNavigatedRow(row);
    var RowSubComponent = typeof renderRowSubComponent === 'function' ? renderRowSubComponent(row) : null;
    return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({}, rowProps, {
      style: {
        height: "".concat(rowHeight, "px"),
        transform: "translateY(".concat(virtualRow.start, "px)"),
        position: 'absolute'
      }
    }), RowSubComponent && row.isExpanded && /*#__PURE__*/React__default['default'].createElement("div", {
      ref: setSubcomponentsRefs,
      style: {
        transform: "translateY(".concat(rowHeight, "px)"),
        position: 'absolute',
        width: '100%'
      }
    }, RowSubComponent), columnVirtualizer.virtualItems.map(function (virtualColumn, index) {
      var _row$original;

      var cell = row.cells[virtualColumn.index];
      var directionStyles = isRtl ? {
        transform: "translateX(-".concat(virtualColumn.start, "px)"),
        right: 0
      } : {
        transform: "translateX(".concat(virtualColumn.start, "px)"),
        left: 0
      };

      if (!cell) {
        return null;
      }

      var cellProps = cell.getCellProps();

      if ((_row$original = row.original) !== null && _row$original !== void 0 && _row$original.emptyRow) {
        return /*#__PURE__*/React__default['default'].createElement("div", cellProps);
      }

      var contentToRender;

      if (cell.column.id === '__ui5wcr__internal_highlight_column' || cell.column.id === '__ui5wcr__internal_selection_column' || cell.column.id === '__ui5wcr__internal_navigation_column') {
        contentToRender = 'Cell';
      } else if (isTreeTable || RowSubComponent) {
        contentToRender = 'Expandable';
      } else if (cell.isGrouped) {
        contentToRender = 'Grouped';
      } else if (cell.isAggregated) {
        contentToRender = 'Aggregated';
      } else if (cell.isPlaceholder) {
        contentToRender = 'RepeatedValue';
      } else {
        contentToRender = 'Cell';
      }

      return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({}, cellProps, {
        style: _objectSpread__default['default'](_objectSpread__default['default']({}, cellProps.style), {}, {
          position: 'absolute',
          width: "".concat(virtualColumn.size, "px"),
          top: 0
        }, directionStyles)
      }), popInRowHeight !== internalRowHeight && popInColumn.id === cell.column.id ? cell.render('PopIn', {
        contentToRender: contentToRender,
        internalRowHeight: internalRowHeight
      }) : cell.render(contentToRender, isNavigatedCell === true ? {
        isNavigatedCell: isNavigatedCell
      } : {}));
    }));
  }));
};

var VirtualTableBodyContainer = function VirtualTableBodyContainer(props) {
  var tableBodyHeight = props.tableBodyHeight,
      totalColumnsWidth = props.totalColumnsWidth,
      children = props.children,
      parentRef = props.parentRef,
      classes = props.classes,
      infiniteScroll = props.infiniteScroll,
      infiniteScrollThreshold = props.infiniteScrollThreshold,
      onLoadMore = props.onLoadMore,
      rows = props.rows,
      internalRowHeight = props.internalRowHeight,
      handleExternalScroll = props.handleExternalScroll,
      visibleRows = props.visibleRows,
      popInRowHeight = props.popInRowHeight;

  var _useState = React.useState(false),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      isMounted = _useState2[0],
      setIsMounted = _useState2[1];

  React.useEffect(function () {
    if (parentRef.current) {
      setIsMounted(true);
    }
  }, [parentRef.current]);
  var classNames = StyleClassHelper.StyleClassHelper.of(classes.tbody).className;
  var lastScrollTop = React.useRef(0);
  var firedInfiniteLoadEvents = React.useRef(new Set());
  var onScroll = React.useCallback(function (event) {
    handleExternalScroll();
    var scrollOffset = event.target.scrollTop;
    var isScrollingDown = lastScrollTop.current < scrollOffset;

    if (isScrollingDown && infiniteScroll) {
      lastScrollTop.current = scrollOffset;
      var currentLastRow = Math.floor(scrollOffset / popInRowHeight) + (popInRowHeight === internalRowHeight ? visibleRows : Math.floor(tableBodyHeight / popInRowHeight));

      if (rows.length - currentLastRow < infiniteScrollThreshold) {
        if (!firedInfiniteLoadEvents.current.has(rows.length)) {
          onLoadMore({
            detail: {
              rowCount: rows.length
            }
          });
        }

        firedInfiniteLoadEvents.current.add(rows.length);
      }
    }
  }, [infiniteScroll, infiniteScrollThreshold, onLoadMore, rows.length, internalRowHeight, firedInfiniteLoadEvents, lastScrollTop, handleExternalScroll, popInRowHeight, tableBodyHeight]);
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: classNames,
    ref: parentRef,
    onScroll: onScroll,
    style: {
      position: 'relative',
      overflowY: 'auto',
      height: "".concat(tableBodyHeight, "px"),
      width: "".concat(totalColumnsWidth, "px")
    }
  }, isMounted && children);
};

var stateReducer = function stateReducer(newState, action) {
  var payload = action.payload;

  if (newState.isRtl && action.type === reactTable.actions.columnResizing) {
    var clientX = action.clientX;
    var _newState$columnResiz = newState.columnResizing,
        startX = _newState$columnResiz.startX,
        columnWidth = _newState$columnResiz.columnWidth,
        headerIdWidths = _newState$columnResiz.headerIdWidths;
    var deltaX = startX - clientX;
    var percentageDeltaX = deltaX / columnWidth;
    var newColumnWidths = {};
    headerIdWidths.forEach(function (_ref) {
      var _ref2 = _slicedToArray__default['default'](_ref, 2),
          headerId = _ref2[0],
          headerWidth = _ref2[1];

      newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);
    });
    return _objectSpread__default['default'](_objectSpread__default['default']({}, newState), {}, {
      columnResizing: _objectSpread__default['default'](_objectSpread__default['default']({}, newState.columnResizing), {}, {
        columnWidths: _objectSpread__default['default'](_objectSpread__default['default']({}, newState.columnResizing.columnWidths), newColumnWidths)
      })
    });
  }

  switch (action.type) {
    case 'TABLE_RESIZE':
      return _objectSpread__default['default'](_objectSpread__default['default']({}, newState), {}, {
        tableClientWidth: payload.tableClientWidth
      });

    case 'VISIBLE_ROWS':
      return _objectSpread__default['default'](_objectSpread__default['default']({}, newState), {}, {
        visibleRows: payload.visibleRows
      });

    case 'TABLE_SCROLLING_ENABLED':
      return _objectSpread__default['default'](_objectSpread__default['default']({}, newState), {}, {
        isScrollable: payload.isScrollable
      });

    case 'SET_SELECTED_ROW_IDS':
      return _objectSpread__default['default'](_objectSpread__default['default']({}, newState), {}, {
        selectedRowIds: payload.selectedRowIds
      });

    case 'SET_POPIN_COLUMNS':
      return _objectSpread__default['default'](_objectSpread__default['default']({}, newState), {}, {
        popInColumns: payload
      });

    case 'INTERACTIVE_ROWS_HAVE_POPIN':
      return _objectSpread__default['default'](_objectSpread__default['default']({}, newState), {}, {
        interactiveRowsHavePopIn: payload
      });

    case 'IS_RTL':
      return _objectSpread__default['default'](_objectSpread__default['default']({}, newState), {}, {
        isRtl: payload.isRtl
      });

    default:
      return newState;
  }
};

var styles$9 = {
  minHeight: '1.5rem',
  display: 'flex',
  alignItems: 'center'
};
var TitleBar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children;
  return /*#__PURE__*/React__default['default'].createElement("div", {
    style: styles$9,
    ref: ref
  }, typeof children === 'string' && /*#__PURE__*/React__default['default'].createElement(Title$1.Title, null, children), /*#__PURE__*/React.isValidElement(children) && children);
});

var orderByFn = function orderByFn(rows, functions, directions) {
  var wrapSortFn = function wrapSortFn(sortFn, index) {
    var desc = directions[index] === false || directions[index] === 'desc';
    return function (rowA, rowB) {
      var _rowA$original, _rowB$original, _rowA$original2, _rowB$original2, _rowA$original3, _rowB$original3;

      if ((_rowA$original = rowA.original) !== null && _rowA$original !== void 0 && _rowA$original.emptyRow && !((_rowB$original = rowB.original) !== null && _rowB$original !== void 0 && _rowB$original.emptyRow)) {
        return desc ? -1 : 1;
      }

      if (!((_rowA$original2 = rowA.original) !== null && _rowA$original2 !== void 0 && _rowA$original2.emptyRow) && (_rowB$original2 = rowB.original) !== null && _rowB$original2 !== void 0 && _rowB$original2.emptyRow) {
        return desc ? 1 : -1;
      }

      if ((_rowA$original3 = rowA.original) !== null && _rowA$original3 !== void 0 && _rowA$original3.emptyRow && (_rowB$original3 = rowB.original) !== null && _rowB$original3 !== void 0 && _rowB$original3.emptyRow) {
        return 0;
      }

      return sortFn(rowA, rowB);
    };
  };

  var wrappedSortfunctions = functions.map(wrapSortFn);
  return reactTable.defaultOrderByFn(rows, wrappedSortfunctions, directions);
}; // copied from https://github.com/tannerlinsley/react-table/blob/f97fb98509d0b27cc0bebcf3137872afe4f2809e/src/utils.js#L320-L347 (13. Jan 2021)

var reOpenBracket = /\[/g;
var reCloseBracket = /\]/g;

function makePathArray(obj) {
  return flattenDeep(obj) // remove all periods in parts
  .map(function (d) {
    return String(d).replace('.', '_');
  }) // join parts using period
  .join('.') // replace brackets with periods
  .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods
  .split('.');
}

function flattenDeep(arr) {
  var newArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!Array.isArray(arr)) {
    newArr.push(arr);
  } else {
    for (var i = 0; i < arr.length; i += 1) {
      flattenDeep(arr[i], newArr);
    }
  }

  return newArr;
} // copied from https://github.com/tannerlinsley/react-table/blob/master/src/utils.js#L169-L191 (13.Jan 2021)


var pathObjCache = new Map();
function getBy(obj, path, def) {
  if (!path) {
    return obj;
  }

  var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);

  var pathObj = pathObjCache.get(cacheKey) || function () {
    var pathObj = makePathArray(path);
    pathObjCache.set(cacheKey, pathObj);
    return pathObj;
  }();

  var val;

  try {
    val = pathObj.reduce(function (cursor, pathPart) {
      return cursor[pathPart];
    }, obj);
  } catch (e) {// continue regardless of error
  }

  return typeof val !== 'undefined' ? val : def;
}

var verticalResizerStyles = {
  container: {
    overflow: 'hidden',
    position: 'relative',
    height: '5px',
    textAlign: 'center',
    cursor: 'row-resize',
    boxSizing: 'border-box',
    '&:hover': {
      backgroundColor: ThemingParameters.ThemingParameters.sapContent_DragAndDropActiveColor,
      color: ThemingParameters.ThemingParameters.sapHighlightTextColor
    },
    '&:before': {
      fontSize: '10px',
      fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
      top: 0,
      position: 'absolute',
      content: "\"\u2981\u2981\u2981\u2981\"",
      lineHeight: '5px',
      pointerEvents: 'none'
    }
  },
  resizer: {
    position: 'absolute',
    opacity: 0.5,
    backgroundColor: ThemingParameters.ThemingParameters.sapContent_DragAndDropActiveColor,
    height: '5px'
  }
};
var useStyles$9 = reactJss.createUseStyles(verticalResizerStyles, {
  name: 'VerticalResizer'
});

var isTouchEvent = function isTouchEvent(e, touchEvent) {
  if (e.type === touchEvent) {
    return !(e.touches && e.touches.length > 1);
  }

  return false;
};

var VerticalResizer = function VerticalResizer(props) {
  var _analyticalTableRef$c, _verticalResizerRef$c7, _verticalResizerRef$c8;

  var analyticalTableRef = props.analyticalTableRef,
      dispatch = props.dispatch,
      extensionsHeight = props.extensionsHeight,
      internalRowHeight = props.internalRowHeight,
      hasPopInColumns = props.hasPopInColumns,
      popInRowHeight = props.popInRowHeight;
  var classes = useStyles$9();
  var startY = React.useRef(null);
  var verticalResizerRef = React.useRef(null);

  var _useState = React.useState(undefined),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      resizerPosition = _useState2[0],
      setResizerPosition = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray__default['default'](_useState3, 2),
      isDragging = _useState4[0],
      setIsDragging = _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = _slicedToArray__default['default'](_useState5, 2),
      mountTouchEvents = _useState6[0],
      setMountTouchEvents = _useState6[1];

  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  var handleResizeStart = React.useCallback(function (e) {
    e.preventDefault();
    var touchEvent = isTouchEvent(e, 'touchstart');
    startY.current = touchEvent ? Math.round(e.touches[0].pageY) : e.pageY;
    setMountTouchEvents(touchEvent);
    setIsDragging(true);
  }, [startY.current, setIsDragging]);
  var handleMove = React.useCallback(function (e) {
    setResizerPosition(function (prev) {
      return _objectSpread__default['default'](_objectSpread__default['default']({}, prev), {}, {
        top: isTouchEvent(e, 'touchmove') ? Math.round(e.touches[0].pageY) : e.pageY
      });
    });
  }, [setResizerPosition]);
  var handleResizeEnd = React.useCallback(function (e) {
    setIsDragging(false);
    var rowCount = Math.floor((analyticalTableRef.current.clientHeight + (isTouchEvent(e, 'touchend') ? Math.round(e.changedTouches[0].pageY) : e.pageY) - startY.current - extensionsHeight - 5) /
    /*resizer height*/
    popInRowHeight);

    if (hasPopInColumns) {
      dispatch({
        type: 'INTERACTIVE_ROWS_HAVE_POPIN',
        payload: true
      });
    }

    dispatch({
      type: 'VISIBLE_ROWS',
      payload: {
        visibleRows: rowCount
      }
    });
  }, [(_analyticalTableRef$c = analyticalTableRef.current) === null || _analyticalTableRef$c === void 0 ? void 0 : _analyticalTableRef$c.clientHeight, startY.current, extensionsHeight, internalRowHeight, dispatch]);
  React.useEffect(function () {
    var removeEventListeners = function removeEventListeners() {
      if (mountTouchEvents) {
        document.removeEventListener('touchmove', handleMove);
        document.removeEventListener('touchend', handleResizeEnd);
      } else {
        document.removeEventListener('mouseup', handleResizeEnd);
        document.removeEventListener('mousemove', handleMove);
      }
    };

    if (isDragging) {
      if (mountTouchEvents) {
        document.addEventListener('touchmove', handleMove);
        document.addEventListener('touchend', handleResizeEnd);
      } else {
        document.addEventListener('mousemove', handleMove);
        document.addEventListener('mouseup', handleResizeEnd);
      }
    } else {
      removeEventListeners();
    }

    return function () {
      removeEventListeners();
    };
  }, [isDragging]);
  React.useEffect(function () {
    var _verticalResizerRef$c, _verticalResizerRef$c2, _verticalResizerRef$c3, _verticalResizerRef$c4, _verticalResizerRef$c5, _verticalResizerRef$c6;

    var resizerPosTop = ((_verticalResizerRef$c = verticalResizerRef.current) === null || _verticalResizerRef$c === void 0 ? void 0 : (_verticalResizerRef$c2 = _verticalResizerRef$c.getBoundingClientRect()) === null || _verticalResizerRef$c2 === void 0 ? void 0 : _verticalResizerRef$c2.top) + window.scrollY;
    var resizerPosLeft = ((_verticalResizerRef$c3 = verticalResizerRef.current) === null || _verticalResizerRef$c3 === void 0 ? void 0 : (_verticalResizerRef$c4 = _verticalResizerRef$c3.getBoundingClientRect()) === null || _verticalResizerRef$c4 === void 0 ? void 0 : _verticalResizerRef$c4.left) + window.scrollX;
    var resizerPosWidth = (_verticalResizerRef$c5 = verticalResizerRef.current) === null || _verticalResizerRef$c5 === void 0 ? void 0 : (_verticalResizerRef$c6 = _verticalResizerRef$c5.getBoundingClientRect()) === null || _verticalResizerRef$c6 === void 0 ? void 0 : _verticalResizerRef$c6.width;

    if (!isDragging && resizerPosTop > 0) {
      setResizerPosition({
        left: resizerPosLeft,
        top: resizerPosTop,
        width: resizerPosWidth
      });
    }
  }, [(_verticalResizerRef$c7 = verticalResizerRef.current) === null || _verticalResizerRef$c7 === void 0 ? void 0 : (_verticalResizerRef$c8 = _verticalResizerRef$c7.getBoundingClientRect()) === null || _verticalResizerRef$c8 === void 0 ? void 0 : _verticalResizerRef$c8.top, isDragging]);
  React.useEffect(function () {
    return function () {
      dispatch({
        type: 'WITH_POPIN',
        payload: false
      });
    };
  }, []);
  return /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.container,
    ref: verticalResizerRef,
    onMouseDown: handleResizeStart,
    onTouchStart: handleResizeStart,
    role: "separator",
    title: i18nBundle.getText(i18nDefaults.DRAG_TO_RESIZE)
  }, resizerPosition && isDragging && /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.resizer,
    style: {
      top: resizerPosition.top,
      left: resizerPosition.left,
      width: resizerPosition.width
    }
  }), document.body));
};

var useStyles$a = reactJss.createUseStyles(styles$3, {
  name: 'AnalyticalTable'
});
/**
 * The `AnalyticalTable` provides a set of convenient functions for responsive table design, including virtualization of rows and columns, infinite scrolling and customizable columns that will, unless otherwise defined, distribute the available space equally among themselves.
 * It also provides several possibilities for working with the data, including sorting, filtering, grouping and aggregation.
 */

var AnalyticalTable = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _titleBarRef$current$, _titleBarRef$current, _extensionRef$current, _extensionRef$current2, _headerRef$current$of, _headerRef$current, _tableRef$current, _tableState$popInColu, _tableState$visibleRo, _analyticalTableRef$c5, _analyticalTableRef$c6, _tableState$popInColu3, _props$data, _props$data2, _props$data3, _props$data4, _tableState$popInColu4;

  var columns = props.columns,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      title = props.title,
      loading = props.loading,
      groupBy = props.groupBy,
      selectionMode = props.selectionMode,
      selectionBehavior = props.selectionBehavior,
      onRowSelected = props.onRowSelected,
      onRowClick = props.onRowClick,
      onSort = props.onSort,
      reactTableOptions = props.reactTableOptions,
      tableHooks = props.tableHooks,
      subRowsKey = props.subRowsKey,
      onGroup = props.onGroup,
      rowHeight = props.rowHeight,
      selectedRowIds = props.selectedRowIds,
      LoadingComponent = props.LoadingComponent,
      onRowExpandChange = props.onRowExpandChange,
      noDataText = props.noDataText,
      NoDataComponent = props.NoDataComponent,
      visibleRows = props.visibleRows,
      visibleRowCountMode = props.visibleRowCountMode,
      minRows = props.minRows,
      isTreeTable = props.isTreeTable,
      alternateRowColor = props.alternateRowColor,
      overscanCount = props.overscanCount,
      overscanCountHorizontal = props.overscanCountHorizontal,
      scaleWidthMode = props.scaleWidthMode,
      withRowHighlight = props.withRowHighlight,
      highlightField = props.highlightField,
      withNavigationHighlight = props.withNavigationHighlight,
      markNavigatedRow = props.markNavigatedRow,
      groupable = props.groupable,
      sortable = props.sortable,
      filterable = props.filterable,
      infiniteScroll = props.infiniteScroll,
      infiniteScrollThreshold = props.infiniteScrollThreshold,
      onLoadMore = props.onLoadMore,
      extension = props.extension,
      columnOrder = props.columnOrder,
      renderRowSubComponent = props.renderRowSubComponent;
  var classes = useStyles$a();

  var _useTableScrollHandle = useTableScrollHandles(ref),
      _useTableScrollHandle2 = _slicedToArray__default['default'](_useTableScrollHandle, 2),
      analyticalTableRef = _useTableScrollHandle2[0],
      reactWindowRef = _useTableScrollHandle2[1];

  var tableRef = React.useRef();
  var isRtl = hooks.useIsRTL(analyticalTableRef);
  var getSubRows = React.useCallback(function (row) {
    return row[subRowsKey] || [];
  }, [subRowsKey]);
  var data = React.useMemo(function () {
    if (minRows > props.data.length) {
      var missingRows = minRows - props.data.length;
      var emptyRows = Array.from({
        length: missingRows
      }, function (v, i) {
        return i;
      }).map(function () {
        return {
          emptyRow: true
        };
      });
      return [].concat(_toConsumableArray__default['default'](props.data), _toConsumableArray__default['default'](emptyRows));
    }

    return props.data;
  }, [props.data, minRows]);

  var _useTable = reactTable.useTable.apply(void 0, [_objectSpread__default['default']({
    columns: columns,
    data: data,
    defaultColumn: DefaultColumn,
    orderByFn: orderByFn,
    getSubRows: getSubRows,
    stateReducer: stateReducer,
    disableFilters: !filterable,
    disableSortBy: !sortable,
    disableGroupBy: isTreeTable || renderRowSubComponent ? true : !groupable,
    selectSubRows: false,
    webComponentsReactProperties: {
      tableRef: tableRef,
      selectionMode: selectionMode,
      selectionBehavior: selectionBehavior,
      classes: classes,
      onRowSelected: onRowSelected,
      onRowClick: onRowClick,
      onRowExpandChange: onRowExpandChange,
      isTreeTable: isTreeTable,
      alternateRowColor: alternateRowColor,
      scaleWidthMode: scaleWidthMode,
      loading: loading,
      withRowHighlight: withRowHighlight,
      highlightField: highlightField,
      withNavigationHighlight: withNavigationHighlight,
      markNavigatedRow: markNavigatedRow,
      renderRowSubComponent: renderRowSubComponent
    }
  }, reactTableOptions), reactTable.useFilters, reactTable.useColumnOrder, reactTable.useGroupBy, reactTable.useSortBy, reactTable.useExpanded, reactTable.useRowSelect, reactTable.useResizeColumns, useRowSelectionColumn, useSingleRowStateSelection, useRowHighlight, useRowNavigationIndicators, useDynamicColumnWidths, useStyling, useToggleRowExpand, usePopIn, useVisibleColumnsWidth].concat(_toConsumableArray__default['default'](tableHooks))),
      getTableProps = _useTable.getTableProps,
      headerGroups = _useTable.headerGroups,
      rows = _useTable.rows,
      prepareRow = _useTable.prepareRow,
      tableState = _useTable.state,
      tableInternalColumns = _useTable.columns,
      setColumnOrder = _useTable.setColumnOrder,
      dispatch = _useTable.dispatch,
      totalColumnsWidth = _useTable.totalColumnsWidth,
      visibleColumns = _useTable.visibleColumns,
      visibleColumnsWidth = _useTable.visibleColumnsWidth,
      setGroupBy = _useTable.setGroupBy;

  var titleBarRef = React.useRef(null);
  var extensionRef = React.useRef(null);
  var headerRef = React.useRef(null);
  var extensionsHeight = ((_titleBarRef$current$ = (_titleBarRef$current = titleBarRef.current) === null || _titleBarRef$current === void 0 ? void 0 : _titleBarRef$current.offsetHeight) !== null && _titleBarRef$current$ !== void 0 ? _titleBarRef$current$ : 0) + ((_extensionRef$current = (_extensionRef$current2 = extensionRef.current) === null || _extensionRef$current2 === void 0 ? void 0 : _extensionRef$current2.offsetHeight) !== null && _extensionRef$current !== void 0 ? _extensionRef$current : 0) + ((_headerRef$current$of = (_headerRef$current = headerRef.current) === null || _headerRef$current === void 0 ? void 0 : _headerRef$current.offsetHeight) !== null && _headerRef$current$of !== void 0 ? _headerRef$current$of : 0);
  var calcRowHeight = parseInt(getComputedStyle((_tableRef$current = tableRef.current) !== null && _tableRef$current !== void 0 ? _tableRef$current : document.body).getPropertyValue('--sapWcrAnalyticalTableRowHeight') || '44');
  var internalRowHeight = rowHeight !== null && rowHeight !== void 0 ? rowHeight : calcRowHeight;
  var popInRowHeight = (tableState === null || tableState === void 0 ? void 0 : (_tableState$popInColu = tableState.popInColumns) === null || _tableState$popInColu === void 0 ? void 0 : _tableState$popInColu.length) > 0 ? internalRowHeight + tableState.popInColumns.length * (internalRowHeight + 16) : internalRowHeight;
  var internalVisibleRowCount = (_tableState$visibleRo = tableState.visibleRows) !== null && _tableState$visibleRo !== void 0 ? _tableState$visibleRo : visibleRows;
  var updateTableClientWidth = React.useCallback(function () {
    if (tableRef.current) {
      dispatch({
        type: 'TABLE_RESIZE',
        payload: {
          tableClientWidth: tableRef.current.clientWidth
        }
      });
    }
  }, [tableRef.current]);
  var updateRowsCount = React.useCallback(function () {
    var _analyticalTableRef$c;

    if (visibleRowCountMode === TableVisibleRowCountMode.TableVisibleRowCountMode.AUTO && (_analyticalTableRef$c = analyticalTableRef.current) !== null && _analyticalTableRef$c !== void 0 && _analyticalTableRef$c.parentElement) {
      var _analyticalTableRef$c2, _analyticalTableRef$c3, _analyticalTableRef$c4;

      var rowCount = Math.floor((((_analyticalTableRef$c2 = (_analyticalTableRef$c3 = analyticalTableRef.current) === null || _analyticalTableRef$c3 === void 0 ? void 0 : (_analyticalTableRef$c4 = _analyticalTableRef$c3.parentElement) === null || _analyticalTableRef$c4 === void 0 ? void 0 : _analyticalTableRef$c4.clientHeight) !== null && _analyticalTableRef$c2 !== void 0 ? _analyticalTableRef$c2 : 0) - extensionsHeight) / popInRowHeight);
      dispatch({
        type: 'VISIBLE_ROWS',
        payload: {
          visibleRows: rowCount
        }
      });
    }
  }, [(_analyticalTableRef$c5 = analyticalTableRef.current) === null || _analyticalTableRef$c5 === void 0 ? void 0 : (_analyticalTableRef$c6 = _analyticalTableRef$c5.parentElement) === null || _analyticalTableRef$c6 === void 0 ? void 0 : _analyticalTableRef$c6.clientHeight, extensionsHeight, popInRowHeight, visibleRowCountMode]);
  React.useEffect(function () {
    var _analyticalTableRef$c7;

    var tableWidthObserver = new ResizeObserver(debounce__default['default'](updateTableClientWidth, 500));
    tableWidthObserver.observe(tableRef.current);
    var parentHeightObserver = new ResizeObserver(debounce__default['default'](updateRowsCount, 500));
    parentHeightObserver.observe((_analyticalTableRef$c7 = analyticalTableRef.current) === null || _analyticalTableRef$c7 === void 0 ? void 0 : _analyticalTableRef$c7.parentElement);
    return function () {
      tableWidthObserver.disconnect();
      parentHeightObserver.disconnect();
    };
  }, [updateTableClientWidth, updateRowsCount]);
  hooks.useIsomorphicLayoutEffect(function () {
    dispatch({
      type: 'IS_RTL',
      payload: {
        isRtl: isRtl
      }
    });
  }, [isRtl]);
  hooks.useIsomorphicLayoutEffect(function () {
    updateTableClientWidth();
  }, [updateTableClientWidth]);
  hooks.useIsomorphicLayoutEffect(function () {
    updateRowsCount();
  }, [updateRowsCount]);
  React.useEffect(function () {
    if (tableState.visibleRows !== undefined && visibleRowCountMode === TableVisibleRowCountMode.TableVisibleRowCountMode.FIXED) {
      dispatch({
        type: 'VISIBLE_ROWS',
        payload: {
          visibleRows: undefined
        }
      });
    }
  }, [visibleRowCountMode, tableState.visibleRows]);
  React.useEffect(function () {
    setGroupBy(groupBy);
  }, [groupBy, setGroupBy]);
  React.useEffect(function () {
    dispatch({
      type: 'SET_SELECTED_ROW_IDS',
      payload: {
        selectedRowIds: selectedRowIds
      }
    });
  }, [selectedRowIds]);
  React.useEffect(function () {
    var _tableState$popInColu2;

    if (tableState !== null && tableState !== void 0 && tableState.interactiveRowsHavePopIn && (!(tableState !== null && tableState !== void 0 && tableState.popInColumns) || (tableState === null || tableState === void 0 ? void 0 : (_tableState$popInColu2 = tableState.popInColumns) === null || _tableState$popInColu2 === void 0 ? void 0 : _tableState$popInColu2.length) === 0)) {
      dispatch({
        type: 'WITH_POPIN',
        payload: false
      });
    }
  }, [tableState === null || tableState === void 0 ? void 0 : tableState.interactiveRowsHavePopIn, tableState === null || tableState === void 0 ? void 0 : (_tableState$popInColu3 = tableState.popInColumns) === null || _tableState$popInColu3 === void 0 ? void 0 : _tableState$popInColu3.length]);
  var tableBodyHeight = React.useMemo(function () {
    var rowNum = rows.length < internalVisibleRowCount ? Math.max(rows.length, minRows) : internalVisibleRowCount;
    var rowHeight = visibleRowCountMode === TableVisibleRowCountMode.TableVisibleRowCountMode.AUTO || tableState !== null && tableState !== void 0 && tableState.interactiveRowsHavePopIn ? popInRowHeight : internalRowHeight;
    return rowHeight * rowNum;
  }, [internalRowHeight, rows.length, internalVisibleRowCount, minRows, popInRowHeight, visibleRowCountMode, tableState === null || tableState === void 0 ? void 0 : tableState.interactiveRowsHavePopIn]); // scroll bar detection

  React.useEffect(function () {
    var visibleRowCount = rows.length < internalVisibleRowCount ? Math.max(rows.length, minRows) : internalVisibleRowCount;

    if (popInRowHeight !== internalRowHeight) {
      dispatch({
        type: 'TABLE_SCROLLING_ENABLED',
        payload: {
          isScrollable: visibleRowCount * popInRowHeight > tableBodyHeight || rows.length > visibleRowCount
        }
      });
    } else {
      dispatch({
        type: 'TABLE_SCROLLING_ENABLED',
        payload: {
          isScrollable: rows.length > visibleRowCount
        }
      });
    }
  }, [rows.length, minRows, internalVisibleRowCount, popInRowHeight, tableBodyHeight]);
  var noDataStyles = React.useMemo(function () {
    return {
      height: "".concat(tableBodyHeight, "px"),
      width: "".concat(totalColumnsWidth, "px")
    };
  }, [tableBodyHeight, totalColumnsWidth]);
  var onGroupByChanged = React.useCallback(function (e) {
    var _e$detail = e.detail,
        column = _e$detail.column,
        isGrouped = _e$detail.isGrouped;
    var groupedColumns = [];

    if (isGrouped) {
      groupedColumns = [].concat(_toConsumableArray__default['default'](tableState.groupBy), [column.id]);
    } else {
      groupedColumns = tableState.groupBy.filter(function (group) {
        return group !== column.id;
      });
    }

    setGroupBy(groupedColumns);
    onGroup(Utils.enrichEventWithDetails(e, {
      column: column,
      groupedColumns: groupedColumns
    }));
  }, [tableState.groupBy, onGroup, setGroupBy]);
  React.useEffect(function () {
    if ((columnOrder === null || columnOrder === void 0 ? void 0 : columnOrder.length) > 0) {
      setColumnOrder(columnOrder);
    }
  }, [columnOrder]);

  var _useDragAndDrop = useDragAndDrop(props, isRtl, setColumnOrder, tableState.columnOrder, tableState.columnResizing, tableInternalColumns),
      _useDragAndDrop2 = _slicedToArray__default['default'](_useDragAndDrop, 6),
      dragOver = _useDragAndDrop2[0],
      handleDragEnter = _useDragAndDrop2[1],
      handleDragStart = _useDragAndDrop2[2],
      handleDragOver = _useDragAndDrop2[3],
      handleOnDrop = _useDragAndDrop2[4],
      handleOnDragEnd = _useDragAndDrop2[5];

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onSort', 'onGroup', 'onRowSelected', 'onRowClick', 'onRowExpandChange', 'onColumnsReordered', 'onLoadMore']);
  var inlineStyle = React.useMemo(function () {
    var tableStyles = {
      maxWidth: '100%',
      overflowX: 'auto',
      display: 'flex',
      flexDirection: 'column'
    };

    if (!!rowHeight) {
      tableStyles['--sapWcrAnalyticalTableRowHeight'] = "".concat(rowHeight, "px");
    }

    if (tableState.tableClientWidth > 0) {
      var _styles = _objectSpread__default['default'](_objectSpread__default['default']({}, tableStyles), style);

      if (totalColumnsWidth < tableState.tableClientWidth) {
        return _objectSpread__default['default'](_objectSpread__default['default']({}, _styles), {}, {
          borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
        });
      }

      return _styles;
    }

    return _objectSpread__default['default'](_objectSpread__default['default'](_objectSpread__default['default']({}, tableStyles), style), {}, {
      visibility: 'hidden'
    });
  }, [tableState.tableClientWidth, style, rowHeight, totalColumnsWidth]);
  var parentRef = React.useRef(null);
  var verticalScrollBarRef = React.useRef(null);

  var handleBodyScroll = function handleBodyScroll() {
    if (verticalScrollBarRef.current && verticalScrollBarRef.current.scrollTop !== parentRef.current.scrollTop) {
      if (!parentRef.current.isExternalVerticalScroll) {
        verticalScrollBarRef.current.scrollTop = parentRef.current.scrollTop;
        verticalScrollBarRef.current.isExternalVerticalScroll = true;
      }

      parentRef.current.isExternalVerticalScroll = false;
    }
  };

  var handleVerticalScrollBarScroll = function handleVerticalScrollBarScroll() {
    if (!verticalScrollBarRef.current.isExternalVerticalScroll) {
      parentRef.current.scrollTop = verticalScrollBarRef.current.scrollTop;
      parentRef.current.isExternalVerticalScroll = true;
    }

    verticalScrollBarRef.current.isExternalVerticalScroll = false;
  };

  var tableClasses = StyleClassHelper.StyleClassHelper.of(classes.table, GlobalStyleClasses.GlobalStyleClasses.sapScrollBar);

  if (withNavigationHighlight) {
    tableClasses.put(classes.hasNavigationIndicator);
  }

  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    className: className,
    style: inlineStyle,
    title: tooltip,
    ref: analyticalTableRef
  }, passThroughProps), title && /*#__PURE__*/React__default['default'].createElement(TitleBar, {
    ref: titleBarRef
  }, title), extension && /*#__PURE__*/React__default['default'].createElement("div", {
    ref: extensionRef
  }, extension), /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, null, /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({}, getTableProps(), {
    role: "grid",
    "aria-rowcount": rows.length,
    "aria-colcount": tableInternalColumns.length,
    "data-per-page": internalVisibleRowCount,
    ref: tableRef,
    className: tableClasses.className
  }), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.tableHeaderBackgroundElement
  }), headerGroups.map(function (headerGroup) {
    var headerProps = {};

    if (headerGroup.getHeaderGroupProps) {
      headerProps = headerGroup.getHeaderGroupProps();
    }

    return tableRef.current && /*#__PURE__*/React__default['default'].createElement(ColumnHeaderContainer, {
      ref: headerRef,
      key: headerProps.key,
      reactWindowRef: reactWindowRef,
      tableRef: tableRef,
      resizeInfo: tableState.columnResizing,
      visibleColumnsWidth: visibleColumnsWidth,
      headerProps: headerProps,
      headerGroup: headerGroup,
      overscanCountHorizontal: overscanCountHorizontal,
      onSort: onSort,
      onGroupByChanged: onGroupByChanged,
      onDragStart: handleDragStart,
      onDragOver: handleDragOver,
      onDrop: handleOnDrop,
      onDragEnter: handleDragEnter,
      onDragEnd: handleOnDragEnd,
      dragOver: dragOver,
      isRtl: isRtl
    });
  }), loading && ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length) > 0 && /*#__PURE__*/React__default['default'].createElement(LoadingComponent, {
    style: {
      width: "".concat(totalColumnsWidth, "px")
    }
  }), loading && ((_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.length) === 0 && /*#__PURE__*/React__default['default'].createElement(TablePlaceholder, {
    isRtl: isRtl,
    columns: tableInternalColumns.filter(function (col) {
      var _col$isVisible;

      return ((_col$isVisible = col.isVisible) !== null && _col$isVisible !== void 0 ? _col$isVisible : true) && !tableState.hiddenColumns.includes(col.accessor);
    }),
    rows: props.minRows,
    style: noDataStyles,
    rowHeight: internalRowHeight,
    tableWidth: totalColumnsWidth
  }), !loading && ((_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : _props$data3.length) === 0 && /*#__PURE__*/React__default['default'].createElement(NoDataComponent, {
    noDataText: noDataText,
    className: classes.noDataContainer,
    style: noDataStyles
  }), ((_props$data4 = props.data) === null || _props$data4 === void 0 ? void 0 : _props$data4.length) > 0 && tableRef.current && /*#__PURE__*/React__default['default'].createElement(VirtualTableBodyContainer, {
    tableBodyHeight: tableBodyHeight,
    totalColumnsWidth: totalColumnsWidth,
    parentRef: parentRef,
    classes: classes,
    infiniteScroll: infiniteScroll,
    infiniteScrollThreshold: infiniteScrollThreshold,
    onLoadMore: onLoadMore,
    internalRowHeight: internalRowHeight,
    popInRowHeight: popInRowHeight,
    rows: rows,
    handleExternalScroll: handleBodyScroll,
    visibleRows: internalVisibleRowCount
  }, /*#__PURE__*/React__default['default'].createElement(VirtualTableBody, {
    classes: classes,
    prepareRow: prepareRow,
    rows: rows,
    minRows: minRows,
    reactWindowRef: reactWindowRef,
    isTreeTable: isTreeTable,
    internalRowHeight: internalRowHeight,
    popInRowHeight: popInRowHeight,
    visibleRows: internalVisibleRowCount,
    alternateRowColor: alternateRowColor,
    overscanCount: overscanCount,
    tableRef: tableRef,
    parentRef: parentRef,
    visibleColumns: visibleColumns,
    visibleColumnsWidth: visibleColumnsWidth,
    overscanCountHorizontal: overscanCountHorizontal,
    renderRowSubComponent: renderRowSubComponent,
    markNavigatedRow: markNavigatedRow,
    isRtl: isRtl
  }))), (tableState.isScrollable === undefined || tableState.isScrollable) && /*#__PURE__*/React__default['default'].createElement(VerticalScrollbar, {
    internalRowHeight: internalRowHeight,
    popInRowHeight: popInRowHeight,
    tableRef: tableRef,
    minRows: minRows,
    rows: rows,
    handleVerticalScrollBarScroll: handleVerticalScrollBarScroll,
    ref: verticalScrollBarRef
  })), visibleRowCountMode === TableVisibleRowCountMode.TableVisibleRowCountMode.INTERACTIVE && /*#__PURE__*/React__default['default'].createElement(VerticalResizer, {
    popInRowHeight: popInRowHeight,
    hasPopInColumns: (tableState === null || tableState === void 0 ? void 0 : (_tableState$popInColu4 = tableState.popInColumns) === null || _tableState$popInColu4 === void 0 ? void 0 : _tableState$popInColu4.length) > 0,
    analyticalTableRef: analyticalTableRef,
    dispatch: dispatch,
    extensionsHeight: extensionsHeight,
    internalRowHeight: internalRowHeight
  }));
});
AnalyticalTable.displayName = 'AnalyticalTable';
AnalyticalTable.defaultProps = {
  infiniteScrollThreshold: 20,
  loading: false,
  sortable: true,
  filterable: false,
  groupable: false,
  selectionMode: TableSelectionMode.TableSelectionMode.NONE,
  selectionBehavior: TableSelectionBehavior.TableSelectionBehavior.ROW,
  scaleWidthMode: TableScaleWidthMode.TableScaleWidthMode.Default,
  data: [],
  columns: [],
  title: null,
  minRows: 5,
  groupBy: [],
  NoDataComponent: DefaultNoDataComponent,
  LoadingComponent: DefaultLoadingComponent,
  noDataText: 'No Data',
  reactTableOptions: {},
  tableHooks: [],
  visibleRows: 15,
  subRowsKey: 'subRows',
  highlightField: 'status',
  markNavigatedRow: function markNavigatedRow() {
    return false;
  },
  selectedRowIds: {},
  onGroup: function onGroup() {},
  onRowExpandChange: function onRowExpandChange() {},
  onColumnsReordered: function onColumnsReordered() {},
  isTreeTable: false,
  alternateRowColor: false,
  overscanCountHorizontal: 5,
  visibleRowCountMode: TableVisibleRowCountMode.TableVisibleRowCountMode.FIXED
};

var customCheckBoxStyling$1 = {
  verticalAlign: 'middle'
};

var columns$4 = function columns(_columns) {
  return _columns.map(function (column) {
    if (column.id === '__ui5wcr__internal_selection_column') {
      return _objectSpread__default['default'](_objectSpread__default['default']({}, column), {}, {
        Cell: function Cell(instance) {
          var webComponentsReactProperties = instance.webComponentsReactProperties,
              row = instance.row;

          if (row.disableSelect === true) {
            if (row.isGrouped && webComponentsReactProperties.selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
              return null;
            }

            if (webComponentsReactProperties.selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
              return /*#__PURE__*/React__default['default'].createElement("div", {
                onClick: undefined,
                "data-name": "internal_selection_column"
              });
            }

            return /*#__PURE__*/React__default['default'].createElement(CheckBox$1.CheckBox, _extends__default['default']({}, row.getToggleRowSelectedProps(), {
              disabled: true,
              style: customCheckBoxStyling$1,
              "data-name": "internal_selection_column"
            }));
          }

          return column.Cell(instance);
        },
        Header: function Header() {
          return null;
        }
      });
    }

    return column;
  });
};
/**
 * A plugin hook for disabling row selection of specific rows.
 * __Note:__ The "Select All" checkbox is not available with this hook.
 *
 * @param disableRowSelection - Can be either a `string` or a `function`. `string:` Defines the key in the dataset for disabling rows. If the value of the key is `true`, then the row will not be selectable. `function:` Programmatically disable rows for selection. The function receives the current row as parameter.
 */


var useRowDisableSelection = function useRowDisableSelection(disableRowSelection) {
  var disableRowAccessor = typeof disableRowSelection === 'function' ? disableRowSelection : function (d) {
    return getBy(d.original, disableRowSelection, undefined);
  };

  var getRowProps = function getRowProps(rowProps, _ref) {
    var row = _ref.row,
        instance = _ref.instance;
    var webComponentsReactProperties = instance.webComponentsReactProperties;

    if (disableRowAccessor(row) === true) {
      row.disableSelect = true;
      return _objectSpread__default['default'](_objectSpread__default['default']({}, rowProps), {}, {
        onClick: undefined,
        className: webComponentsReactProperties.classes.tr
      });
    }

    return rowProps;
  };

  var columnDeps = function columnDeps(deps) {
    return [].concat(_toConsumableArray__default['default'](deps), [disableRowSelection]);
  };

  var useDisableSelectionRow = function useDisableSelectionRow(hooks) {
    hooks.getRowProps.push(getRowProps);
    hooks.columns.push(columns$4);
    hooks.columnsDeps.push(columnDeps);
  };

  useDisableSelectionRow.pluginName = 'useRowDisableSelection';
  return useDisableSelectionRow;
};

var AnalyticalTableHooks = /*#__PURE__*/Object.freeze({
  __proto__: null,
  useRowDisableSelection: useRowDisableSelection
});

(function (AnalyticalTableScrollMode) {
  AnalyticalTableScrollMode["auto"] = "auto";
  AnalyticalTableScrollMode["center"] = "center";
  AnalyticalTableScrollMode["end"] = "end";
  AnalyticalTableScrollMode["start"] = "start";
})(exports.AnalyticalTableScrollMode || (exports.AnalyticalTableScrollMode = {}));

/**
 * An image-like control that has different display options for representing images and icons in different shapes and sizes, depending on the use case. The shape can be circular or square. There are several predefined sizes, as well as an option to set a custom size.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Avatar" target="_blank">UI5 Web Components Playground</a>
 */
var Avatar = withWebComponent$1.withWebComponent('ui5-avatar', ['accessibleName', 'backgroundColor', 'icon', 'image', 'imageFitType', 'initials', 'shape', 'size'], ['interactive'], [], []);
Avatar.displayName = 'Avatar';
Avatar.defaultProps = {
  // backgroundColor: AvatarBackgroundColor.Accent6, // needs to be removed for avatar group
  imageFitType: AvatarFitType.AvatarFitType.Cover,
  interactive: false,
  shape: AvatarShape.AvatarShape.Circle // size: AvatarSize.S // needs to be removed for avatar group

};

(function (AvatarBackgroundColor) {
  AvatarBackgroundColor["Accent1"] = "Accent1";
  AvatarBackgroundColor["Accent2"] = "Accent2";
  AvatarBackgroundColor["Accent3"] = "Accent3";
  AvatarBackgroundColor["Accent4"] = "Accent4";
  AvatarBackgroundColor["Accent5"] = "Accent5";
  AvatarBackgroundColor["Accent6"] = "Accent6";
  AvatarBackgroundColor["Accent7"] = "Accent7";
  AvatarBackgroundColor["Accent8"] = "Accent8";
  AvatarBackgroundColor["Accent9"] = "Accent9";
  AvatarBackgroundColor["Accent10"] = "Accent10";
  AvatarBackgroundColor["Placeholder"] = "Placeholder";
})(exports.AvatarBackgroundColor || (exports.AvatarBackgroundColor = {}));

(function (AvatarFitType) {
  AvatarFitType["Cover"] = "Cover";
  AvatarFitType["Contain"] = "Contain";
})(exports.AvatarFitType || (exports.AvatarFitType = {}));

/**
 * Displays a group of avatars arranged horizontally. It is useful to visually showcase a group of related avatars, such as, project team members or employees. The component allows you to display the avatars in different sizes, depending on your use case. The `AvatarGroup` component has two group types:
 *
 * *   `Group` type: The avatars are displayed as partially overlapped on top of each other and the entire group has one click/tap area.
 * *   `Individual` type: The avatars are displayed side-by-side and each avatar has its own click/tap area.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/AvatarGroup" target="_blank">UI5 Web Components Playground</a>
 */
var AvatarGroup = withWebComponent$1.withWebComponent('ui5-avatar-group', ['avatarSize', 'type'], [], [], ['click']);
AvatarGroup.displayName = 'AvatarGroup';
AvatarGroup.defaultProps = {
  avatarSize: AvatarSize.AvatarSize.S,
  type: AvatarGroupType.AvatarGroupType.Group
};

(function (AvatarGroupType) {
  AvatarGroupType["Group"] = "Group";
  AvatarGroupType["Individual"] = "Individual";
})(exports.AvatarGroupType || (exports.AvatarGroupType = {}));

(function (AvatarShape) {
  AvatarShape["Circle"] = "Circle";
  AvatarShape["Square"] = "Square";
})(exports.AvatarShape || (exports.AvatarShape = {}));

(function (AvatarSize) {
  AvatarSize["XS"] = "XS";
  AvatarSize["S"] = "S";
  AvatarSize["M"] = "M";
  AvatarSize["L"] = "L";
  AvatarSize["XL"] = "XL";
})(exports.AvatarSize || (exports.AvatarSize = {}));

/**
 * The `Badge` is a small non-interactive component which contains text information and color chosen from a list of predefined color schemes. It serves the purpose to attract the user attention to some piece of information (state, quantity, condition, etc.).
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Badge" target="_blank">UI5 Web Components Playground</a>
 */
var Badge = withWebComponent$1.withWebComponent('ui5-badge', ['colorScheme'], [], ['icon'], []);
Badge.displayName = 'Badge';
Badge.defaultProps = {
  colorScheme: '1'
};

/**
 * The Bar component consists of three areas to hold its content. It has the capability to center content, such as a title, while having other components on the left and right side.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Bar" target="_blank">UI5 Web Components Playground</a>
 */
var Bar = withWebComponent$1.withWebComponent('ui5-bar', ['design'], [], ['endContent', 'middleContent', 'startContent'], []);
Bar.displayName = 'Bar';
Bar.defaultProps = {
  design: BarDesign.BarDesign.Header
};

(function (BarDesign) {
  BarDesign["Header"] = "Header";
  BarDesign["Subheader"] = "Subheader";
  BarDesign["Footer"] = "Footer";
  BarDesign["FloatingFooter"] = "FloatingFooter";
})(exports.BarDesign || (exports.BarDesign = {}));

var SeparatorStyles = {
  BackSlash: '\\',
  DoubleBackSlash: '\\\\',
  DoubleGreaterThan: '>>',
  DoubleSlash: '//',
  GreaterThan: '>',
  Slash: '/'
};
var separatorInlineStyles = {
  margin: '0 0.25rem'
};

/**
 * Enables users to navigate between items by providing a list of links to previous steps in the user's navigation path.
 */
var Breadcrumbs = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      separatorStyle = props.separatorStyle,
      currentLocationText = props.currentLocationText,
      tooltip = props.tooltip,
      style = props.style,
      className = props.className,
      slot = props.slot;
  var childrenArray = React.Children.toArray(children).filter(Boolean);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    title: tooltip,
    style: style,
    className: className,
    slot: slot
  }, passThroughProps), childrenArray.map(function (item, index) {
    if (index === childrenArray.length - 1) {
      return item;
    }

    return /*#__PURE__*/React__default['default'].createElement(React.Fragment, {
      key: index
    }, item, /*#__PURE__*/React__default['default'].createElement(Label$1.Label, {
      style: separatorInlineStyles,
      children: SeparatorStyles[separatorStyle]
    }));
  }), currentLocationText && /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(Label$1.Label, {
    style: separatorInlineStyles
  }, SeparatorStyles[separatorStyle]), /*#__PURE__*/React__default['default'].createElement(Label$1.Label, null, currentLocationText)));
});
Breadcrumbs.displayName = 'Breadcrumbs';
Breadcrumbs.defaultProps = {
  separatorStyle: BreadcrumbsSeparatorStyle.BreadcrumbsSeparatorStyle.Slash
};

(function (BreadcrumbsSeparatorStyle) {
  BreadcrumbsSeparatorStyle["BackSlash"] = "BackSlash";
  BreadcrumbsSeparatorStyle["DoubleBackSlash"] = "DoubleBackSlash";
  BreadcrumbsSeparatorStyle["DoubleGreaterThan"] = "DoubleGreaterThan";
  BreadcrumbsSeparatorStyle["DoubleSlash"] = "DoubleSlash";
  BreadcrumbsSeparatorStyle["GreaterThan"] = "GreaterThan";
  BreadcrumbsSeparatorStyle["Slash"] = "Slash";
})(exports.BreadcrumbsSeparatorStyle || (exports.BreadcrumbsSeparatorStyle = {}));

/**
 * The `BusyIndicator` signals that some operation is going on and that the user must wait. It does not block the current UI screen so other operations could be triggered in parallel.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/BusyIndicator" target="_blank">UI5 Web Components Playground</a>
 */
var BusyIndicator = withWebComponent$1.withWebComponent('ui5-busyindicator', ['size', 'text'], ['active'], [], []);
BusyIndicator.displayName = 'BusyIndicator';
BusyIndicator.defaultProps = {
  active: false,
  size: BusyIndicatorSize.BusyIndicatorSize.Medium
};

(function (BusyIndicatorSize) {
  BusyIndicatorSize["Small"] = "Small";
  BusyIndicatorSize["Medium"] = "Medium";
  BusyIndicatorSize["Large"] = "Large";
})(exports.BusyIndicatorSize || (exports.BusyIndicatorSize = {}));

/**
 * The `Button` component represents a simple push button. It enables users to trigger actions by clicking or tapping the `Button`, or by pressing certain keyboard keys, such as Enter.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Button" target="_blank">UI5 Web Components Playground</a>
 */
var Button = withWebComponent$1.withWebComponent('ui5-button', ['design', 'icon', 'iconSize'], ['disabled', 'iconEnd', 'submits'], [], ['click']);
Button.displayName = 'Button';
Button.defaultProps = {
  design: ButtonDesign.ButtonDesign.Default,
  disabled: false,
  iconEnd: false,
  iconSize: undefined,
  submits: false
};

(function (ButtonDesign) {
  ButtonDesign["Default"] = "Default";
  ButtonDesign["Positive"] = "Positive";
  ButtonDesign["Negative"] = "Negative";
  ButtonDesign["Transparent"] = "Transparent";
  ButtonDesign["Emphasized"] = "Emphasized";
})(exports.ButtonDesign || (exports.ButtonDesign = {}));

/**
 * The `Calendar` can be used stand alone to display the years, months, weeks and days
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Calendar" target="_blank">UI5 Web Components Playground</a>
 */
var Calendar = withWebComponent$1.withWebComponent('ui5-calendar', ['primaryCalendarType', 'formatPattern', 'maxDate', 'minDate', 'selection', 'selectedDates', 'timestamp'], ['hideWeekNumbers'], [], ['selected-dates-change']);
Calendar.displayName = 'Calendar';
Calendar.defaultProps = {
  hideWeekNumbers: false,
  selection: CalendarSelection.CalendarSelection.Single,
  primaryCalendarType: CalendarType.CalendarType.Gregorian
};

(function (CalendarSelection) {
  CalendarSelection["Single"] = "Single";
  CalendarSelection["Multiple"] = "Multiple";
  CalendarSelection["Range"] = "Range";
})(exports.CalendarSelection || (exports.CalendarSelection = {}));

// introduced because of web components

(function (CalendarType) {
  CalendarType["Gregorian"] = "Gregorian";
  CalendarType["Islamic"] = "Islamic";
  CalendarType["Japanese"] = "Japanese";
  CalendarType["Buddhist"] = "Buddhist";
  CalendarType["Persian"] = "Persian";
})(exports.CalendarType || (exports.CalendarType = {}));

/**
 * The `Card` is a component that represents information in the form of a tile with separate header and content areas. The content area of a `Card` can be arbitrary HTML content. The header can be used through several properties, such as: `heading`, `subheading`, `status` and two slots: `avatar` and `action`.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Card" target="_blank">UI5 Web Components Playground</a>
 */
var Card = withWebComponent$1.withWebComponent('ui5-card', ['heading', 'status', 'subheading'], ['headerInteractive'], ['action', 'avatar'], ['header-click']);
Card.displayName = 'Card';
Card.defaultProps = {
  headerInteractive: false
};

/**
 * The carousel allows the user to browse through a set of items by swiping right or left. The component is mostly used for showing a gallery of images, but can hold any other HTML element.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Carousel" target="_blank">UI5 Web Components Playground</a>
 */
var Carousel = withWebComponent$1.withWebComponent('ui5-carousel', ['arrowsPlacement', 'infiniteScrollOffset', 'itemsPerPageL', 'itemsPerPageM', 'itemsPerPageS', 'selectedIndex'], ['cyclic', 'hideNavigation'], [], ['load-more', 'navigate']);
Carousel.displayName = 'Carousel';
Carousel.defaultProps = {
  arrowsPlacement: CarouselArrowsPlacement.CarouselArrowsPlacement.Content,
  cyclic: false,
  hideNavigation: false,
  infiniteScrollOffset: 1,
  itemsPerPageL: 1,
  itemsPerPageM: 1,
  itemsPerPageS: 1,
  selectedIndex: 0
};

(function (CarouselArrowsPlacement) {
  CarouselArrowsPlacement["Navigation"] = "Navigation";
  CarouselArrowsPlacement["Content"] = "Content";
})(exports.CarouselArrowsPlacement || (exports.CarouselArrowsPlacement = {}));

/**
 * Allows the user to set a binary value, such as true/false or yes/no for an item.
 *
 * The `CheckBox` component consists of a box and a label that describes its purpose. If it's checked, an indicator is displayed inside the box. To check/uncheck the `CheckBox`, the user has to click or tap the square box or its label.
 *
 * The `CheckBox` component only has 2 states - checked and unchecked. Clicking or tapping toggles the `CheckBox` between checked and unchecked state.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/CheckBox" target="_blank">UI5 Web Components Playground</a>
 */
var CheckBox = withWebComponent$1.withWebComponent('ui5-checkbox', ['name', 'text', 'valueState'], ['checked', 'disabled', 'readonly', 'wrap'], [], ['change']);
CheckBox.displayName = 'CheckBox';
CheckBox.defaultProps = {
  checked: false,
  disabled: false,
  readonly: false,
  valueState: ValueState.ValueState.None,
  wrap: false
};

/**
 * The `ComboBox` component represents a drop-down menu with a list of the available options and a text input field to narrow down the options. It is commonly used to enable users to select one or more options from a predefined list.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ComboBox" target="_blank">UI5 Web Components Playground</a>
 */
var ComboBox = withWebComponent$1.withWebComponent('ui5-combobox', ['filter', 'filterValue', 'placeholder', 'value', 'valueState'], ['disabled', 'loading', 'readonly', 'required'], ['icon', 'valueStateMessage'], ['change', 'input']);
ComboBox.displayName = 'ComboBox';
ComboBox.defaultProps = {
  disabled: false,
  filter: 'StartsWithPerTerm',
  loading: false,
  readonly: false,
  required: false,
  valueState: ValueState.ValueState.None
};

/**
 * The `ComboBoxItem` represents the item for a `ComboBox`
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ComboBoxItem" target="_blank">UI5 Web Components Playground</a>
 */
var ComboBoxItem = withWebComponent$1.withWebComponent('ui5-cb-item', ['additionalText', 'text'], [], [], []);
ComboBoxItem.displayName = 'ComboBoxItem';
ComboBoxItem.defaultProps = {};

(function (ContentDensity) {
  ContentDensity["Cozy"] = "Cozy";
  ContentDensity["Compact"] = "Compact";
})(exports.ContentDensity || (exports.ContentDensity = {}));

/**
 * A component to be used as custom list item within the `List` the same way as the standard `StandardListItem`. The `CustomListItem` accepts arbitrary HTML content to allow full customization
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/CustomListItem" target="_blank">UI5 Web Components Playground</a>
 */
var CustomListItem = withWebComponent$1.withWebComponent('ui5-li-custom', ['type'], ['selected'], [], ['detail-click']);
CustomListItem.displayName = 'CustomListItem';
CustomListItem.defaultProps = {
  type: ListItemTypes.ListItemTypes.Active,
  selected: false
};

/**
 * The `DatePicker` component provides an input field with assigned calendar which opens on user action. The `DatePicker` allows users to select a localized date using touch, mouse, or keyboard input. It consists of two parts: the date input field and the date picker.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/DatePicker" target="_blank">UI5 Web Components Playground</a>
 */
var DatePicker = withWebComponent$1.withWebComponent('ui5-date-picker', ['formatPattern', 'maxDate', 'minDate', 'name', 'placeholder', 'primaryCalendarType', 'value', 'valueState'], ['disabled', 'hideWeekNumbers', 'readonly', 'required'], ['valueStateMessage'], ['change', 'input']);
DatePicker.displayName = 'DatePicker';
DatePicker.defaultProps = {
  disabled: false,
  hideWeekNumbers: false,
  placeholder: undefined,
  primaryCalendarType: CalendarType.CalendarType.Gregorian,
  readonly: false,
  required: false,
  valueState: ValueState.ValueState.None
};

/**
 * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/DateRangePicker" target="_blank">UI5 Web Components Playground</a>
 */
var DateRangePicker = withWebComponent$1.withWebComponent('ui5-daterange-picker', ['delimiter', 'formatPattern', 'maxDate', 'minDate', 'name', 'placeholder', 'primaryCalendarType', 'value', 'valueState'], ['disabled', 'hideWeekNumbers', 'readonly', 'required'], ['valueStateMessage'], ['change', 'input']);
DateRangePicker.displayName = 'DateRangePicker';
DateRangePicker.defaultProps = {
  delimiter: '-',
  disabled: false,
  hideWeekNumbers: false,
  placeholder: undefined,
  primaryCalendarType: CalendarType.CalendarType.Gregorian,
  readonly: false,
  required: false,
  valueState: ValueState.ValueState.None
};

/**
 * The `DateTimePicker` component alows users to select both date (day, month and year) and time (hours, minutes and seconds) and for the purpose it consists of input field and Date/Time picker.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/DateTimePicker" target="_blank">UI5 Web Components Playground</a>
 */
var DateTimePicker = withWebComponent$1.withWebComponent('ui5-datetime-picker', ['formatPattern', 'maxDate', 'minDate', 'name', 'placeholder', 'primaryCalendarType', 'value', 'valueState'], ['disabled', 'hideWeekNumbers', 'readonly', 'required'], ['valueStateMessage'], ['change', 'input']);
DateTimePicker.displayName = 'DateTimePicker';
DateTimePicker.defaultProps = {
  disabled: false,
  hideWeekNumbers: false,
  placeholder: undefined,
  primaryCalendarType: CalendarType.CalendarType.Gregorian,
  readonly: false,
  required: false,
  valueState: ValueState.ValueState.None
};

(function (DeviationIndicator) {
  DeviationIndicator["Down"] = "Down";
  DeviationIndicator["Up"] = "Up";
  DeviationIndicator["None"] = "None";
})(exports.DeviationIndicator || (exports.DeviationIndicator = {}));

/**
 * The `Dialog` component is used to temporarily display some information in a size-limited window in front of the regular app screen. It is used to prompt the user for an action or a confirmation. The `Dialog` interrupts the current app processing as it is the only focused UI element and the main screen is dimmed/blocked. The dialog combines concepts known from other technologies where the windows have names such as dialog box, dialog window, pop-up, pop-up window, alert box, or message box.
 *
 * The `Dialog` is modal, which means that user action is required before returning to the parent window is possible. The content of the `Dialog` is fully customizable.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Dialog" target="_blank">UI5 Web Components Playground</a>
 */
var Dialog = withWebComponent$1.withWebComponent('ui5-dialog', ['headerText', 'initialFocus'], ['draggable', 'resizable', 'stretch', 'preventFocusRestore'], ['footer', 'header'], ['after-close', 'after-open', 'before-close', 'before-open']);
Dialog.displayName = 'Dialog';
Dialog.defaultProps = {
  draggable: false,
  resizable: false,
  stretch: false,
  preventFocusRestore: false
};

/**
 * The `DurationPicker` component provides an input field with assigned sliders which opens on user action. The `DurationPicker` allows users to select a time duration. It consists of two parts: the time input field and the sliders.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/DurationPicker" target="_blank">UI5 Web Components Playground</a>
 */
var DurationPicker = withWebComponent$1.withWebComponent('ui5-duration-picker', ['maxValue', 'minutesStep', 'secondsStep', 'value', 'valueState'], ['disabled', 'hideHours', 'hideMinutes', 'hideSeconds', 'readonly'], ['valueStateMessage'], ['change']);
DurationPicker.displayName = 'DurationPicker';
DurationPicker.defaultProps = {
  disabled: false,
  hideHours: false,
  hideMinutes: false,
  hideSeconds: false,
  maxValue: '23:59:59',
  minutesStep: 1,
  readonly: false,
  secondsStep: 1,
  value: '00:00:00',
  valueState: 'None'
};

Theming.addCustomCSS('ui5-button', "\n  :host([data-ui5wcr-dynamic-page-header-action]){\n    width: 1.375rem;\n    height: 1.375rem;\n    min-width: 1.375rem;\n  }\n  :host([data-ui5wcr-dynamic-page-header-action]) .ui5-button-root {\n    padding: 0;\n  }");
Theming.addCustomCSS('ui5-togglebutton', "\n    :host([data-ui5wcr-dynamic-page-header-action]){\n    width: 1.375rem;\n    height: 1.375rem;\n    min-width: 1.375rem;\n  }\n  :host([data-ui5wcr-dynamic-page-header-action]) .ui5-button-root {\n    padding: 0;\n  }");
var anchorBarStyles = {
  anchorBarActionButton: {
    position: 'absolute',
    top: "-0.6875rem",
    marginLeft: "-0.6875rem",
    left: '50%',
    zIndex: 3,
    '&:before, &:after': {
      content: '""',
      position: 'absolute',
      width: '4rem',
      top: '50%',
      height: '0.0625rem'
    },
    '&:before': {
      right: '100%',
      backgroundImage: "linear-gradient(to left, ".concat(ThemingParameters.ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))")
    },
    '&:after': {
      backgroundImage: "linear-gradient(to right, ".concat(ThemingParameters.ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))"),
      left: '100%'
    }
  },
  anchorBarActionButtonExpandable: {},
  anchorBarActionButtonPinnable: {},
  anchorBarActionPinnableAndExpandable: {
    '&$anchorBarActionButtonPinnable': {
      marginLeft: '0.25rem',
      '&:before': {
        backgroundColor: 'white'
      }
    },
    '&$anchorBarActionButtonExpandable': {
      marginLeft: '-1.75rem'
    }
  }
};
var useStyles$b = reactJss.createUseStyles(anchorBarStyles, {
  name: 'DynamicPageAnchorBar'
});

/**
 * The dynamic page anchor bar contains the expand/collapse (expands or collapses the header content)
 * and pin button (pins the content header).
 */
var DynamicPageAnchorBar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var showHideHeaderButton = props.showHideHeaderButton,
      headerContentHeight = props.headerContentHeight,
      headerContentPinnable = props.headerContentPinnable,
      headerPinned = props.headerPinned,
      setHeaderPinned = props.setHeaderPinned,
      onToggleHeaderContentVisibility = props.onToggleHeaderContentVisibility,
      onHoverToggleButton = props.onHoverToggleButton,
      style = props.style;
  var classes = useStyles$b();
  var shouldRenderHeaderPinnableButton = headerContentPinnable && headerContentHeight > 0;
  var showBothActions = shouldRenderHeaderPinnableButton && showHideHeaderButton;
  var onPinHeader = React.useCallback(function (e) {
    setHeaderPinned(e.target.pressed);
  }, [setHeaderPinned]);
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  return /*#__PURE__*/React__default['default'].createElement("section", {
    style: style,
    role: "navigation",
    className: showHideHeaderButton || headerContentPinnable ? classes.anchorBarActionButton : null,
    ref: ref
  }, showHideHeaderButton && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
    icon: headerContentHeight === 0 ? 'slim-arrow-down' : 'slim-arrow-up',
    "data-ui5wcr-dynamic-page-header-action": "",
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonExpandable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExpandable : ''),
    onClick: onToggleHeaderContentVisibility,
    onMouseOver: onHoverToggleButton,
    onMouseLeave: onHoverToggleButton,
    tooltip: i18nBundle.getText(headerContentHeight === 0 ? i18nDefaults.EXPAND_HEADER : i18nDefaults.COLLAPSE_HEADER),
    "aria-label": i18nBundle.getText(headerContentHeight === 0 ? i18nDefaults.EXPAND_HEADER : i18nDefaults.COLLAPSE_HEADER)
  }), shouldRenderHeaderPinnableButton && /*#__PURE__*/React__default['default'].createElement(ToggleButton$1.ToggleButton, {
    icon: "pushpin-off",
    "data-ui5wcr-dynamic-page-header-action": "",
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonPinnable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExpandable : ''),
    pressed: headerPinned,
    onClick: onPinHeader,
    tooltip: i18nBundle.getText(headerPinned ? i18nDefaults.UNPIN_HEADER : i18nDefaults.PIN_HEADER),
    "aria-label": i18nBundle.getText(headerPinned ? i18nDefaults.UNPIN_HEADER : i18nDefaults.PIN_HEADER)
  }));
});
DynamicPageAnchorBar.displayName = 'DynamicPageAnchorBar';

var useObserveHeights = function useObserveHeights(objectPage, topHeader, headerContentRef, anchorBarRef, _ref) {
  var _anchorBarRef$current, _anchorBarRef$current2;

  var noHeader = _ref.noHeader;

  var _useState = React.useState(0),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      topHeaderHeight = _useState2[0],
      setTopHeaderHeight = _useState2[1];

  var _useState3 = React.useState(0),
      _useState4 = _slicedToArray__default['default'](_useState3, 2),
      headerContentHeight = _useState4[0],
      setHeaderContentHeight = _useState4[1];

  var _useState5 = React.useState(true),
      _useState6 = _slicedToArray__default['default'](_useState5, 2),
      isIntersecting = _useState6[0],
      setIsIntersecting = _useState6[1];

  React.useEffect(function () {
    var headerIntersectionObserver = new IntersectionObserver(function (_ref2) {
      var _ref3 = _slicedToArray__default['default'](_ref2, 1),
          header = _ref3[0];

      if (header.isIntersecting) {
        setIsIntersecting(true);
        setHeaderContentHeight(header.target.offsetHeight);
      } else {
        setIsIntersecting(false);
        setHeaderContentHeight(0);
      }
    }, {
      rootMargin: "-".concat(topHeaderHeight, "px 0px 0px 0px"),
      root: objectPage.current,
      threshold: 0.3
    });

    if (headerContentRef.current) {
      headerIntersectionObserver.observe(headerContentRef.current);
    }

    return function () {
      headerIntersectionObserver.disconnect();
    };
  }, [topHeaderHeight, setHeaderContentHeight, headerContentRef, setIsIntersecting]); // top header

  React.useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref4) {
      var _header$contentRect$h, _header$contentRect;

      var _ref5 = _slicedToArray__default['default'](_ref4, 1),
          header = _ref5[0];

      setTopHeaderHeight((_header$contentRect$h = header === null || header === void 0 ? void 0 : (_header$contentRect = header.contentRect) === null || _header$contentRect === void 0 ? void 0 : _header$contentRect.height) !== null && _header$contentRect$h !== void 0 ? _header$contentRect$h : 0);
    });

    if (topHeader.current) {
      headerContentResizeObserver.observe(topHeader.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [topHeader.current, setTopHeaderHeight]); // header content

  React.useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref6) {
      var _ref7 = _slicedToArray__default['default'](_ref6, 1),
          headerContent = _ref7[0];

      if (isIntersecting) {
        var _headerContent$conten, _headerContent$conten2;

        setHeaderContentHeight((_headerContent$conten = headerContent === null || headerContent === void 0 ? void 0 : (_headerContent$conten2 = headerContent.contentRect) === null || _headerContent$conten2 === void 0 ? void 0 : _headerContent$conten2.height) !== null && _headerContent$conten !== void 0 ? _headerContent$conten : 0);
      }
    });

    if (headerContentRef.current) {
      headerContentResizeObserver.observe(headerContentRef.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [headerContentRef.current, setHeaderContentHeight, isIntersecting]);
  var anchorBarHeight = (_anchorBarRef$current = (_anchorBarRef$current2 = anchorBarRef.current) === null || _anchorBarRef$current2 === void 0 ? void 0 : _anchorBarRef$current2.offsetHeight) !== null && _anchorBarRef$current !== void 0 ? _anchorBarRef$current : 33;
  var totalHeaderHeight = (noHeader ? 0 : topHeaderHeight + headerContentHeight) + anchorBarHeight;
  return {
    topHeaderHeight: topHeaderHeight,
    headerContentHeight: headerContentHeight,
    anchorBarHeight: anchorBarHeight,
    totalHeaderHeight: totalHeaderHeight
  };
};

var _headerCollapsed;
var DynamicPageCssVariables = {
  headerDisplay: '--ui5wcr_DynamicPage_header_display'
};
var styles$a = {
  dynamicPage: _defineProperty__default['default']({
    width: '100%',
    height: '100%',
    maxHeight: '100%',
    position: 'relative',
    whiteSpace: 'normal',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    backgroundColor: ThemingParameters.ThemingParameters.sapBackgroundColor,
    overflowX: 'hidden',
    overflowY: 'auto'
  }, DynamicPageCssVariables.headerDisplay, 'block'),
  headerCollapsed: (_headerCollapsed = {}, _defineProperty__default['default'](_headerCollapsed, DynamicPageCssVariables.headerDisplay, 'none'), _defineProperty__default['default'](_headerCollapsed, '& $anchorBar > section[role="navigation"]', {
    top: '-0.025rem'
  }), _headerCollapsed),
  anchorBar: {
    position: 'sticky',
    boxShadow: ThemingParameters.ThemingParameters.sapContent_HeaderShadow,
    height: '1px',
    zIndex: 2,
    '& > section[role="navigation"]': {
      top: 0
    }
  },
  iEClass: {
    position: 'fixed',
    //page width - scrollbar
    width: 'calc(100% - 18px)'
  },
  iEBackgroundElement: {
    position: 'fixed',
    backgroundColor: ThemingParameters.ThemingParameters.sapObjectHeader_Background
  },
  contentContainer: _objectSpread__default['default'](_objectSpread__default['default']({}, spacing.sapUiResponsiveContentPadding), {}, {
    paddingTop: '1rem !important',
    boxSizing: 'border-box',
    width: '100%',
    height: 'auto',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    zIndex: 0
  }),
  backgroundStandard: {
    background: ThemingParameters.ThemingParameters.sapBackgroundColor
  },
  backgroundSolid: {
    background: ThemingParameters.ThemingParameters.sapBackgroundColor
  },
  backgroundList: {
    background: ThemingParameters.ThemingParameters.sapGroup_ContentBackground
  },
  backgroundTransparent: {
    background: 'transparent'
  }
};

/**
 * Defines the current state of the component.
 */
var HEADER_STATES;

(function (HEADER_STATES) {
  HEADER_STATES["AUTO"] = "AUTO";
  HEADER_STATES["VISIBLE_PINNED"] = "VISIBLE_PINNED";
  HEADER_STATES["HIDDEN_PINNED"] = "HIDDEN_PINNED";
  HEADER_STATES["VISIBLE"] = "VISIBLE";
  HEADER_STATES["HIDDEN"] = "HIDDEN";
})(HEADER_STATES || (HEADER_STATES = {}));

var useStyles$c = reactJss.createUseStyles(styles$a, {
  name: 'DynamicPage'
});
/**
 * The dynamic page is a generic layout control designed to support various floorplans and use cases.
 * The content of both the header and the page can differ from floorplan to floorplan.
 *
 * The header of the dynamic page is collapsible, which helps users to focus on the actual page content, but still ensures that important header information
 * and actions are readily available.
 */

var DynamicPage = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _headerContentRef$cur, _headerContentRef$cur2, _dynamicPageRef$curre3, _dynamicPageRef$curre4;

  var title = props.title,
      header = props.header,
      tooltip = props.tooltip,
      style = props.style,
      backgroundDesign = props.backgroundDesign,
      showHideHeaderButton = props.showHideHeaderButton,
      headerContentPinnable = props.headerContentPinnable,
      alwaysShowContentHeader = props.alwaysShowContentHeader,
      children = props.children,
      className = props.className;
  var passThroughProps = hooks.usePassThroughHtmlProps(props);
  var classes = useStyles$c();
  var dynamicPageClasses = StyleClassHelper.StyleClassHelper.of(classes.dynamicPage, GlobalStyleClasses.GlobalStyleClasses.sapScrollBar);
  dynamicPageClasses.put(classes["background".concat(backgroundDesign)]);
  dynamicPageClasses.putIfPresent(className);
  var anchorBarRef = React.useRef();
  var dynamicPageRef = hooks.useConsolidatedRef(ref);
  var topHeaderRef = React.useRef();
  var headerContentRef = React.useRef();

  var _useState = React.useState(alwaysShowContentHeader ? HEADER_STATES.VISIBLE_PINNED : Device.isIE() ? HEADER_STATES.VISIBLE : HEADER_STATES.AUTO),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      headerState = _useState2[0],
      setHeaderState = _useState2[1]; // observe heights of header parts


  var _useObserveHeights = useObserveHeights(dynamicPageRef, topHeaderRef, headerContentRef, anchorBarRef, {
    noHeader: false
  }),
      topHeaderHeight = _useObserveHeights.topHeaderHeight,
      headerContentHeight = _useObserveHeights.headerContentHeight;

  if (headerState === HEADER_STATES.HIDDEN || headerState === HEADER_STATES.HIDDEN_PINNED) {
    dynamicPageClasses.put(classes.headerCollapsed);
  }

  React.useEffect(function () {
    var oneTimeScrollHandler = function oneTimeScrollHandler() {
      if (!Device.isIE()) {
        setHeaderState(HEADER_STATES.AUTO);
      }
    };

    if (headerState === HEADER_STATES.VISIBLE || headerState === HEADER_STATES.HIDDEN) {
      var _dynamicPageRef$curre;

      (_dynamicPageRef$curre = dynamicPageRef.current) === null || _dynamicPageRef$curre === void 0 ? void 0 : _dynamicPageRef$curre.addEventListener('scroll', oneTimeScrollHandler, {
        once: true
      });
    }

    return function () {
      var _dynamicPageRef$curre2;

      (_dynamicPageRef$curre2 = dynamicPageRef.current) === null || _dynamicPageRef$curre2 === void 0 ? void 0 : _dynamicPageRef$curre2.removeEventListener('scroll', oneTimeScrollHandler);
    };
  }, [dynamicPageRef, headerState]);
  var onToggleHeaderContentVisibility = React.useCallback(function (e, element) {
    var srcElement = element !== null && element !== void 0 ? element : e.target;
    var shouldHideHeader = srcElement.icon === 'slim-arrow-up';
    setHeaderState(function (oldState) {
      if (oldState === HEADER_STATES.VISIBLE_PINNED || oldState === HEADER_STATES.HIDDEN_PINNED) {
        return shouldHideHeader ? HEADER_STATES.HIDDEN_PINNED : HEADER_STATES.VISIBLE_PINNED;
      }

      return shouldHideHeader ? HEADER_STATES.HIDDEN : HEADER_STATES.VISIBLE;
    });
  }, [setHeaderState]);
  var onHoverToggleButton = React.useCallback(function (e) {
    // TODO background color should be sapObjectHeader_Hover_Background (same color as sapTile_Active_Background)
    topHeaderRef.current.style.backgroundColor = (e === null || e === void 0 ? void 0 : e.type) === 'mouseover' ? ThemingParameters.ThemingParameters.sapTile_Active_Background : null;
  }, [topHeaderRef]);

  var onToggleHeaderContent = function onToggleHeaderContent(e) {
    if (e.target.tagName === 'DIV') {
      onToggleHeaderContentVisibility(e, anchorBarRef.current.children.item(0).children.item(0));
    }
  };

  var handleHeaderPinnedChange = React.useCallback(function (headerWillPin) {
    if (headerWillPin) {
      setHeaderState(HEADER_STATES.VISIBLE_PINNED);
    } else {
      setHeaderState(HEADER_STATES.VISIBLE);
    }
  }, [setHeaderState]);
  React.useEffect(function () {
    if (alwaysShowContentHeader) {
      setHeaderState(HEADER_STATES.VISIBLE_PINNED);
    } else if (!Device.isIE()) {
      setHeaderState(HEADER_STATES.AUTO);
    }
  }, [alwaysShowContentHeader, setHeaderState]);
  var anchorBarClasses = StyleClassHelper.StyleClassHelper.of(classes.anchorBar);

  if (Device.isIE()) {
    anchorBarClasses.put(classes.iEClass);
  }

  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: dynamicPageRef,
    title: tooltip,
    className: dynamicPageClasses.toString(),
    style: style
  }, passThroughProps), title && /*#__PURE__*/React.cloneElement(title, {
    ref: topHeaderRef,
    onToggleHeaderContentVisibility: onToggleHeaderContent
  }), header && /*#__PURE__*/React.cloneElement(header, {
    ref: headerContentRef,
    headerPinned: headerState === HEADER_STATES.VISIBLE_PINNED || headerState === HEADER_STATES.VISIBLE,
    topHeaderHeight: topHeaderHeight
  }), /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    className: anchorBarClasses.className,
    ref: anchorBarRef,
    style: {
      top: headerState === HEADER_STATES.VISIBLE_PINNED || headerState === HEADER_STATES.VISIBLE ? ((_headerContentRef$cur = headerContentRef === null || headerContentRef === void 0 ? void 0 : (_headerContentRef$cur2 = headerContentRef.current) === null || _headerContentRef$cur2 === void 0 ? void 0 : _headerContentRef$cur2.offsetHeight) !== null && _headerContentRef$cur !== void 0 ? _headerContentRef$cur : 0) + topHeaderHeight : topHeaderHeight
    }
  }, /*#__PURE__*/React__default['default'].createElement(DynamicPageAnchorBar, {
    headerContentPinnable: headerContentPinnable,
    showHideHeaderButton: showHideHeaderButton,
    headerContentHeight: headerContentHeight,
    onToggleHeaderContentVisibility: onToggleHeaderContentVisibility,
    setHeaderPinned: handleHeaderPinnedChange,
    headerPinned: headerState === HEADER_STATES.VISIBLE_PINNED || headerState === HEADER_STATES.HIDDEN_PINNED,
    onHoverToggleButton: onHoverToggleButton
  })), Device.isIE() && /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.iEBackgroundElement,
    style: {
      height: "".concat(headerContentHeight + topHeaderHeight, "px"),
      width: "calc(100% - ".concat((dynamicPageRef === null || dynamicPageRef === void 0 ? void 0 : (_dynamicPageRef$curre3 = dynamicPageRef.current) === null || _dynamicPageRef$curre3 === void 0 ? void 0 : _dynamicPageRef$curre3.clientHeight) < (dynamicPageRef === null || dynamicPageRef === void 0 ? void 0 : (_dynamicPageRef$curre4 = dynamicPageRef.current) === null || _dynamicPageRef$curre4 === void 0 ? void 0 : _dynamicPageRef$curre4.scrollHeight) ? '18px' : '0px', ")")
    }
  }), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.contentContainer,
    style: {
      marginTop: Device.isIE() ? "".concat(headerContentHeight + topHeaderHeight + 34, "px") : 0
    }
  }, children));
});
DynamicPage.displayName = 'DynamicPage';
DynamicPage.defaultProps = {
  backgroundDesign: PageBackgroundDesign.PageBackgroundDesign.Standard,
  showHideHeaderButton: true,
  headerContentPinnable: true,
  alwaysShowContentHeader: false
};

var padding = Device.isIE() ? {
  padding: '0 2rem'
} : _objectSpread__default['default']({}, spacing.sapUiResponsiveContentPadding);
var DynamicPageHeaderStyles = {
  header: _objectSpread__default['default'](_objectSpread__default['default']({}, padding), {}, {
    flexShrink: 0,
    backgroundColor: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    position: 'sticky',
    zIndex: 1,
    paddingTop: '1rem !important',
    paddingBottom: '1rem !important',
    display: "var(".concat(DynamicPageCssVariables.headerDisplay, ")"),
    maxHeight: '500px',
    overflow: Device.isIE() ? 'visible' : 'hidden'
  }),
  iEClass: {
    position: 'fixed',
    // page width - padding - scrollbar
    width: 'calc(100% - 18px - 4rem)'
  }
};

var useStyles$d = reactJss.createUseStyles(DynamicPageHeaderStyles, {
  name: 'DynamicPageHeader'
});
/**
 * The dynamic page header contains the header content of the dynamic page.
 * This component can be collapsed and pinned by the anchorbar.
 */

var DynamicPageHeader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      headerPinned = props.headerPinned,
      topHeaderHeight = props.topHeaderHeight,
      tooltip = props.tooltip,
      className = props.className,
      style = props.style;
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  var headerStyles = React.useMemo(function () {
    if (headerPinned) {
      return _objectSpread__default['default'](_objectSpread__default['default']({}, style), {}, {
        top: "".concat(topHeaderHeight, "px"),
        zIndex: 1
      });
    }

    return style;
  }, [headerPinned, topHeaderHeight, style]);
  var classes = useStyles$d();
  var classNames = StyleClassHelper.StyleClassHelper.of(classes.header);

  if (Device.isIE()) {
    classNames.put(classes.iEClass);
  }

  classNames.putIfPresent(className);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    title: tooltip,
    style: headerStyles,
    ref: ref,
    className: classNames.className,
    "data-component-name": "DynamicPageHeader"
  }, passThroughProps), /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Start
  }, children));
});
DynamicPageHeader.displayName = 'DynamicPageHeader';

var padding$1 = Device.isIE() ? {
  padding: '0 2rem'
} : _objectSpread__default['default']({}, spacing.sapUiResponsiveContentPadding);
var DynamicPageTitleStyles = {
  container: _objectSpread__default['default'](_objectSpread__default['default']({}, padding$1), {}, {
    backgroundColor: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    minHeight: '3rem',
    wordWrap: 'break-word',
    paddingTop: '0.5rem',
    paddingBottom: '0.5rem',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    position: 'sticky',
    top: 0,
    zIndex: 2,
    '&:hover': {
      // TODO background color should be sapObjectHeader_Hover_Background (same color as sapTile_Active_Background)
      backgroundColor: ThemingParameters.ThemingParameters.sapTile_Active_Background
    }
  }),
  iEClass: {
    position: 'fixed',
    // page width - padding - scrollbar
    width: 'calc(100% - 18px - 4rem)'
  },
  breadcrumbs: {
    padding: '0.5rem 0 0.25rem 0'
  },
  titleMainSection: {
    flexGrow: 1,
    width: '100%',
    alignItems: 'flex-start'
  },
  title: {
    color: ThemingParameters.ThemingParameters.sapGroup_TitleTextColor,
    fontSize: ThemingParameters.ThemingParameters.sapFontHeader3Size,
    padding: '0.3125rem 0 0 0',
    textOverflow: 'ellipsis',
    flexShrink: 1
  },
  subTitle: {
    color: ThemingParameters.ThemingParameters.sapContent_LabelColor,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    marginTop: '0.25rem',
    marginBottom: '0.25rem'
  },
  content: {
    flexShrink: 1.6,
    padding: '0 0 0 1rem'
  },
  actions: {
    flexShrink: 1.6,
    paddingLeft: '0.5rem',
    marginLeft: 'auto'
  },
  navigationActions: {
    flexShrink: 1.6,
    paddingLeft: '0.5rem',
    marginLeft: 'auto'
  },
  navigationActionsSeparator: _objectSpread__default['default']({
    background: ThemingParameters.ThemingParameters.sapBackgroundColor,
    width: '0.0625rem',
    height: '2rem'
  }, spacing.sapUiTinyMarginBeginEnd)
};

var useStyles$e = reactJss.createUseStyles(DynamicPageTitleStyles, {
  name: 'DynamicPageTitle'
});
/**
 * The dynamic page title defines the elements in the top header.
 * It can contain Breadcrumbs, Title, Subtitle, Content, KPIs and Actions.
 */

var DynamicPageTitle = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var actions = props.actions,
      onToggleHeaderContentVisibility = props.onToggleHeaderContentVisibility,
      breadcrumbs = props.breadcrumbs,
      children = props.children,
      heading = props.heading,
      subHeading = props.subHeading,
      navigationActions = props.navigationActions,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip;
  var classes = useStyles$e();
  var containerClasses = StyleClassHelper.StyleClassHelper.of(classes.container);

  if (Device.isIE()) {
    containerClasses.put(classes.iEClass);
  }

  containerClasses.putIfPresent(className);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onToggleHeaderContentVisibility']);
  return /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, _extends__default['default']({
    className: containerClasses.className,
    style: style,
    ref: ref,
    tooltip: tooltip,
    "data-component-name": "DynamicPageTitle",
    onClick: onToggleHeaderContentVisibility
  }, passThroughProps), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.breadcrumbs
  }, breadcrumbs), /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Center,
    style: {
      flexGrow: 1,
      width: '100%'
    }
  }, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    className: classes.titleMainSection
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.title
  }, heading), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.content
  }, /*#__PURE__*/React__default['default'].createElement(Toolbar$1.Toolbar, {
    toolbarStyle: ToolbarStyle.ToolbarStyle.Clear
  }, children))), /*#__PURE__*/React__default['default'].createElement(Toolbar$1.Toolbar, {
    design: ToolbarDesign.ToolbarDesign.Auto,
    toolbarStyle: ToolbarStyle.ToolbarStyle.Clear
  }, /*#__PURE__*/React__default['default'].createElement(ToolbarSpacer$1.ToolbarSpacer, null), actions, React.Children.count(actions) > 0 && React.Children.count(navigationActions) > 0 && /*#__PURE__*/React__default['default'].createElement(ToolbarSeparator$1.ToolbarSeparator, null), navigationActions)), /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, null, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.subTitle
  }, subHeading)));
});
DynamicPageTitle.displayName = 'DynamicPageTitle';

(function (FCLLayout) {
  FCLLayout["OneColumn"] = "OneColumn";
  FCLLayout["TwoColumnsStartExpanded"] = "TwoColumnsStartExpanded";
  FCLLayout["TwoColumnsMidExpanded"] = "TwoColumnsMidExpanded";
  FCLLayout["ThreeColumnsMidExpanded"] = "ThreeColumnsMidExpanded";
  FCLLayout["ThreeColumnsEndExpanded"] = "ThreeColumnsEndExpanded";
  FCLLayout["ThreeColumnsStartExpandedEndHidden"] = "ThreeColumnsStartExpandedEndHidden";
  FCLLayout["ThreeColumnsMidExpandedEndHidden"] = "ThreeColumnsMidExpandedEndHidden";
  FCLLayout["MidColumnFullScreen"] = "MidColumnFullScreen";
  FCLLayout["EndColumnFullScreen"] = "EndColumnFullScreen";
})(exports.FCLLayout || (exports.FCLLayout = {}));

/**
 * The `FileUploader` opens a file explorer dialog and enables users to upload files. The component consists of input field, but you can provide an HTML element by your choice to trigger the file upload, by using the default slot. Furthermore, you can set the property "hideInput" to "true" to hide the input field.
 * To get all selected files, you can simply use the read-only "files" property. To restrict the types of files the user can select, you can use the "accept" property.
 * And, similar to all input based components, the FileUploader supports "valueState", "placeholder", "name", and "disabled" properties. For the `FileUploader`
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/FileUploader" target="_blank">UI5 Web Components Playground</a>
 */
var FileUploader = withWebComponent$1.withWebComponent('ui5-file-uploader', ['accept', 'name', 'placeholder', 'value', 'valueState'], ['disabled', 'hideInput', 'multiple'], ['valueStateMessage'], ['change']);
FileUploader.displayName = 'FileUploader';
FileUploader.defaultProps = {
  disabled: false,
  hideInput: false,
  multiple: false,
  valueState: ValueState.ValueState.None
};

var styles$b = {
  outerContainer: {
    paddingTop: '0.5rem',
    paddingLeft: '2rem',
    paddingRight: '2rem',
    paddingBottom: '1px',
    background: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    boxShadow: ThemingParameters.ThemingParameters.sapContent_HeaderShadow
  },
  filterItemExpand: {
    '--_ui5_input_width': '100%'
  },
  filterBarHeader: {
    alignItems: 'center',
    display: 'flex',
    background: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    minHeight: '3rem',
    paddingBottom: '0.5rem',
    boxShadow: 'none',
    flexWrap: 'wrap'
  },
  filterArea: {
    display: 'flex',
    flexWrap: 'wrap',
    paddingTop: '1rem',
    paddingBottom: '1rem',
    background: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    transition: 'max-height 0.2s ease-out, opacity 0.2s ease-in'
  },
  filterAreaClosed: {
    maxHeight: '0',
    opacity: 0,
    padding: 0,
    overflowY: 'auto'
  },
  filterAreaOpen: {
    maxHeight: '500px',
    opacity: 1,
    overflowY: 'auto'
  },
  headerRowRight: {
    display: 'flex',
    justifyContent: 'flex-end',
    flexGrow: 1,
    '& ui5-button': {
      marginLeft: '0.5rem'
    }
  },
  showFiltersBtn: {
    minWidth: '108px'
  },
  loadingContainer: {
    marginBottom: '0.5rem',
    display: 'flex',
    width: '100%',
    justifyContent: 'center'
  }
};

var styles$c = {
  dialog: _objectSpread__default['default'](_objectSpread__default['default']({}, spacing.sapUiContentPadding), {}, {
    display: 'flex',
    flexDirection: 'column',
    maxWidth: '960px',
    width: '80vw',
    maxHeight: '70vh',
    '--_ui5_input_width': '100%'
  }),
  header: {
    width: '100%',
    padding: '0.25rem 1rem 0 1rem',
    '& *': {
      margin: '0.25rem 0 0.25rem 0'
    },
    '& ui5-input': {
      width: '100%'
    }
  },
  footer: {
    '& :not(:last-child)': {
      marginRight: '0.25rem'
    }
  },
  groupContainer: {
    display: 'flex',
    flexDirection: 'column'
  },
  groupTitle: {
    maxWidth: '85%',
    marginRight: '0.5rem'
  },
  filters: {
    padding: '1rem 0 2rem 0'
  },
  singleFilter: {
    display: 'grid',
    gridTemplateColumns: "auto minmax(".concat(CssSizeVariables.CssSizeVariables.sapWcrCheckBoxWidthHeight, ",7%)"),
    gridTemplateRows: 'auto',
    gridColumnGap: '0.5rem',
    '@media(max-width:700px)': {
      marginTop: '0.5rem'
    },
    '& ui5-checkbox': {
      placeSelf: 'center start',
      '@media(max-width:700px)': {
        marginTop: '0.8rem',
        paddingLeft: 0,
        placeSelf: 'end start'
      }
    }
  },
  fbSearch: {
    '@media(min-width:700px)': {
      display: 'grid',
      gridTemplateColumns: '20% auto 7%',
      gridTemplateRows: 'auto',
      gridRowGap: '0.5rem',
      gridColumnGap: '0.5rem'
    },
    paddingBottom: '2rem',
    width: '100%',
    '& ui5-input': {
      width: '100%'
    }
  }
};

var filterValue = function filterValue(ref, child) {
  var tagName = ref.tagName;
  var filterItemProps = {};

  if (tagName === 'UI5-INPUT' || tagName === 'UI5-DATE-PICKER' || tagName === 'UI5-DATETIME-PICKER' || tagName === 'UI5-DATERANGE-PICKER' || tagName === 'UI5-TIME-PICKER' || tagName === 'UI5-DURATION-PICKER') {
    filterItemProps = {
      value: ref.value
    };
  }

  if (tagName === 'UI5-COMBOBOX') {
    filterItemProps = {
      value: ref.value,
      filterValue: ref.filterValue
    };
  }

  if (tagName === 'UI5-SELECT' || tagName === 'UI5-MULTI-COMBOBOX') {
    var _child$props$children;

    var selectedIndices = Array.from(ref.children).map(function (item, index) {
      return item.selected ? index : false;
    }).filter(function (el) {
      return el !== false;
    });
    var selectedIndicesSet = new Set(selectedIndices);
    var options = (_child$props$children = child.props.children.props.children) === null || _child$props$children === void 0 ? void 0 : _child$props$children.map(function (item, index) {
      if (selectedIndicesSet.has(index)) {
        return /*#__PURE__*/React.cloneElement(item, {
          selected: true
        });
      }

      return /*#__PURE__*/React.cloneElement(item, {
        selected: false
      });
    });
    filterItemProps = {
      children: options
    };
  }

  if (tagName === 'UI5-SWITCH' || tagName === 'UI5-CHECKBOX') {
    filterItemProps = {
      checked: ref.checked
    };
  }

  return filterItemProps;
};
var renderSearchWithValue = function renderSearchWithValue(renderSearchElement, searchValue) {
  var _renderSearchElement$;

  return /*#__PURE__*/React.cloneElement(renderSearchElement, {
    value: searchValue !== null && searchValue !== void 0 ? searchValue : renderSearchElement === null || renderSearchElement === void 0 ? void 0 : (_renderSearchElement$ = renderSearchElement.props) === null || _renderSearchElement$ === void 0 ? void 0 : _renderSearchElement$.value
  });
};

var useStyles$f = reactJss.createUseStyles(styles$c, {
  name: 'FilterBarDialog'
});
var FilterDialog = function FilterDialog(props) {
  var filterBarRefs = props.filterBarRefs,
      open = props.open,
      handleDialogClose = props.handleDialogClose,
      children = props.children,
      showClearButton = props.showClearButton,
      showRestoreButton = props.showRestoreButton,
      showGoButton = props.showGoButton,
      showSearch = props.showSearch,
      renderFBSearch = props.renderFBSearch,
      handleClearFilters = props.handleClearFilters,
      handleRestoreFilters = props.handleRestoreFilters,
      handleDialogSave = props.handleDialogSave,
      searchValue = props.searchValue,
      handleSearchValueChange = props.handleSearchValueChange,
      onGo = props.onGo,
      handleSelectionChange = props.handleSelectionChange,
      handleDialogSearch = props.handleDialogSearch,
      handleDialogCancel = props.handleDialogCancel;
  var classes = useStyles$f();

  var _useState = React.useState(''),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      searchString = _useState2[0],
      setSearchString = _useState2[1];

  var searchRef = React.useRef(null);

  var _useState3 = React.useState({}),
      _useState4 = _slicedToArray__default['default'](_useState3, 2),
      toggledFilters = _useState4[0],
      setToggledFilters = _useState4[1];

  var dialogRefs = React.useRef({});
  var dialogRef = React.useRef();
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  var basicText = i18nBundle.getText(i18nDefaults.BASIC);
  var cancelText = i18nBundle.getText(i18nDefaults.CANCEL);
  var clearText = i18nBundle.getText(i18nDefaults.CLEAR);
  var restoreText = i18nBundle.getText(i18nDefaults.RESTORE);
  var saveText = i18nBundle.getText(i18nDefaults.SAVE);
  var searchForFiltersText = i18nBundle.getText(i18nDefaults.SEARCH_FOR_FILTERS);
  var showOnFilterBarText = i18nBundle.getText(i18nDefaults.SHOW_ON_FILTER_BAR);
  var filtersTitle = i18nBundle.getText(i18nDefaults.FILTERS);
  var goText = i18nBundle.getText(i18nDefaults.GO);
  React.useEffect(function () {
    if (open) {
      dialogRef.current.open();
    }
  }, [open]);
  var handleSearch = React.useCallback(function (e) {
    if (handleDialogSearch) {
      handleDialogSearch(Utils.enrichEventWithDetails(e, {
        value: e.target.value
      }));
    }

    setSearchString(e.target.value);
  }, [setSearchString, handleDialogSearch]);
  var handleSave = React.useCallback(function (e) {
    if (renderFBSearch) {
      var _searchRef$current;

      handleSearchValueChange((_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.children[1].value);
    }

    handleDialogSave(e, dialogRefs.current, toggledFilters);
  }, [renderFBSearch, handleSearchValueChange, searchRef, handleDialogSave, toggledFilters, dialogRefs]);
  var handleClose = React.useCallback(function (e) {
    stopPropagation(e);

    if (!showGoButton) {
      handleSave(e);
      return;
    }

    handleDialogClose(e);
  }, [showGoButton, handleSave, handleDialogClose]);
  var handleDialogGo = React.useCallback(function (e) {
    if (onGo) {
      onGo(Utils.enrichEventWithDetails(e));
    }

    handleDialogClose(e);
  }, [onGo, handleDialogClose]);
  var handleRestore = React.useCallback(function (e) {
    handleRestoreFilters(e, 'dialog');
  }, [handleRestoreFilters]);
  var handleCancel = React.useCallback(function (e) {
    if (handleDialogCancel) {
      handleDialogCancel(Utils.enrichEventWithDetails(e));
    }

    handleDialogClose(e);
  }, [handleDialogCancel]);
  var footerContentRight = React.useMemo(function () {
    return /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
      justifyContent: FlexBoxJustifyContent.FlexBoxJustifyContent.End,
      className: classes.footer
    }, showGoButton && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
      onClick: handleDialogGo,
      design: ButtonDesign.ButtonDesign.Emphasized,
      title: goText
    }, goText), showClearButton && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
      onClick: handleClearFilters
    }, clearText), showRestoreButton && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
      onClick: handleRestore
    }, restoreText), /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
      onClick: handleSave
    }, saveText), /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
      design: ButtonDesign.ButtonDesign.Transparent,
      onClick: handleCancel
    }, cancelText));
  }, [goText, showGoButton, classes.footer, handleDialogGo, showClearButton, handleClearFilters, showRestoreButton, handleRestore, handleSave, handleCancel]);
  var renderFooter = React.useCallback(function () {
    return /*#__PURE__*/React__default['default'].createElement(Bar$1.Bar, {
      design: BarDesign.BarDesign.Footer,
      endContent: footerContentRight
    });
  }, [footerContentRight]);
  var renderHeader = React.useCallback(function () {
    return /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
      direction: FlexBoxDirection.FlexBoxDirection.Column,
      alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Center,
      className: classes.header
    }, /*#__PURE__*/React__default['default'].createElement(Title$1.Title, {
      level: TitleLevel.TitleLevel.H4,
      tooltip: filtersTitle
    }, filtersTitle), showSearch && /*#__PURE__*/React__default['default'].createElement(Input$1.Input, {
      placeholder: searchForFiltersText,
      onInput: handleSearch,
      icon: /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
        name: "search"
      })
    }));
  }, [classes.header, showSearch, handleSearch, filtersTitle]);
  var renderChildren = React.useCallback(function () {
    return children.filter(function (item) {
      var _item$props, _item$props2, _item$props2$label;

      return !!(item !== null && item !== void 0 && item.props) && ((_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.visible) && (((_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : (_item$props2$label = _item$props2.label) === null || _item$props2$label === void 0 ? void 0 : _item$props2$label.toLowerCase().includes(searchString.toLowerCase())) || searchString.length === 0);
    }).map(function (child) {
      var filterBarItemRef = filterBarRefs.current[child.key];
      var filterItemProps = {};

      if (filterBarItemRef) {
        filterItemProps = filterValue(filterBarItemRef, child);
      }

      if (!child.props.children) return child;
      return /*#__PURE__*/React.cloneElement(child, {
        children: _objectSpread__default['default'](_objectSpread__default['default']({}, child.props.children), {}, {
          props: _objectSpread__default['default'](_objectSpread__default['default']({}, child.props.children.props), filterItemProps),
          ref: function ref(node) {
            dialogRefs.current[child.key] = node;
          }
        })
      });
    });
  }, [children, searchString, filterBarRefs]);
  var handleCheckBoxChange = React.useCallback(function (element) {
    return function (e) {
      if (handleSelectionChange) {
        handleSelectionChange(Utils.enrichEventWithDetails(e, {
          element: element,
          checked: e.target.checked
        }));
      }

      setToggledFilters(function (old) {
        return _objectSpread__default['default'](_objectSpread__default['default']({}, old), {}, _defineProperty__default['default']({}, element.key, e.target.checked));
      });
    };
  }, [setToggledFilters, handleSelectionChange]);
  var renderGroups = React.useCallback(function () {
    var groups = {};
    React.Children.forEach(renderChildren(), function (child) {
      var _child$props$groupNam;

      var childGroups = (_child$props$groupNam = child.props.groupName) !== null && _child$props$groupNam !== void 0 ? _child$props$groupNam : 'default';

      if (groups[childGroups]) {
        groups[childGroups].push(child);
      } else {
        groups[childGroups] = [child];
      }
    });
    return Object.keys(groups).sort(function (x, y) {
      return x === 'default' ? -1 : y === 'role' ? 1 : 0;
    }).map(function (item, index) {
      var filters = groups[item].map(function (el) {
        return /*#__PURE__*/React__default['default'].createElement("div", {
          className: classes.singleFilter,
          key: "".concat(el.key, "-container")
        }, el, /*#__PURE__*/React__default['default'].createElement(CheckBox$1.CheckBox, {
          role: "checkbox",
          checked: el.props.visibleInFilterBar || el.props.required || el.type.displayName !== 'FilterGroupItem',
          onChange: handleCheckBoxChange(el),
          disabled: el.props.required || el.type.displayName !== 'FilterGroupItem'
        }));
      });
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: classes.groupContainer,
        key: item
      }, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
        justifyContent: FlexBoxJustifyContent.FlexBoxJustifyContent.SpaceBetween,
        alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Center
      }, /*#__PURE__*/React__default['default'].createElement(Title$1.Title, {
        level: TitleLevel.TitleLevel.H5,
        className: index === 0 ? classes.groupTitle : '',
        tooltip: item === 'default' ? basicText : item
      }, item === 'default' ? basicText : item), index === 0 && /*#__PURE__*/React__default['default'].createElement(Text$1.Text, {
        wrapping: false
      }, showOnFilterBarText)), /*#__PURE__*/React__default['default'].createElement("div", {
        className: classes.filters
      }, filters));
    });
  }, [renderChildren, toggledFilters, handleCheckBoxChange]);
  return /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default['default'].createElement(Dialog$1.Dialog, {
    ref: dialogRef,
    header: renderHeader(),
    footer: renderFooter(),
    onAfterClose: handleClose
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.dialog,
    role: "dialog"
  }, renderFBSearch && /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.fbSearch,
    ref: searchRef
  }, /*#__PURE__*/React__default['default'].createElement("span", null), renderSearchWithValue(renderFBSearch, searchValue)), renderGroups())), document.body);
};

var useStyles$g = reactJss.createUseStyles(styles$b, {
  name: 'FilterBar'
});
/**
 * The `FilterBar` displays filters in a user-friendly manner to populate values for a query. It consists of a row containing the `VariantManagement`, the related buttons, and an area underneath displaying the filters. The filters are arranged in a logical row that is divided depending on the space available and the width of the filters. The area containing the filters can be hidden or shown using the "Hide FilterBar / Show FilterBar" button, the "Filters" button shows the filter dialog.
 In this dialog, the consumer has full control over the FilterBar. The filters in this dialog are displayed in one column and organized in groups. Each filter can be marked as visible in the FilterBar by selecting "Add to FilterBar".
 */

var FilterBar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _search$props2, _search$props5, _searchRef$current;

  var children = props.children,
      useToolbar = props.useToolbar,
      loading = props.loading,
      filterBarExpanded = props.filterBarExpanded,
      considerGroupName = props.considerGroupName,
      filterContainerWidth = props.filterContainerWidth,
      activeFiltersCount = props.activeFiltersCount,
      showClearOnFB = props.showClearOnFB,
      showGoOnFB = props.showGoOnFB,
      showGo = props.showGo,
      showFilterConfiguration = props.showFilterConfiguration,
      showRestoreOnFB = props.showRestoreOnFB,
      showClearButton = props.showClearButton,
      showRestoreButton = props.showRestoreButton,
      showSearchOnFiltersDialog = props.showSearchOnFiltersDialog,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      search = props.search,
      variants = props.variants,
      onToggleFilters = props.onToggleFilters,
      onFiltersDialogOpen = props.onFiltersDialogOpen,
      onFiltersDialogCancel = props.onFiltersDialogCancel,
      onFiltersDialogClose = props.onFiltersDialogClose,
      onFiltersDialogSave = props.onFiltersDialogSave,
      onFiltersDialogClear = props.onFiltersDialogClear,
      onClear = props.onClear,
      onFiltersDialogSelectionChange = props.onFiltersDialogSelectionChange,
      onFiltersDialogSearch = props.onFiltersDialogSearch,
      onGo = props.onGo,
      onRestore = props.onRestore;

  var _useState = React.useState(useToolbar ? filterBarExpanded : true),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      showFilters = _useState2[0],
      setShowFilters = _useState2[1];

  var _useState3 = React.useState(true),
      _useState4 = _slicedToArray__default['default'](_useState3, 2),
      mountFilters = _useState4[0],
      setMountFilters = _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = _slicedToArray__default['default'](_useState5, 2),
      dialogOpen = _useState6[0],
      setDialogOpen = _useState6[1];

  var _useState7 = React.useState(undefined),
      _useState8 = _slicedToArray__default['default'](_useState7, 2),
      searchValue = _useState8[0],
      setSearchValue = _useState8[1];

  var searchRef = React.useRef(null);
  var filterRefs = React.useRef({});

  var _useState9 = React.useState({}),
      _useState10 = _slicedToArray__default['default'](_useState9, 2),
      dialogRefs = _useState10[0],
      setDialogRefs = _useState10[1];

  var _useState11 = React.useState({}),
      _useState12 = _slicedToArray__default['default'](_useState11, 2),
      toggledFilters = _useState12[0],
      setToggledFilters = _useState12[1];

  var prevVisibleInFilterBarProps = React.useRef({});
  var prevSearchInputPropsValueRef = React.useRef();
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  var clearText = i18nBundle.getText(i18nDefaults.CLEAR);
  var restoreText = i18nBundle.getText(i18nDefaults.RESTORE);
  var showFilterBarText = i18nBundle.getText(i18nDefaults.SHOW_FILTER_BAR);
  var hideFilterBarText = i18nBundle.getText(i18nDefaults.HIDE_FILTER_BAR);
  var goText = i18nBundle.getText(i18nDefaults.GO);
  var filtersText = i18nBundle.getText(i18nDefaults.FILTERS);
  React.useEffect(function () {
    React.Children.toArray(children).forEach(function (item) {
      setToggledFilters(function (prev) {
        if (!item.props.hasOwnProperty('visibleInFilterBar') && (prev === null || prev === void 0 ? void 0 : prev[item.key]) === undefined) {
          return _objectSpread__default['default'](_objectSpread__default['default']({}, prev), {}, _defineProperty__default['default']({}, item.key, true));
        }

        if (item.props.hasOwnProperty('visibleInFilterBar')) {
          return _objectSpread__default['default'](_objectSpread__default['default']({}, prev), {}, _defineProperty__default['default']({}, item.key, item.props.visibleInFilterBar));
        }

        return prev;
      });
    });
  }, [children, setToggledFilters]);
  React.useEffect(function () {
    setShowFilters(useToolbar ? filterBarExpanded : true);
  }, [setShowFilters, useToolbar, filterBarExpanded]);
  var classes = useStyles$g();
  var filterAreaClasses = StyleClassHelper.StyleClassHelper.of(classes.filterArea);

  if (showFilters) {
    filterAreaClasses.put(classes.filterAreaOpen);
  } else {
    filterAreaClasses.put(classes.filterAreaClosed);
  }

  var handleToggle = React.useCallback(function (e) {
    if (onToggleFilters) {
      onToggleFilters(Utils.enrichEventWithDetails(e, {
        visible: !showFilters
      }));
    }

    setShowFilters(!showFilters);
  }, [showFilters, onToggleFilters, setShowFilters]);
  var handleDialogSave = React.useCallback(function (e, newRefs, updatedToggledFilters) {
    setDialogRefs(newRefs);
    setToggledFilters(function (old) {
      return _objectSpread__default['default'](_objectSpread__default['default']({}, old), updatedToggledFilters);
    });

    if (onFiltersDialogSave) {
      onFiltersDialogSave(Utils.enrichEventWithDetails(e, {
        elements: newRefs,
        toggledElements: _objectSpread__default['default'](_objectSpread__default['default']({}, toggledFilters), updatedToggledFilters)
      }));
    }

    handleDialogClose(e);
  }, [setDialogOpen, setDialogRefs, setToggledFilters, onFiltersDialogSave, toggledFilters]);
  var handleDialogOpen = React.useCallback(function (e) {
    setDialogOpen(true);

    if (onFiltersDialogOpen) {
      onFiltersDialogOpen(Utils.enrichEventWithDetails(e));
    }
  }, [setDialogOpen, onFiltersDialogOpen]);
  var handleDialogClose = React.useCallback(function (e) {
    if (onFiltersDialogClose) {
      onFiltersDialogClose(Utils.enrichEventWithDetails(e));
    }

    setDialogOpen(false);
  }, [setDialogOpen, onFiltersDialogClose]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onToggleFilters', 'onFiltersDialogOpen', 'onFiltersDialogClose', 'onFiltersDialogSave', 'onFiltersDialogClear', 'onClear', 'onFiltersDialogSelectionChange', 'onFiltersDialogSearch', 'onGo', 'onRestore', 'onFiltersDialogCancel']);
  var safeChildren = React.useCallback(function () {
    if (Object.keys(toggledFilters).length > 0) {
      return React.Children.toArray(children).map(function (child) {
        if ((toggledFilters === null || toggledFilters === void 0 ? void 0 : toggledFilters[child.key]) !== undefined) {
          return /*#__PURE__*/React.cloneElement(child, {
            visibleInFilterBar: toggledFilters[child.key]
          });
        }

        return child;
      });
    }

    return React.Children.toArray(children);
  }, [toggledFilters, children]);
  var prevChildren = React.useRef({});
  var renderChildren = React.useCallback(function () {
    var childProps = {
      considerGroupName: considerGroupName,
      inFB: true
    };
    return safeChildren().filter(function (item) {
      var _item$props, _item$props2;

      return (item === null || item === void 0 ? void 0 : (_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.visible) && ((_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.visibleInFilterBar);
    }).map(function (child) {
      var _prevChildren$current, _child$props$children, _child$props$children2, _prevChildren$current2, _prevChildren$current3, _child$props$children3, _child$props$children4, _prevChildren$current4, _prevChildren$current5, _child$props$children5, _child$props$children6, _prevChildren$current6, _prevChildren$current7, _child$props$children7, _child$props$children8, _child$props$children9, _prevChildren$current8, _prevChildren$current9, _prevChildren$current10;

      if (filterContainerWidth) {
        childProps.style = _objectSpread__default['default']({
          width: filterContainerWidth
        }, child.props.style);
      }

      if (!showFilterConfiguration) {
        return /*#__PURE__*/React.cloneElement(child, _objectSpread__default['default']({}, childProps));
      }

      prevVisibleInFilterBarProps.current[child.key] = child.props.visibleInFilterBar;
      var filterItemProps = {};

      if (Object.keys(dialogRefs).length > 0) {
        var dialogItemRef = dialogRefs[child.key];

        if (dialogItemRef) {
          filterItemProps = filterValue(dialogItemRef, child);
        }
      }

      if (!child.props.children) {
        return /*#__PURE__*/React.cloneElement(child, _objectSpread__default['default']({}, childProps));
      }

      if ((_prevChildren$current = prevChildren.current) !== null && _prevChildren$current !== void 0 && _prevChildren$current[child.key] && ( //Input
      ((_child$props$children = child.props.children) === null || _child$props$children === void 0 ? void 0 : (_child$props$children2 = _child$props$children.props) === null || _child$props$children2 === void 0 ? void 0 : _child$props$children2.value) !== ((_prevChildren$current2 = prevChildren.current) === null || _prevChildren$current2 === void 0 ? void 0 : (_prevChildren$current3 = _prevChildren$current2[child.key]) === null || _prevChildren$current3 === void 0 ? void 0 : _prevChildren$current3.value) || //Combobox
      ((_child$props$children3 = child.props.children) === null || _child$props$children3 === void 0 ? void 0 : (_child$props$children4 = _child$props$children3.props) === null || _child$props$children4 === void 0 ? void 0 : _child$props$children4.filterValue) !== ((_prevChildren$current4 = prevChildren.current) === null || _prevChildren$current4 === void 0 ? void 0 : (_prevChildren$current5 = _prevChildren$current4[child.key]) === null || _prevChildren$current5 === void 0 ? void 0 : _prevChildren$current5.filterValue) || //Checkbox
      ((_child$props$children5 = child.props.children) === null || _child$props$children5 === void 0 ? void 0 : (_child$props$children6 = _child$props$children5.props) === null || _child$props$children6 === void 0 ? void 0 : _child$props$children6.checked) !== ((_prevChildren$current6 = prevChildren.current) === null || _prevChildren$current6 === void 0 ? void 0 : (_prevChildren$current7 = _prevChildren$current6[child.key]) === null || _prevChildren$current7 === void 0 ? void 0 : _prevChildren$current7.checked) || //Selectable
      ((_child$props$children7 = child.props.children) === null || _child$props$children7 === void 0 ? void 0 : (_child$props$children8 = _child$props$children7.props) === null || _child$props$children8 === void 0 ? void 0 : (_child$props$children9 = _child$props$children8.children) === null || _child$props$children9 === void 0 ? void 0 : _child$props$children9.map(function (item) {
        return item.props.selected;
      }).join(',')) !== (prevChildren === null || prevChildren === void 0 ? void 0 : (_prevChildren$current8 = prevChildren.current) === null || _prevChildren$current8 === void 0 ? void 0 : (_prevChildren$current9 = _prevChildren$current8[child.key]) === null || _prevChildren$current9 === void 0 ? void 0 : (_prevChildren$current10 = _prevChildren$current9.children) === null || _prevChildren$current10 === void 0 ? void 0 : _prevChildren$current10.map(function (item) {
        return item.props.selected;
      }).join(',')))) {
        // @ts-ignore
        var _child$key = child.key;
            dialogRefs[_child$key];
            var rest = _objectWithoutProperties__default['default'](dialogRefs, [_child$key].map(_toPropertyKey__default['default']));

        setDialogRefs(rest);
      }

      prevChildren.current[child.key] = child.props.children.props;
      return /*#__PURE__*/React.cloneElement(child, _objectSpread__default['default'](_objectSpread__default['default']({}, childProps), {}, {
        children: _objectSpread__default['default'](_objectSpread__default['default']({}, child.props.children), {}, {
          props: _objectSpread__default['default'](_objectSpread__default['default']({}, child.props.children.props), filterItemProps),
          ref: function ref(node) {
            filterRefs.current[child.key] = node;
          }
        })
      }));
    });
  }, [filterContainerWidth, considerGroupName, dialogRefs, safeChildren, showFilterConfiguration]);
  var handleSearchValueChange = React.useCallback(function (newVal) {
    setSearchValue(newVal);
  }, [setSearchValue]);
  var handleRestoreFilters = React.useCallback(function (e, source) {
    if (source === 'dialog' && showGo) {
      setDialogOpen(false);
      setDialogOpen(true);
    } else if (source === 'filterBar' && showGoOnFB) {
      setMountFilters(false);
      setMountFilters(true);
    }

    if (onRestore) {
      onRestore(Utils.enrichEventWithDetails(e, {
        source: source
      }));
    }
  }, [setDialogOpen, showGo, showGoOnFB, onRestore]);
  var handleFBRestore = React.useCallback(function (e) {
    handleRestoreFilters(e, 'filterBar');
  }, [handleRestoreFilters]);
  var cssClasses = StyleClassHelper.StyleClassHelper.of(classes.outerContainer);

  if (className) {
    cssClasses.put(className);
  }

  if (filterContainerWidth) {
    cssClasses.put(classes.filterItemExpand);
  }

  React.useEffect(function () {
    var _search$props;

    prevSearchInputPropsValueRef.current = search === null || search === void 0 ? void 0 : (_search$props = search.props) === null || _search$props === void 0 ? void 0 : _search$props.value;
  }, [search === null || search === void 0 ? void 0 : (_search$props2 = search.props) === null || _search$props2 === void 0 ? void 0 : _search$props2.value]);
  var prevSearchInputPropsValue = prevSearchInputPropsValueRef.current;
  React.useEffect(function () {
    var _search$props3;

    if (prevSearchInputPropsValue !== (search === null || search === void 0 ? void 0 : (_search$props3 = search.props) === null || _search$props3 === void 0 ? void 0 : _search$props3.value)) {
      var _search$props4;

      setSearchValue(search === null || search === void 0 ? void 0 : (_search$props4 = search.props) === null || _search$props4 === void 0 ? void 0 : _search$props4.value);
    }
  }, [prevSearchInputPropsValue, search === null || search === void 0 ? void 0 : (_search$props5 = search.props) === null || _search$props5 === void 0 ? void 0 : _search$props5.value]);
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, dialogOpen && showFilterConfiguration && /*#__PURE__*/React__default['default'].createElement(FilterDialog, {
    filterBarRefs: filterRefs,
    open: dialogOpen,
    handleDialogClose: handleDialogClose,
    onGo: onGo,
    handleRestoreFilters: handleRestoreFilters,
    searchValue: (_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.children[0].value,
    handleSearchValueChange: handleSearchValueChange,
    showClearButton: showClearButton,
    showRestoreButton: showRestoreButton,
    showSearch: showSearchOnFiltersDialog,
    renderFBSearch: search,
    handleClearFilters: onFiltersDialogClear,
    handleSelectionChange: onFiltersDialogSelectionChange,
    handleDialogSave: handleDialogSave,
    showGoButton: showGo,
    handleDialogSearch: onFiltersDialogSearch,
    handleDialogCancel: onFiltersDialogCancel
  }, safeChildren()), /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    className: cssClasses.toString(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), loading ? /*#__PURE__*/React__default['default'].createElement(BusyIndicator$1.BusyIndicator, {
    active: true,
    className: classes.loadingContainer,
    size: BusyIndicatorSize.BusyIndicatorSize.Large
  }) : /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(Toolbar$1.Toolbar, {
    className: classes.filterBarHeader,
    toolbarStyle: ToolbarStyle.ToolbarStyle.Clear
  }, variants, search && /*#__PURE__*/React__default['default'].createElement(ToolbarSeparator$1.ToolbarSeparator, null), search && /*#__PURE__*/React__default['default'].createElement("div", {
    ref: searchRef
  }, renderSearchWithValue(search, searchValue)), useToolbar && /*#__PURE__*/React__default['default'].createElement(ToolbarSpacer$1.ToolbarSpacer, null), useToolbar && showClearOnFB && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
    onClick: onClear,
    design: ButtonDesign.ButtonDesign.Transparent
  }, clearText), useToolbar && showRestoreOnFB && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
    onClick: handleFBRestore,
    design: ButtonDesign.ButtonDesign.Transparent
  }, restoreText), useToolbar && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
    onClick: handleToggle,
    design: ButtonDesign.ButtonDesign.Transparent,
    className: classes.showFiltersBtn
  }, showFilters ? hideFilterBarText : showFilterBarText), useToolbar && showFilterConfiguration && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
    onClick: handleDialogOpen
  }, "".concat(filtersText).concat(activeFiltersCount && parseInt(activeFiltersCount) > 0 ? " (".concat(activeFiltersCount, ")") : '')), useToolbar && showGoOnFB && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
    onClick: onGo,
    design: ButtonDesign.ButtonDesign.Emphasized
  }, goText)), mountFilters && /*#__PURE__*/React__default['default'].createElement("div", {
    className: filterAreaClasses.valueOf()
  }, renderChildren()))));
});
FilterBar.defaultProps = {
  useToolbar: true,
  filterBarExpanded: true,
  showClearOnFB: false,
  showGo: false,
  showRestoreOnFB: false,
  showGoOnFB: false,
  showFilterConfiguration: false,
  showClearButton: false,
  showRestoreButton: false,
  showSearchOnFiltersDialog: false,
  considerGroupName: false,
  loading: false,
  onToggleFilters: null,
  onFiltersDialogOpen: null,
  onFiltersDialogCancel: null,
  onFiltersDialogClose: null,
  onFiltersDialogSave: null,
  onFiltersDialogClear: null,
  onClear: null,
  onFiltersDialogSelectionChange: null,
  onFiltersDialogSearch: null,
  onGo: null,
  onRestore: null
};
FilterBar.displayName = 'FilterBar';

var styles$d = {
  filterItem: {
    width: 'var(--_ui5_input_width)',
    marginRight: '1rem',
    marginBottom: '1rem'
  },
  filterItemDialog: {
    flexGrow: 1,
    overflow: 'hidden'
  },
  innerFilterItemContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'start'
  },
  innerFilterItemContainerDialog: {
    display: 'grid',
    gridTemplateColumns: '20% calc(80% - 1rem)',
    '@media(max-width:700px)': {
      gridTemplateColumns: '100%'
    },
    gridTemplateRows: 'auto',
    gridRowGap: '0px',
    gridColumnGap: '1rem',
    '& :first-child': {
      maxWidth: '100%',
      placeSelf: 'center end',
      '@media(max-width:700px)': {
        placeSelf: 'center start'
      }
    },
    '& :last-child': {
      placeSelf: 'center auto',
      width: '100%'
    }
  },
  loadingContainer: {
    display: 'flex',
    width: '100%',
    height: '1.625rem',
    justifyContent: 'center'
  }
};

var useStyles$h = reactJss.createUseStyles(styles$d, {
  name: 'FilterGroupItem'
});
var emptyObject = {};

/**
 * Represents a filter belonging to the `FilterBar`.
 */
var FilterGroupItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var classes = useStyles$h();
  var groupName = props.groupName,
      considerGroupName = props.considerGroupName,
      label = props.label,
      labelTooltip = props.labelTooltip,
      required = props.required,
      visible = props.visible,
      visibleInFilterBar = props.visibleInFilterBar,
      children = props.children,
      style = props.style,
      loading = props.loading,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      inFB = props.inFB;
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  var styleClasses = StyleClassHelper.StyleClassHelper.of(inFB ? classes.filterItem : classes.filterItemDialog);

  if (className) {
    styleClasses.put(className);
  }

  if (!required && (!visible || inFB && !visibleInFilterBar)) return null;
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    title: tooltip,
    slot: slot
  }, passThroughProps, {
    className: styleClasses.valueOf(),
    style: inFB ? style : emptyObject
  }), /*#__PURE__*/React__default['default'].createElement("div", {
    className: inFB ? classes.innerFilterItemContainer : classes.innerFilterItemContainerDialog
  }, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, null, /*#__PURE__*/React__default['default'].createElement(Label$1.Label, {
    tooltip: labelTooltip !== null && labelTooltip !== void 0 ? labelTooltip : label,
    required: required
  }, "".concat(considerGroupName && groupName !== 'default' ? "".concat(groupName, ": ") : '', "\n          ").concat(label))), loading ? /*#__PURE__*/React__default['default'].createElement(BusyIndicator$1.BusyIndicator, {
    className: classes.loadingContainer,
    active: true,
    size: BusyIndicatorSize.BusyIndicatorSize.Small
  }) : children));
});
FilterGroupItem.displayName = 'FilterGroupItem';
FilterGroupItem.defaultProps = {
  groupName: 'default',
  visible: true,
  required: false,
  label: ''
};

var styles$e = {
  flexBox: {
    display: 'flex'
  },
  fitContainer: {
    width: '100%',
    height: '100%'
  },
  flexBoxDisplayInline: {
    display: 'inline-flex'
  },
  justifyContentStart: {
    justifyContent: 'flex-start'
  },
  justifyContentEnd: {
    justifyContent: 'flex-end'
  },
  justifyContentCenter: {
    justifyContent: 'center'
  },
  justifyContentSpaceAround: {
    justifyContent: 'space-around'
  },
  justifyContentSpaceBetween: {
    justifyContent: 'space-between'
  },
  flexBoxDirectionColumn: {
    flexDirection: 'column'
  },
  flexBoxDirectionColumnReverse: {
    flexDirection: 'column-reverse'
  },
  flexBoxDirectionRow: {
    flexDirection: 'row'
  },
  flexBoxDirectionRowReverse: {
    flexDirection: 'row-reverse'
  },
  alignItemsStart: {
    alignItems: 'flex-start'
  },
  alignItemsEnd: {
    alignItems: 'flex-end'
  },
  alignItemsCenter: {
    alignItems: 'center'
  },
  alignItemsStretch: {
    alignItems: 'stretch'
  },
  alignItemsBaseline: {
    alignItems: 'baseline'
  },
  flexWrapNoWrap: {
    flexWrap: 'nowrap'
  },
  flexWrapWrap: {
    flexWrap: 'wrap'
  },
  flexWrapWrapReverse: {
    flexWrap: 'wrap-reverse'
  }
};

var useStyles$i = reactJss.createUseStyles(styles$e, {
  name: 'FlexBox'
});

/**
 * The `FlexBox` builds the container for a flexible box layout by leveraging the CSS flexbox layout.
 */
var FlexBox = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      justifyContent = props.justifyContent,
      direction = props.direction,
      alignItems = props.alignItems,
      displayInline = props.displayInline,
      wrap = props.wrap,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      fitContainer = props.fitContainer,
      slot = props.slot;
  var classes = useStyles$i();
  var flexBoxClasses = StyleClassHelper.StyleClassHelper.of(classes.flexBox); // direction

  flexBoxClasses.put(classes["flexBoxDirection".concat(direction)]); // justify content

  flexBoxClasses.put(classes["justifyContent".concat(justifyContent)]); // align items

  flexBoxClasses.put(classes["alignItems".concat(alignItems)]); // wrapping

  flexBoxClasses.put(classes["flexWrap".concat(wrap)]);

  if (displayInline) {
    flexBoxClasses.put(classes.flexBoxDisplayInline);
  }

  if (fitContainer) {
    flexBoxClasses.put(classes.fitContainer);
  }

  if (className) {
    flexBoxClasses.put(className);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    className: flexBoxClasses.valueOf(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), children);
});
FlexBox.defaultProps = {
  alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Stretch,
  direction: FlexBoxDirection.FlexBoxDirection.Row,
  displayInline: false,
  fitContainer: false,
  justifyContent: FlexBoxJustifyContent.FlexBoxJustifyContent.Start,
  wrap: FlexBoxWrap.FlexBoxWrap.NoWrap
};
FlexBox.displayName = 'FlexBox';

(function (FlexBoxAlignItems) {
  FlexBoxAlignItems["Start"] = "Start";
  FlexBoxAlignItems["Center"] = "Center";
  FlexBoxAlignItems["End"] = "End";
  FlexBoxAlignItems["Baseline"] = "Baseline";
  FlexBoxAlignItems["Stretch"] = "Stretch";
})(exports.FlexBoxAlignItems || (exports.FlexBoxAlignItems = {}));

(function (FlexBoxDirection) {
  FlexBoxDirection["Column"] = "Column";
  FlexBoxDirection["ColumnReverse"] = "ColumnReverse";
  FlexBoxDirection["Row"] = "Row";
  FlexBoxDirection["RowReverse"] = "RowReverse";
})(exports.FlexBoxDirection || (exports.FlexBoxDirection = {}));

(function (FlexBoxJustifyContent) {
  FlexBoxJustifyContent["Start"] = "Start";
  FlexBoxJustifyContent["Center"] = "Center";
  FlexBoxJustifyContent["End"] = "End";
  FlexBoxJustifyContent["SpaceAround"] = "SpaceAround";
  FlexBoxJustifyContent["SpaceBetween"] = "SpaceBetween";
})(exports.FlexBoxJustifyContent || (exports.FlexBoxJustifyContent = {}));

(function (FlexBoxWrap) {
  FlexBoxWrap["NoWrap"] = "NoWrap";
  FlexBoxWrap["Wrap"] = "Wrap";
  FlexBoxWrap["WrapReverse"] = "WrapReverse";
})(exports.FlexBoxWrap || (exports.FlexBoxWrap = {}));

/**
 * The `FlexibleColumnLayout` implements the master-detail-detail paradigm by displaying up to three pages in separate columns. There are several possible layouts that can be changed either with the component API, or by pressing the arrows, displayed between the columns.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/FlexibleColumnLayout" target="_blank">UI5 Web Components Playground</a>
 */
var FlexibleColumnLayout = withWebComponent$1.withWebComponent('ui5-flexible-column-layout', ['accessibilityTexts', 'layout'], ['noArrows'], ['endColumn', 'midColumn', 'startColumn'], ['layout-change']);
FlexibleColumnLayout.displayName = 'FlexibleColumnLayout';
FlexibleColumnLayout.defaultProps = {
  layout: FCLLayout.FCLLayout.OneColumn,
  noArrows: false
};

var labelSpanClasses = function labelSpanClasses() {
  var styleClasses = {};

  for (var i = 1; i <= 11; i++) {
    styleClasses["labelSpan".concat(i)] = {
      '--ui5wcr_form_content_span': 12 - i,
      '--ui5wcr_form_label_span': i
    };
  }

  return styleClasses;
};

var styles$f = _objectSpread__default['default'](_objectSpread__default['default']({
  form: {
    display: 'grid',
    alignItems: 'baseline',
    rowGap: '0.25rem',
    columnGap: '0.5rem',
    gridTemplateColumns: "repeat(12, 1fr)",
    '--ui5wcr_form_full_span': 'span 12',
    '--ui5wcr_form_label_text_align': 'end',
    '&[data-columns="1"]': {},
    '&[data-columns="2"]': {
      gridTemplateColumns: "repeat(24, 1fr)",
      '--ui5wcr_form_full_span': 'span 24'
    },
    '&[data-columns="3"]': {
      gridTemplateColumns: "repeat(36, 1fr)",
      '--ui5wcr_form_full_span': 'span 36'
    },
    '&[data-columns="4"]': {
      gridTemplateColumns: "repeat(48, 1fr)",
      '--ui5wcr_form_full_span': 'span 48'
    },
    '&[data-columns="5"]': {
      gridTemplateColumns: "repeat(60, 1fr)",
      '--ui5wcr_form_full_span': 'span 60'
    },
    '&[data-columns="6"]': {
      gridTemplateColumns: "repeat(72, 1fr)",
      '--ui5wcr_form_full_span': 'span 72'
    },
    '&[data-columns="7"]': {
      gridTemplateColumns: "repeat(84, 1fr)",
      '--ui5wcr_form_full_span': 'span 84'
    },
    '&[data-columns="8"]': {
      gridTemplateColumns: "repeat(96, 1fr)",
      '--ui5wcr_form_full_span': 'span 96'
    },
    '&[data-columns="9"]': {
      gridTemplateColumns: "repeat(108, 1fr)",
      '--ui5wcr_form_full_span': 'span 108'
    },
    '&[data-columns="10"]': {
      gridTemplateColumns: "repeat(120, 1fr)",
      '--ui5wcr_form_full_span': 'span 120'
    },
    '&[data-columns="11"]': {
      gridTemplateColumns: "repeat(132, 1fr)",
      '--ui5wcr_form_full_span': 'span 132'
    },
    '&[data-columns="12"]': {
      gridTemplateColumns: "repeat(144, 1fr)",
      '--ui5wcr_form_full_span': 'span 144'
    }
  },
  formTitle: {
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapGroup_TitleBorderColor),
    marginBottom: '1.75rem',
    gridColumn: 'var(--ui5wcr_form_full_span)'
  }
}, labelSpanClasses()), {}, {
  labelSpan12: {
    '--ui5wcr_form_content_span': 12,
    '--ui5wcr_form_label_text_align': 'start'
  }
});

var useStyles$j = reactJss.createUseStyles(styles$f, {
  name: 'Form'
});
/**
 * The `Form` component arranges labels and fields into groups and rows. There are different ways to visualize forms for different screen sizes.
 */

var Form = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var title = props.title,
      children = props.children,
      className = props.className,
      slot = props.slot,
      style = props.style,
      tooltip = props.tooltip,
      columnsS = props.columnsS,
      columnsM = props.columnsM,
      columnsL = props.columnsL,
      columnsXL = props.columnsXL,
      labelSpanS = props.labelSpanS,
      labelSpanM = props.labelSpanM,
      labelSpanL = props.labelSpanL,
      labelSpanXL = props.labelSpanXL;
  var columnsMap = new Map();
  columnsMap.set('Phone', columnsS);
  columnsMap.set('Tablet', columnsM);
  columnsMap.set('Desktop', columnsL);
  columnsMap.set('LargeDesktop', columnsXL);
  var labelSpanMap = new Map();
  labelSpanMap.set('Phone', labelSpanS);
  labelSpanMap.set('Tablet', labelSpanM);
  labelSpanMap.set('Desktop', labelSpanL);
  labelSpanMap.set('LargeDesktop', labelSpanXL);
  var formRef = hooks.useConsolidatedRef(ref); // use the window range set as first best guess

  var _useState = React.useState(Device.getCurrentRange('StdExt', window.innerWidth).name),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      currentRange = _useState2[0],
      setCurrentRange = _useState2[1];

  var lastRange = React.useRef(currentRange);
  React.useEffect(function () {
    var observer = new ResizeObserver(function (_ref) {
      var _ref2 = _slicedToArray__default['default'](_ref, 1),
          form = _ref2[0];

      var newRange = Device.getCurrentRange('StdExt', form.contentRect.width).name;

      if (lastRange.current !== newRange) {
        lastRange.current = newRange;
        setCurrentRange(newRange);
      }
    });

    if (formRef.current) {
      observer.observe(formRef.current);
    }

    return function () {
      observer.disconnect();
    };
  }, [formRef, setCurrentRange, lastRange]);
  var classes = useStyles$j();
  var currentNumberOfColumns = columnsMap.get(currentRange);
  var currentLabelSpan = labelSpanMap.get(currentRange);

  var _useMemo = React.useMemo(function () {
    var _props$title;

    var computedFormGroups = [];

    if (React.Children.count(children) === 1 && !title && ((_props$title = children.props.title) === null || _props$title === void 0 ? void 0 : _props$title.length) > 0) {
      return [/*#__PURE__*/React.cloneElement(children, {
        title: null
      }), children.props.title];
    }

    var currentColumnCount = currentNumberOfColumns;

    if (currentColumnCount === 1) {
      return [children, title];
    }

    var rows = [];
    var childrenArray = React.Children.toArray(children);
    var estimatedNumberOfGroupRows = childrenArray.length / currentColumnCount;

    for (var i = 0; i < estimatedNumberOfGroupRows; i++) {
      rows[i] = childrenArray.slice(i * currentColumnCount, i * currentColumnCount + currentColumnCount);
    }

    var maxRowsPerRow = [];
    rows.forEach(function (rowGroup, rowIndex) {
      var numberOfRowsOfEachForm = rowGroup.map(function (row) {
        if (row.type.displayName === 'FormItem') {
          return 1;
        }

        return React.Children.count(row.props.children) + 1;
      });
      maxRowsPerRow[rowIndex] = Math.max.apply(Math, _toConsumableArray__default['default'](numberOfRowsOfEachForm));
    });
    var totalRowCount = 2;
    rows.forEach(function (column, rowIndex) {
      var rowsForThisRow = maxRowsPerRow[rowIndex];
      column.forEach(function (cell, columnIndex) {
        var _cell$props;

        var titleStyles = {
          gridColumnEnd: 'span 12',
          gridColumnStart: columnIndex * 12 + 1,
          gridRowStart: totalRowCount,
          display: 'flex',
          alignItems: 'center',
          fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
          height: CssSizeVariables.CssSizeVariables.sapWcrFormGroupTitleHeight,
          lineHeight: CssSizeVariables.CssSizeVariables.sapWcrFormGroupTitleHeight,
          color: ThemingParameters.ThemingParameters.sapTextColor,
          fontSize: ThemingParameters.ThemingParameters.sapFontSize,
          fontWeight: 'bold',
          backgroundColor: ThemingParameters.ThemingParameters.sapGroup_TitleBackground,
          margin: 0,
          paddingTop: '1rem'
        };

        if (cell !== null && cell !== void 0 && (_cell$props = cell.props) !== null && _cell$props !== void 0 && _cell$props.title) {
          computedFormGroups.push( /*#__PURE__*/React__default['default'].createElement("h6", {
            style: titleStyles,
            title: cell.props.title,
            "aria-label": cell.props.title,
            key: "title-col-".concat(columnIndex, "-row-").concat(totalRowCount)
          }, cell.props.title));
        }

        for (var _i = 0; _i < rowsForThisRow; _i++) {
          var itemToRender = cell.type.displayName === 'FormGroup' ? React.Children.toArray(cell.props.children)[_i] : cell.type.displayName === 'FormItem' && _i === 0 ? cell : null;

          if (itemToRender) {
            computedFormGroups.push( /*#__PURE__*/React.cloneElement(itemToRender, {
              key: "col-".concat(columnIndex, "-row-").concat(totalRowCount + _i),
              columnIndex: columnIndex,
              lastGroupItem: cell.type.displayName === 'FormGroup' && rowsForThisRow - 2 === _i,
              rowIndex: totalRowCount + _i + 1,
              labelSpan: currentLabelSpan
            }));
          }
        }
      });
      totalRowCount += rowsForThisRow;

      if (rowsForThisRow === 1) {
        totalRowCount += 1;
      }
    });
    return [computedFormGroups, title];
  }, [children, currentRange, title, currentNumberOfColumns, currentLabelSpan]),
      _useMemo2 = _slicedToArray__default['default'](_useMemo, 2),
      formGroups = _useMemo2[0],
      updatedTitle = _useMemo2[1];

  var passThroughProps = hooks.usePassThroughHtmlProps(props);
  var formClassNames = StyleClassHelper.StyleClassHelper.of(classes.form).put(classes["labelSpan".concat((currentLabelSpan - 1) % 12 + 1)]).putIfPresent(className);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: formRef,
    slot: slot,
    className: formClassNames.valueOf(),
    title: tooltip,
    style: style,
    "data-columns": currentNumberOfColumns
  }, passThroughProps), updatedTitle && /*#__PURE__*/React__default['default'].createElement(Title$1.Title, {
    level: TitleLevel.TitleLevel.H3,
    className: classes.formTitle
  }, updatedTitle), formGroups);
});
Form.displayName = 'Form';
Form.defaultProps = {
  columnsS: 1,
  columnsM: 1,
  columnsL: 1,
  columnsXL: 2,
  labelSpanS: 12,
  labelSpanM: 2,
  labelSpanL: 4,
  labelSpanXL: 4
};

var useStyles$k = reactJss.createUseStyles({
  title: {
    gridColumn: 'span 12',
    display: 'flex',
    alignItems: 'center',
    height: CssSizeVariables.CssSizeVariables.sapWcrFormGroupTitleHeight,
    lineHeight: CssSizeVariables.CssSizeVariables.sapWcrFormGroupTitleHeight,
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    color: ThemingParameters.ThemingParameters.sapTextColor,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'bold',
    backgroundColor: ThemingParameters.ThemingParameters.sapGroup_TitleBackground,
    margin: 0,
    paddingTop: '1rem'
  },
  spacer: {
    height: '1rem',
    gridColumn: 'span 12'
  }
}, {
  name: 'FormGroup'
});
/**
 * The `FormGroup` encapsulates `FormItems` into groups.
 * __Note:__ `FormGroup` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `title` and `children`, especially no `className`, `style` or `ref`.
 */

var FormGroup = function FormGroup(props) {
  var title = props.title,
      children = props.children;
  var classes = useStyles$k();
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("h6", {
    className: classes.title,
    title: title,
    "aria-label": title
  }, title), children, /*#__PURE__*/React__default['default'].createElement("span", {
    className: classes.spacer
  }));
};

FormGroup.displayName = 'FormGroup';

var useStyles$l = reactJss.createUseStyles({
  label: {
    gridColumnEnd: 'span var(--ui5wcr_form_label_span)',
    justifySelf: 'var(--ui5wcr_form_label_text_align)',
    textAlign: 'var(--ui5wcr_form_label_text_align)'
  },
  content: {
    display: 'flex',
    gridColumnEnd: 'span var(--ui5wcr_form_content_span)'
  }
}, {
  name: 'FormItem'
});

var renderLabel = function renderLabel(label, classes, styles) {
  if (typeof label === 'string') {
    return /*#__PURE__*/React__default['default'].createElement(Label$1.Label, {
      className: classes.label,
      style: styles,
      wrap: true
    }, label ? "".concat(label, ":") : '');
  }

  if ( /*#__PURE__*/React.isValidElement(label)) {
    var _props$wrap, _props$className;

    return /*#__PURE__*/React.cloneElement(label, {
      wrap: (_props$wrap = label.props.wrap) !== null && _props$wrap !== void 0 ? _props$wrap : true,
      className: "".concat(classes.label, " ").concat((_props$className = label.props.className) !== null && _props$className !== void 0 ? _props$className : ''),
      style: _objectSpread__default['default']({
        gridColumnStart: styles.gridColumnStart,
        gridRowStart: styles.gridRowStart
      }, label.props.style || {})
    }, label.props.children ? // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    "".concat(label.props.children, ":") : '');
  }

  return null;
};
/**
 * The `FormItem` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `label` and `children`, especially no `className`, `style` or `ref`.
 */


var FormItem = function FormItem(props) {
  var _ref = props,
      label = _ref.label,
      children = _ref.children,
      columnIndex = _ref.columnIndex,
      rowIndex = _ref.rowIndex,
      labelSpan = _ref.labelSpan,
      lastGroupItem = _ref.lastGroupItem;
  var classes = useStyles$l();
  var gridColumnStart = (columnIndex !== null && columnIndex !== void 0 ? columnIndex : 0) * 12 + 1;
  var gridRowStart = rowIndex !== null && rowIndex !== void 0 ? rowIndex : 0;
  var contentGridColumnStart = columnIndex != null ? labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan !== null && labelSpan !== void 0 ? labelSpan : 0) : undefined;

  if (labelSpan === 12) {
    return /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
      direction: FlexBoxDirection.FlexBoxDirection.Column,
      alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Start,
      style: {
        gridColumnStart: gridColumnStart,
        gridRowStart: gridRowStart,
        gridColumnEnd: 'span 12',
        placeItems: 'flex-start'
      }
    }, renderLabel(label, classes, {}), children);
  }

  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, renderLabel(label, classes, {
    gridColumnStart: gridColumnStart,
    gridRowStart: gridRowStart
  }), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.content,
    style: {
      gridColumnStart: contentGridColumnStart,
      gridRowStart: labelSpan === 12 ? gridRowStart + 1 : gridRowStart,
      paddingBottom: lastGroupItem ? '1rem' : 0
    }
  }, children));
};

FormItem.displayName = 'FormItem';

(function (GlobalStyleClasses) {
  GlobalStyleClasses["sapScrollBar"] = "sapScrollBar";
})(exports.GlobalStyleClasses || (exports.GlobalStyleClasses = {}));

var generateGridSpans = function generateGridSpans() {
  var gridSpan = {};

  for (var i = 1; i <= 12; i++) {
    gridSpan["gridSpan".concat(i)] = _defineProperty__default['default']({
      gridColumn: "span ".concat(i)
    }, '-ms-grid-column-span', i);
  }

  return gridSpan;
};

var styles$g = _objectSpread__default['default'](_objectSpread__default['default']({
  grid: {
    display: 'grid',
    gridTemplateColumns: "repeat(12, 1fr)",
    '-ms-grid-columns': '(1fr)[12]'
  }
}, generateGridSpans()), {}, {
  positionCenter: {
    marginLeft: 'auto',
    marginRight: 'auto'
  },
  positionRight: {
    marginLeft: 'auto',
    marginRight: 0
  }
});

var INDENT_PATTERN = /*#__PURE__*/_wrapRegExp__default['default'](/^(XL([0-9]|1[0-2]))? ?(L([0-9]|1[0-2]))? ?(M([0-9]|1[0-2]))? ?(S([0-9]|1[0-2]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var SPAN_PATTERN = /*#__PURE__*/_wrapRegExp__default['default'](/^(XL([1-9]|1[0-2]))? ?(L([1-9]|1[0-2]))? ?(M([1-9]|1[0-2]))? ?(S([1-9]|1[0-2]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var DefaultSpanMap = new Map();
DefaultSpanMap.set('Phone', 1);
DefaultSpanMap.set('Tablet', 2);
DefaultSpanMap.set('Desktop', 4);
DefaultSpanMap.set('LargeDesktop', 4);
var DefaultIndentMap = new Map();
DefaultIndentMap.set('Phone', 0);
DefaultIndentMap.set('Tablet', 0);
DefaultIndentMap.set('Desktop', 0);
DefaultIndentMap.set('LargeDesktop', 0);

var getSpanFromString = function getSpanFromString(span, currentRange) {
  var _spanConfig$groups$cu;

  var spanConfig = SPAN_PATTERN.exec(span);
  return (_spanConfig$groups$cu = spanConfig === null || spanConfig === void 0 ? void 0 : spanConfig.groups[currentRange]) !== null && _spanConfig$groups$cu !== void 0 ? _spanConfig$groups$cu : DefaultSpanMap.get(currentRange);
};

var getIndentFromString = function getIndentFromString(indent, currentRange) {
  var _indentConfig$groups$;

  var indentConfig = INDENT_PATTERN.exec(indent);
  return (_indentConfig$groups$ = indentConfig === null || indentConfig === void 0 ? void 0 : indentConfig.groups[currentRange]) !== null && _indentConfig$groups$ !== void 0 ? _indentConfig$groups$ : DefaultIndentMap.get(currentRange);
};

var getIECellPlacement = function getIECellPlacement(col, row, span) {
  var colStart;
  var safeSpan = parseInt(span);
  var added = col + safeSpan;

  if (added <= 12) {
    colStart = col + 1;
    col = added;
  } else {
    colStart = 1;
    col = safeSpan;
    row++;
  }

  return [col, row, colStart];
};

var useStyles$m = reactJss.createUseStyles(styles$g, {
  name: 'Grid'
});
/**
 * A layout container component used for aligning items with various sizes in a simple grid.
 */

var Grid = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var position = props.position,
      children = props.children,
      hSpacing = props.hSpacing,
      vSpacing = props.vSpacing,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      defaultIndent = props.defaultIndent,
      defaultSpan = props.defaultSpan;
  var classes = useStyles$m();
  var currentRange = useViewportRange.useViewportRange('StdExt');
  var gridClasses = StyleClassHelper.StyleClassHelper.of(classes.grid);

  if (GridPosition.GridPosition.Center === position) {
    gridClasses.put(classes.positionCenter);
  }

  if (GridPosition.GridPosition.Right === position) {
    gridClasses.put(classes.positionRight);
  }

  if (className) {
    gridClasses.put(className);
  }

  var column = 0;
  var row = 1;
  var renderGridElements = React.useCallback(function (child) {
    var _child$props$dataLay, _child$props$dataLay2;

    if (!child) return null;
    var childSpan = getSpanFromString((_child$props$dataLay = child.props['data-layout-span']) !== null && _child$props$dataLay !== void 0 ? _child$props$dataLay : defaultSpan, currentRange);
    var childClass = classes["gridSpan".concat(childSpan)];
    var childrenWithGridLayout = [/*#__PURE__*/React__default['default'].createElement("div", {
      className: childClass
    }, child)];
    var indentSpan = getIndentFromString((_child$props$dataLay2 = child.props['data-layout-indent']) !== null && _child$props$dataLay2 !== void 0 ? _child$props$dataLay2 : defaultIndent, currentRange);

    if (indentSpan && indentSpan > 0) {
      childrenWithGridLayout.unshift( /*#__PURE__*/React__default['default'].createElement("span", {
        className: classes["gridSpan".concat(indentSpan)]
      }));
    }

    if (Device.isIE()) {
      return childrenWithGridLayout.map(function (item, index) {
        var colStart;

        if (childrenWithGridLayout.length === 2 && index === 0) {
          var _getIECellPlacement = getIECellPlacement(column, row, indentSpan);

          var _getIECellPlacement2 = _slicedToArray__default['default'](_getIECellPlacement, 3);

          column = _getIECellPlacement2[0];
          row = _getIECellPlacement2[1];
          colStart = _getIECellPlacement2[2];
          return /*#__PURE__*/React.cloneElement(item, {
            style: {
              marginRight: vSpacing,
              marginBottom: hSpacing,
              msGridRow: row,
              msGridColumn: colStart
            }
          });
        }

        var _getIECellPlacement3 = getIECellPlacement(column, row, childSpan);

        var _getIECellPlacement4 = _slicedToArray__default['default'](_getIECellPlacement3, 3);

        column = _getIECellPlacement4[0];
        row = _getIECellPlacement4[1];
        colStart = _getIECellPlacement4[2];
        return /*#__PURE__*/React.cloneElement(item, {
          style: {
            marginRight: vSpacing,
            marginBottom: hSpacing,
            msGridRow: row,
            msGridColumn: colStart
          }
        });
      });
    }

    return childrenWithGridLayout;
  }, [currentRange, defaultSpan, defaultIndent, classes, vSpacing, hSpacing]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    className: gridClasses.valueOf(),
    style: _objectSpread__default['default']({
      gridRowGap: vSpacing,
      gridColumnGap: hSpacing
    }, style),
    title: tooltip,
    slot: slot
  }, passThroughProps), React.Children.map(children, renderGridElements));
});
Grid.displayName = 'Grid';
Grid.defaultProps = {
  hSpacing: '1rem',
  vSpacing: '1rem',
  defaultIndent: 'XL0 L0 M0 S0',
  defaultSpan: 'XL3 L3 M6 S12'
};

(function (GridPosition) {
  GridPosition["Left"] = "Left";
  GridPosition["Center"] = "Center";
  GridPosition["Right"] = "Right";
})(exports.GridPosition || (exports.GridPosition = {}));

/**
 * The `GroupHeaderListItem` is a special list item, used only to separate other list items into logical groups
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/GroupHeaderListItem" target="_blank">UI5 Web Components Playground</a>
 */
var GroupHeaderListItem = withWebComponent$1.withWebComponent('ui5-li-groupheader', [], ['selected'], [], []);
GroupHeaderListItem.displayName = 'GroupHeaderListItem';
GroupHeaderListItem.defaultProps = {
  selected: false
};

/**
 * The `Icon` component represents an SVG icon. There are two main scenarios how the `Icon` component is used: as a purely decorative element; or as a visually appealing clickable area in the form of an icon button.
 *
 * A large set of built-in icons is available and they can be used by setting the `name` property on the `Icon`. But before using an icon, you need to import the desired icon.
 * For the standard icon collection, you have to import an icon from the `@ui5/webcomponents-icons` package:
 * `import "@ui5/webcomponents-icons/dist/employee.js";`
 * For the SAP Fiori Tools icon collection (supported since 1.0.0-rc.10), you have to import an icon from the `@ui5/webcomponents-icons-tnt` package:
 * `import "@ui5/webcomponents-icons-tnt/dist/antenna.js";`
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Icon" target="_blank">UI5 Web Components Playground</a>
 */
var Icon = withWebComponent$1.withWebComponent('ui5-icon', ['accessibleName', 'name'], ['interactive', 'showTooltip'], [], []);
Icon.displayName = 'Icon';
Icon.defaultProps = {
  interactive: false,
  showTooltip: false
};

/**
 * The `Input` component allows the user to enter and edit text or numeric values in one line.
 * Additionally, you can provide `suggestionItems`, that are displayed in a popover right under the input.
 *
 * The text field can be editable or read-only (`readonly` property), and it can be enabled or disabled (`enabled` property). To visualize semantic states, such as "error" or "warning", the `valueState` property is provided. When the user makes changes to the text, the change event is fired, which enables you to react on any text change.
 *
 * **Note:** If you are using the `Input` as a single npm module, don't forget to import the `InputSuggestions` module from "@ui5/webcomponents/dist/features/InputSuggestions.js" to enable the suggestions functionality.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Input" target="_blank">UI5 Web Components Playground</a>
 */
var Input = withWebComponent$1.withWebComponent('ui5-input', ['maxlength', 'name', 'placeholder', 'type', 'value', 'valueState'], ['disabled', 'highlight', 'readonly', 'required', 'showSuggestions'], ['icon', 'valueStateMessage'], ['change', 'input', 'submit', 'suggestion-item-preview', 'suggestion-item-select', 'suggestion-scroll']);
Input.displayName = 'Input';
Input.defaultProps = {
  disabled: false,
  highlight: false,
  readonly: false,
  required: false,
  showSuggestions: false,
  type: InputType.InputType.Text,
  valueState: ValueState.ValueState.None
};

(function (InputType) {
  InputType["Text"] = "Text";
  InputType["Email"] = "Email";
  InputType["Number"] = "Number";
  InputType["Password"] = "Password";
  InputType["Tel"] = "Tel";
  InputType["URL"] = "URL";
})(exports.InputType || (exports.InputType = {}));

/**
 * The `Label` is a component used to represent a label, providing valuable information to the user. Usually it is placed next to a value holder, such as a text field. It informs the user about what data is displayed or expected in the value holder.
 *
 * The `Label` appearance can be influenced by properties, such as `required` and `wrap`. The appearance of the Label can be configured in a limited way by using the design property. For a broader choice of designs, you can use custom styles.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Label" target="_blank">UI5 Web Components Playground</a>
 */
var Label = withWebComponent$1.withWebComponent('ui5-label', ['for'], ['required', 'showColon', 'wrap'], [], []);
Label.displayName = 'Label';
Label.defaultProps = {
  required: false,
  showColon: false,
  wrap: false
};

/**
 * The `Link` is a hyperlink component that is used to navigate to other apps and web pages, or to trigger actions. It is a clickable text element, visualized in such a way that it stands out from the standard text. On hover, it changes its style to an underlined text to provide additional feedback to the user.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Link" target="_blank">UI5 Web Components Playground</a>
 */
var Link = withWebComponent$1.withWebComponent('ui5-link', ['design', 'href', 'target'], ['disabled', 'wrap'], [], ['click']);
Link.displayName = 'Link';
Link.defaultProps = {
  design: LinkDesign.LinkDesign.Default,
  disabled: false,
  wrap: false
};

// introduced because of web components

(function (LinkDesign) {
  LinkDesign["Default"] = "Default";
  LinkDesign["Subtle"] = "Subtle";
  LinkDesign["Emphasized"] = "Emphasized";
})(exports.LinkDesign || (exports.LinkDesign = {}));

/**
 * The `List` component allows displaying a list of items, advanced keyboard handling support for navigating between items, and predefined modes to improve the development efficiency.
 *
 * The `List` is а container for the available list items:
 *
 * *   `StandardListItem`
 * *   `CustomListItem`
 * *   `GroupHeaderListItem`
 *
 *
 *
 * To benefit from the built-in selection mechanism, you can use the available selection modes, such as `SingleSelect`, `MultiSelect` and `Delete`.
 *
 * Additionally, the `List` provides header, footer, and customization for the list item separators.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/List" target="_blank">UI5 Web Components Playground</a>
 */
var List = withWebComponent$1.withWebComponent('ui5-list', ['footerText', 'headerText', 'mode', 'noDataText', 'separators'], ['busy', 'infiniteScroll', 'inset'], ['header'], ['item-click', 'item-close', 'item-delete', 'item-toggle', 'load-more', 'selection-change']);
List.displayName = 'List';
List.defaultProps = {
  busy: false,
  infiniteScroll: false,
  inset: false,
  mode: ListMode.ListMode.None,
  separators: ListSeparators.ListSeparators.All
};

(function (ListItemTypes) {
  ListItemTypes["Inactive"] = "Inactive";
  ListItemTypes["Active"] = "Active";
  ListItemTypes["Detail"] = "Detail";
})(exports.ListItemTypes || (exports.ListItemTypes = {}));

(function (ListMode) {
  ListMode["None"] = "None";
  ListMode["SingleSelect"] = "SingleSelect";
  ListMode["SingleSelectBegin"] = "SingleSelectBegin";
  ListMode["SingleSelectEnd"] = "SingleSelectEnd";
  ListMode["MultiSelect"] = "MultiSelect";
  ListMode["Delete"] = "Delete";
})(exports.ListMode || (exports.ListMode = {}));

// introduced because of web components

(function (ListSeparators) {
  ListSeparators["All"] = "All";
  ListSeparators["Inner"] = "Inner";
  ListSeparators["None"] = "None";
})(exports.ListSeparators || (exports.ListSeparators = {}));

var styles$h = {
  '@keyframes scroll': {
    '0%': {
      backgroundPosition: '-100% 0'
    },
    '100%': {
      backgroundPosition: '200% 0'
    }
  },
  loader: {
    height: '0.25rem',
    width: '100%',
    '&$loaderDeterminate': {
      background: "linear-gradient(to right, ".concat(ThemingParameters.ThemingParameters.sapContent_IconColor, ", ").concat(ThemingParameters.ThemingParameters.sapContent_IconColor, ")"),
      backgroundColor: 'rgba(8, 84, 160, 0.15)',
      backgroundRepeat: 'repeat-y'
    },
    '&$loaderIndeterminate': {
      background: "linear-gradient(\n      to right,\n      rgba(8, 84, 160, 0) 0px,\n      rgba(8, 84, 160, 1) calc(50% - 2rem),\n      ".concat(ThemingParameters.ThemingParameters.sapContent_IconColor, " calc(50% - 2rem),\n      ").concat(ThemingParameters.ThemingParameters.sapContent_IconColor, " calc(50% + 2rem),\n      rgba(8, 84, 160, 1) calc(50% + 2rem),\n      rgba(8, 84, 160, 0) 100%\n    )"),
      backgroundColor: 'rgba(8, 84, 160, 0.15)',
      backgroundSize: '40%',
      backgroundRepeat: 'repeat-y',
      animation: '$scroll 1.2s linear infinite'
    }
  },
  loaderDeterminate: {},
  loaderIndeterminate: {}
};

var useStyles$n = reactJss.createUseStyles(styles$h, {
  name: 'Loader'
});
/**
 * The `Loader` signals that an operation is currently being executed. It uses as little space as possible to allow the user to interact with the UI.<br />
 * It can be used to signal a data update on an already existing dataset, or where an expansion will happen.
 */

var Loader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var className = props.className,
      type = props.type,
      progress = props.progress,
      tooltip = props.tooltip,
      slot = props.slot,
      style = props.style,
      delay = props.delay;
  var classes = useStyles$n(props);

  var _useState = React.useState(delay === 0),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      isVisible = _useState2[0],
      setIsVisible = _useState2[1];

  var loaderClasses = StyleClassHelper.StyleClassHelper.of(classes.loader);

  if (className) {
    loaderClasses.put(className);
  }

  loaderClasses.put(classes["loader".concat(type)]);
  var inlineStyles = React.useMemo(function () {
    var backgroundSize = type !== LoaderType.LoaderType.Determinate ? '40%' : progress;
    return _objectSpread__default['default'](_objectSpread__default['default']({}, style), {}, {
      backgroundSize: backgroundSize
    });
  }, [progress, style, type]);
  React.useEffect(function () {
    var timeout;

    if (delay > 0) {
      timeout = setTimeout(function () {
        setIsVisible(true);
      }, delay);
    }

    return function () {
      clearTimeout(timeout);
    };
  }, []);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');

  if (!isVisible) {
    return null;
  }

  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    className: loaderClasses.valueOf(),
    "data-component-name": "Loader",
    "aria-busy": "true",
    role: "progressbar",
    title: tooltip || i18nBundle.getText(i18nDefaults.PLEASE_WAIT),
    slot: slot,
    style: inlineStyles
  }, passThroughProps));
});
Loader.defaultProps = {
  type: LoaderType.LoaderType.Indeterminate,
  progress: '0px',
  delay: 0
};
Loader.displayName = 'Loader';

(function (LoaderType) {
  LoaderType["Determinate"] = "Determinate";
  LoaderType["Indeterminate"] = "Indeterminate";
})(exports.LoaderType || (exports.LoaderType = {}));

var style = {
  messageBox: {
    '--sapContent_Shadow0': 'none'
  },
  header: {
    display: 'flex',
    height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight,
    textAlign: 'center',
    width: '100%',
    alignItems: 'center',
    padding: '0.25rem 1rem',
    boxSizing: 'border-box',
    borderBottom: "1px solid var(--messageBoxBorderColor)",
    color: ThemingParameters.ThemingParameters.sapContent_LabelColor,
    fontSize: '1rem',
    '& ui5-icon:first-child': {
      padding: '0 0.25rem',
      width: '1rem',
      height: '1rem'
    },
    '&[data-type="Error"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapErrorBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapErrorBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapNegativeElementColor
    },
    '&[data-type="Warning"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapWarningBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapWarningBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapCriticalElementColor
    },
    '&[data-type="Success"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapSuccessBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapSuccessBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapPositiveElementColor
    },
    '&[data-type="Confirm"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapNeutralBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapNeutralBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapNeutralElementColor
    },
    '&[data-type="Information"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapNeutralBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapNeutralBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapNeutralElementColor
    },
    '&[data-type="Highlight"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapInformationBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapInformationBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapInformativeElementColor
    }
  },
  content: {
    padding: '1rem'
  },
  footer: {
    height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight,
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: '0 0.5rem',
    '& > *': {
      margin: '0 0.25rem'
    },
    '& > ui5-button': {
      display: 'flex',
      minWidth: '4rem'
    }
  }
};

var useStyles$o = reactJss.createUseStyles(style, {
  name: 'MessageBox'
});
/**
 * The `MessageBox` component provides easier methods to create a `Dialog`, such as standard alerts, confirmation dialogs, or arbitrary message dialogs.
 * For convenience, it also provides an `open` prop, so it is not necessary to attach a `ref` to open the `MessageBox`.
 */

var MessageBox = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _actionTranslations;

  var open = props.open,
      type = props.type,
      children = props.children,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot,
      title = props.title,
      icon = props.icon,
      actions = props.actions,
      onClose = props.onClose;
  var dialogRef = hooks.useConsolidatedRef(ref);
  var classes = useStyles$o();
  var iconToRender = React.useMemo(function () {
    if ( /*#__PURE__*/React.isValidElement(icon)) return icon;

    switch (type) {
      case MessageBoxTypes.MessageBoxTypes.CONFIRM:
        return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
          name: "question-mark"
        });

      case MessageBoxTypes.MessageBoxTypes.ERROR:
        return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
          name: "message-error"
        });

      case MessageBoxTypes.MessageBoxTypes.INFORMATION:
        return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
          name: "message-information"
        });

      case MessageBoxTypes.MessageBoxTypes.SUCCESS:
        return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
          name: "message-success"
        });

      case MessageBoxTypes.MessageBoxTypes.WARNING:
        return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
          name: "message-warning"
        });

      case MessageBoxTypes.MessageBoxTypes.HIGHLIGHT:
        return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
          name: "hint"
        });

      default:
        return null;
    }
  }, [icon, type]);
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  var actionTranslations = (_actionTranslations = {}, _defineProperty__default['default'](_actionTranslations, MessageBoxActions.MessageBoxActions.ABORT, i18nBundle.getText(i18nDefaults.ABORT)), _defineProperty__default['default'](_actionTranslations, MessageBoxActions.MessageBoxActions.CANCEL, i18nBundle.getText(i18nDefaults.CANCEL)), _defineProperty__default['default'](_actionTranslations, MessageBoxActions.MessageBoxActions.CLOSE, i18nBundle.getText(i18nDefaults.CLOSE)), _defineProperty__default['default'](_actionTranslations, MessageBoxActions.MessageBoxActions.DELETE, i18nBundle.getText(i18nDefaults.DELETE)), _defineProperty__default['default'](_actionTranslations, MessageBoxActions.MessageBoxActions.IGNORE, i18nBundle.getText(i18nDefaults.IGNORE)), _defineProperty__default['default'](_actionTranslations, MessageBoxActions.MessageBoxActions.NO, i18nBundle.getText(i18nDefaults.NO)), _defineProperty__default['default'](_actionTranslations, MessageBoxActions.MessageBoxActions.OK, i18nBundle.getText(i18nDefaults.OK)), _defineProperty__default['default'](_actionTranslations, MessageBoxActions.MessageBoxActions.RETRY, i18nBundle.getText(i18nDefaults.RETRY)), _defineProperty__default['default'](_actionTranslations, MessageBoxActions.MessageBoxActions.YES, i18nBundle.getText(i18nDefaults.YES)), _actionTranslations);

  var titleToRender = function titleToRender() {
    if (title) {
      return title;
    }

    switch (type) {
      case MessageBoxTypes.MessageBoxTypes.CONFIRM:
        return i18nBundle.getText(i18nDefaults.CONFIRMATION);

      case MessageBoxTypes.MessageBoxTypes.ERROR:
        return i18nBundle.getText(i18nDefaults.ERROR);

      case MessageBoxTypes.MessageBoxTypes.INFORMATION:
        return i18nBundle.getText(i18nDefaults.INFORMATION);

      case MessageBoxTypes.MessageBoxTypes.SUCCESS:
        return i18nBundle.getText(i18nDefaults.SUCCESS);

      case MessageBoxTypes.MessageBoxTypes.WARNING:
        return i18nBundle.getText(i18nDefaults.WARNING);

      case MessageBoxTypes.MessageBoxTypes.HIGHLIGHT:
        return i18nBundle.getText(i18nDefaults.HIGHLIGHT);

      default:
        return null;
    }
  };

  var getActions = function getActions() {
    if (actions && actions.length > 0) {
      return actions;
    }

    if (type === MessageBoxTypes.MessageBoxTypes.CONFIRM) {
      return [MessageBoxActions.MessageBoxActions.OK, MessageBoxActions.MessageBoxActions.CANCEL];
    }

    if (type === MessageBoxTypes.MessageBoxTypes.ERROR) {
      return [MessageBoxActions.MessageBoxActions.CLOSE];
    }

    return [MessageBoxActions.MessageBoxActions.OK];
  };

  var handleOnClose = React.useCallback(function (e) {
    var action = e.target.dataset.action;
    stopPropagation(e);
    onClose(Utils.enrichEventWithDetails(e, {
      action: action
    }));
  }, [onClose]);
  React.useEffect(function () {
    if (dialogRef.current) {
      if (open) {
        var _dialogRef$current$op, _dialogRef$current;

        (_dialogRef$current$op = (_dialogRef$current = dialogRef.current).open) === null || _dialogRef$current$op === void 0 ? void 0 : _dialogRef$current$op.call(_dialogRef$current);
      } else {
        var _dialogRef$current$cl, _dialogRef$current2;

        (_dialogRef$current$cl = (_dialogRef$current2 = dialogRef.current).close) === null || _dialogRef$current$cl === void 0 ? void 0 : _dialogRef$current$cl.call(_dialogRef$current2);
      }
    }
  }, [dialogRef, open]);
  var passThroughProps = hooks.usePassThroughHtmlProps(props, ['onClose']);
  var messageBoxClassNames = StyleClassHelper.StyleClassHelper.of(classes.messageBox).putIfPresent(className).className;
  return /*#__PURE__*/React__default['default'].createElement(Dialog$1.Dialog, _extends__default['default']({
    slot: slot,
    ref: dialogRef,
    style: style,
    tooltip: tooltip,
    className: messageBoxClassNames,
    header: /*#__PURE__*/React__default['default'].createElement("header", {
      className: classes.header,
      "data-type": type
    }, iconToRender, /*#__PURE__*/React__default['default'].createElement(Title$1.Title, {
      level: TitleLevel.TitleLevel.H5
    }, titleToRender())),
    footer: /*#__PURE__*/React__default['default'].createElement("footer", {
      className: classes.footer
    }, getActions().map(function (action, index) {
      var _actionTranslations$a;

      return /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
        key: action,
        design: index === 0 ? ButtonDesign.ButtonDesign.Emphasized : ButtonDesign.ButtonDesign.Transparent,
        onClick: handleOnClose,
        "data-action": action
      }, (_actionTranslations$a = actionTranslations[action]) !== null && _actionTranslations$a !== void 0 ? _actionTranslations$a : action);
    })),
    onAfterClose: open ? handleOnClose : stopPropagation
  }, passThroughProps), /*#__PURE__*/React__default['default'].createElement(Text$1.Text, {
    className: classes.content
  }, children));
});
MessageBox.displayName = 'MessageBox';
MessageBox.defaultProps = {
  open: false,
  title: null,
  icon: null,
  type: MessageBoxTypes.MessageBoxTypes.CONFIRM,
  actions: []
};

(function (MessageBoxActions) {
  MessageBoxActions["ABORT"] = "Abort";
  MessageBoxActions["CANCEL"] = "Cancel";
  MessageBoxActions["CLOSE"] = "Close";
  MessageBoxActions["DELETE"] = "Delete";
  MessageBoxActions["IGNORE"] = "Ignore";
  MessageBoxActions["NO"] = "No";
  MessageBoxActions["OK"] = "OK";
  MessageBoxActions["RETRY"] = "Retry";
  MessageBoxActions["YES"] = "Yes";
})(exports.MessageBoxActions || (exports.MessageBoxActions = {}));

(function (MessageBoxTypes) {
  MessageBoxTypes["CONFIRM"] = "Confirm";
  MessageBoxTypes["ERROR"] = "Error";
  MessageBoxTypes["INFORMATION"] = "Information";
  MessageBoxTypes["SUCCESS"] = "Success";
  MessageBoxTypes["WARNING"] = "Warning";
  MessageBoxTypes["HIGHLIGHT"] = "Highlight";
})(exports.MessageBoxTypes || (exports.MessageBoxTypes = {}));

/**
 * The `MessageStrip` component enables the embedding of app-related messages. It displays 4 types of messages, each with corresponding semantic color and icon: Information, Positive, Warning and Negative. Each message can have a Close button, so that it can be removed from the UI, if needed.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/MessageStrip" target="_blank">UI5 Web Components Playground</a>
 */
var MessageStrip = withWebComponent$1.withWebComponent('ui5-messagestrip', ['type'], ['noCloseButton', 'noIcon'], ['icon'], ['close']);
MessageStrip.displayName = 'MessageStrip';
MessageStrip.defaultProps = {
  noCloseButton: false,
  noIcon: false,
  type: MessageStripType.MessageStripType.Information
};

(function (MessageStripType) {
  MessageStripType["Information"] = "Information";
  MessageStripType["Positive"] = "Positive";
  MessageStripType["Negative"] = "Negative";
  MessageStripType["Warning"] = "Warning";
})(exports.MessageStripType || (exports.MessageStripType = {}));

/**
 * The `MultiComboBox` component provides a list box with items and a text field allowing the user to either type a value directly into the control, or choose from the list of existing items. It is a drop-down list for selecting and filtering values, commonly used to enable users to select one or more options from a predefined list. The control provides an editable input field to filter the list, and a dropdown arrow of available options. The select options in the list have checkboxes that permit multi-selection. Entered values are displayed as tokens.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/MultiComboBox" target="_blank">UI5 Web Components Playground</a>
 */
var MultiComboBox = withWebComponent$1.withWebComponent('ui5-multi-combobox', ['filter', 'placeholder', 'value', 'valueState'], ['allowCustomValues', 'disabled', 'open', 'readonly', 'required'], ['icon', 'valueStateMessage'], ['change', 'input', 'open-change', 'selection-change']);
MultiComboBox.displayName = 'MultiComboBox';
MultiComboBox.defaultProps = {
  allowCustomValues: false,
  disabled: false,
  filter: 'StartsWithPerTerm',
  open: false,
  readonly: false,
  required: false,
  valueState: ValueState.ValueState.None
};

/**
 * The `MultiComboBoxItem` represents the item for a `MultiComboBox`
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/MultiComboBoxItem" target="_blank">UI5 Web Components Playground</a>
 */
var MultiComboBoxItem = withWebComponent$1.withWebComponent('ui5-mcb-item', ['stableDomRef', 'additionalText', 'text'], ['selected'], [], []);
MultiComboBoxItem.displayName = 'MultiComboBoxItem';
MultiComboBoxItem.defaultProps = {
  selected: false
};

/**
 * A `MultiInput` field allows the user to enter multiple values, which are displayed as `Token`. User can choose interaction for creating tokens. Fiori Guidelines say that user should create tokens when:
 *
 * *   Type a value in the input and press enter or focus out the input field (`onChange` event is fired)
 * *   Select a value from the suggestion list
 * (`onSuggestionItemSelect` event is fired)
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/MultiInput" target="_blank">UI5 Web Components Playground</a>
 */
var MultiInput = withWebComponent$1.withWebComponent('ui5-multi-input', ['maxlength', 'name', 'placeholder', 'type', 'value', 'valueState'], ['showValueHelpIcon', 'disabled', 'highlight', 'readonly', 'required', 'showSuggestions'], ['tokens', 'icon', 'valueStateMessage'], ['token-delete', 'value-help-trigger', 'change', 'input', 'submit', 'suggestion-item-preview', 'suggestion-item-select', 'suggestion-scroll']);
MultiInput.displayName = 'MultiInput';
MultiInput.defaultProps = {
  showValueHelpIcon: false,
  disabled: false,
  highlight: false,
  readonly: false,
  required: false,
  showSuggestions: false,
  type: InputType.InputType.Text,
  valueState: ValueState.ValueState.None
};

/**
 * The `NotificationAction` represents an abstract action, used in the `NotificationListItem` and the `NotificationListItemBase` items
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/NotificationAction" target="_blank">UI5 Web Components Playground</a>
 */
var NotificationAction = withWebComponent$1.withWebComponent('ui5-notification-action', ['design', 'icon', 'text'], ['disabled'], [], []);
NotificationAction.displayName = 'NotificationAction';
NotificationAction.defaultProps = {
  design: ButtonDesign.ButtonDesign.Transparent,
  disabled: false
};

/**
 * The `NotificationListGroupItem` is a special type of list item, that unlike others can group items within self, usually `NotificationListItem` items.
 * The component consists of:
 *
 * *   `Toggle` button to expand and collapse the group
 * *   `Priority` icon to display the priority of the group
 * *   `Heading` to entitle the group
 * *   Custom actions - with the use of `NotificationAction`
 * *   Items of the group
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/NotificationListGroupItem" target="_blank">UI5 Web Components Playground</a>
 */
var NotificationListGroupItem = withWebComponent$1.withWebComponent('ui5-li-notification-group', ['heading', 'priority'], ['collapsed', 'showCounter', 'busy', 'showClose', 'selected'], ['actions'], ['toggle', 'close']);
NotificationListGroupItem.displayName = 'NotificationListGroupItem';
NotificationListGroupItem.defaultProps = {
  collapsed: false,
  showCounter: false,
  busy: false,
  priority: Priority.Priority.None,
  showClose: false,
  selected: false
};

/**
 * The `NotificationListItem` is a type of list item, meant to display notifications.
 * The component has a rich set of various properties that allows the user to set `avatar`, `heading`, descriptive `content` and `footnotes` to fully describe a notification.
 * The user can:
 *
 * *   display a `Close` button
 * *   can control whether the `heading` and `description` should wrap or truncate and display a `ShowMore` button to switch between less and more information
 * *   add custom actions by using the `NotificationAction` component
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/NotificationListItem" target="_blank">UI5 Web Components Playground</a>
 */
var NotificationListItem = withWebComponent$1.withWebComponent('ui5-li-notification', ['heading', 'priority'], ['read', 'wrap', 'busy', 'showClose', 'selected'], ['avatar', 'footnotes', 'actions'], ['close']);
NotificationListItem.displayName = 'NotificationListItem';
NotificationListItem.defaultProps = {
  read: false,
  wrap: false,
  busy: false,
  priority: Priority.Priority.None,
  showClose: false,
  selected: false
};

var styles$i = {
  base: {
    margin: 'var(--_ui5wcr_ObjectPage_avatar_margin)',
    // defined in ObjectPage JSS
    opacity: 0
  },
  hidden: {
    opacity: 0
  },
  visible: {
    transition: 'opacity 0.5s',
    opacity: 1
  },
  imageContainer: {
    display: 'inline-block',
    verticalAlign: 'middle',
    maxHeight: '3rem',
    width: '3rem',
    maxWidth: '3rem'
  },
  image: {
    width: '100%',
    height: '100%'
  }
};
var useStyles$p = reactJss.createUseStyles(styles$i, {
  name: 'CollapsedAvatar'
});
var CollapsedAvatar = function CollapsedAvatar(props) {
  var image = props.image,
      imageShapeCircle = props.imageShapeCircle;
  var classes = useStyles$p();

  var _useState = React.useState(false),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      isMounted = _useState2[0],
      setIsMounted = _useState2[1];

  var domRef = React.useRef();
  var avatarContent = React.useMemo(function () {
    if (!image) return null;

    if (typeof image === 'string') {
      return /*#__PURE__*/React__default['default'].createElement("span", {
        className: classes.imageContainer,
        style: {
          borderRadius: imageShapeCircle ? '50%' : 0,
          overflow: 'hidden'
        }
      }, /*#__PURE__*/React__default['default'].createElement("img", {
        className: classes.image,
        src: image,
        alt: "Object Page Image"
      }));
    } else {
      var _image$props, _image$props2;

      return /*#__PURE__*/React__default['default'].cloneElement(image, {
        size: AvatarSize.AvatarSize.S,
        // @ts-ignore
        className: (_image$props = image.props) !== null && _image$props !== void 0 && _image$props.className ? "".concat(classes.imageContainer, " ").concat((_image$props2 = image.props) === null || _image$props2 === void 0 ? void 0 : _image$props2.className) : classes.imageContainer
      });
    }
  }, [image, imageShapeCircle]);
  React.useEffect(function () {
    setIsMounted(true);
  }, []);
  var containerClasses = StyleClassHelper.StyleClassHelper.of(classes.base);

  if (isMounted) {
    containerClasses.put(classes.visible);
  } else {
    containerClasses.put(classes.hidden);
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    ref: domRef,
    className: containerClasses.valueOf()
  }, avatarContent);
};

var _objectPage, _globalHtml, _globalDirRtl;
var ObjectPageCssVariables = {
  anchorFloat: '--_ui5wcr_ObjectPage_actions_float',
  anchorLeft: '--_ui5wcr_ObjectPage_actions_left',
  anchorRight: '--_ui5wcr_ObjectPage_actions_right',
  avatarMargin: '--_ui5wcr_ObjectPage_avatar_margin',
  lastSectionMargin: '--_ui5wcr_ObjectPage_last_section_margin_bottom'
};
var styles$j = {
  objectPage: (_objectPage = {
    width: '100%',
    height: '100%',
    maxHeight: '100vh',
    position: 'relative',
    whiteSpace: 'normal',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    backgroundColor: ThemingParameters.ThemingParameters.sapBackgroundColor,
    overflowX: 'hidden',
    overflowY: 'auto'
  }, _defineProperty__default['default'](_objectPage, ObjectPageCssVariables.lastSectionMargin, 0), _defineProperty__default['default'](_objectPage, '& section[id*="ObjectPageSection-"] > div[role="heading"]', {
    display: 'none'
  }), _defineProperty__default['default'](_objectPage, '& section[id*="ObjectPageSection-"] ~ section[id*="ObjectPageSection-"] > div[role="heading"]', {
    display: 'block'
  }), _defineProperty__default['default'](_objectPage, '& section[data-component-name="ObjectPageSection"]:last-child', {
    marginBottom: "var(".concat(ObjectPageCssVariables.lastSectionMargin, ")")
  }), _objectPage),
  '@global html': (_globalHtml = {}, _defineProperty__default['default'](_globalHtml, ObjectPageCssVariables.anchorFloat, 'right'), _defineProperty__default['default'](_globalHtml, ObjectPageCssVariables.anchorRight, '1.25rem'), _defineProperty__default['default'](_globalHtml, ObjectPageCssVariables.anchorLeft, 'unset'), _defineProperty__default['default'](_globalHtml, ObjectPageCssVariables.avatarMargin, '0 1rem 0 0'), _globalHtml),
  '@global [dir="rtl"]': (_globalDirRtl = {}, _defineProperty__default['default'](_globalDirRtl, ObjectPageCssVariables.anchorFloat, 'left'), _defineProperty__default['default'](_globalDirRtl, ObjectPageCssVariables.anchorRight, 'unset'), _defineProperty__default['default'](_globalDirRtl, ObjectPageCssVariables.anchorLeft, '1.25rem'), _defineProperty__default['default'](_globalDirRtl, ObjectPageCssVariables.avatarMargin, '0 0 0 1rem'), _globalDirRtl),
  iconTabBarMode: {
    '& section[data-component-name="ObjectPageSection"] > div[role="heading"]': {
      display: 'none'
    }
  },
  noHeader: {
    '& $header': {
      display: 'none'
    },
    '& $contentHeader': {
      display: 'none'
    }
  },
  headerCollapsed: {
    '& $contentHeader': {
      display: 'none'
    }
  },
  // header
  header: {
    flexShrink: 0,
    backgroundColor: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    position: 'sticky',
    top: 0,
    zIndex: 2
  },
  iEClass: {
    position: 'fixed',
    width: 'calc(100% - 18px)'
  },
  iEClassHeader: {
    width: 'calc(100% - 18px - 2rem)'
  },
  iEBackgroundElement: {
    position: 'fixed',
    backgroundColor: ThemingParameters.ThemingParameters.sapObjectHeader_Background
  },
  contentHeader: {
    backgroundColor: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    position: 'sticky',
    paddingBottom: '0.25rem',
    maxHeight: '500px',
    overflow: 'hidden',
    paddingLeft: '2rem'
  },
  anchorBar: {
    position: 'sticky',
    zIndex: 2,
    '--_ui5_tc_header_box_shadow': 'inset 0px -1px 0 0px rgba(0,0,0,0.15)'
  },
  titleBar: {
    padding: '0.5rem 2rem',
    display: 'block',
    position: 'relative'
  },
  container: {
    flex: '1 1 70%',
    boxSizing: 'border-box'
  },
  title: {
    padding: '0.3125rem 0 0 0'
  },
  subTitle: {
    verticalAlign: 'baseline',
    padding: '0 0 0.5rem 0.5rem'
  },
  actions: {
    position: 'absolute',
    top: '0',
    paddingTop: '0.75rem',
    zIndex: 1,
    right: "var(".concat(ObjectPageCssVariables.anchorRight, ")"),
    left: "var(".concat(ObjectPageCssVariables.anchorLeft, ")"),
    display: 'inline-block',
    "float": "var(".concat(ObjectPageCssVariables.anchorFloat, ")"),
    verticalAlign: 'top',
    '& > *': {
      marginLeft: '0.5rem',
      padding: 0
    }
  },
  titleInHeaderContent: {
    '& $subTitle': {
      padding: '0.5rem 0'
    },
    '& $keyInfos': {
      alignSelf: 'unset'
    },
    '& contentHeader': {
      paddingTop: 0,
      '& > *': {
        display: 'flex',
        verticalAlign: 'top',
        '&:not(:first-child)': {
          marginRight: '2rem',
          marginBottom: '1rem'
        }
      }
    }
  },
  headerCustomContent: {
    display: 'inline-block',
    verticalAlign: 'top',
    '& > *': {
      "float": 'left',
      marginRight: '2rem',
      marginBottom: '1rem',
      lineHeight: '1.5rem'
    },
    '&:after': {
      clear: 'both'
    }
  },
  headerCustomContentItem: {
    marginLeft: '1rem'
  },
  headerImage: {
    minWidth: '5rem',
    maxWidth: '5rem',
    maxHeight: '5rem',
    display: 'inline-block',
    marginRight: '2rem',
    marginBottom: '1rem'
  },
  image: {
    width: '100%',
    height: '100%'
  },
  keyInfos: {
    '& > *': {
      marginLeft: '1rem'
    },
    display: 'flex',
    flexDirection: 'row',
    alignSelf: 'center'
  },
  avatar: {
    margin: "var(".concat(ObjectPageCssVariables.avatarMargin, ")")
  }
};

/**
 * The `StandardListItem` represents the simplest type of item for a `StandardListItemst`. This is a list item, providing the most common use cases such as `text`, `image` and `icon`
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/StandardListItem" target="_blank">UI5 Web Components Playground</a>
 */
var StandardListItem = withWebComponent$1.withWebComponent('ui5-li', ['description', 'icon', 'image', 'info', 'infoState', 'type'], ['iconEnd', 'selected'], [], ['detail-click']);
StandardListItem.displayName = 'StandardListItem';
StandardListItem.defaultProps = {
  iconEnd: false,
  infoState: ValueState.ValueState.None,
  type: ListItemTypes.ListItemTypes.Active,
  selected: false
};

var ObjectPageAnchorButton = function ObjectPageAnchorButton(props) {
  var ref = React.useRef();
  var section = props.section,
      index = props.index,
      selected = props.selected,
      onShowSubSectionPopover = props.onShowSubSectionPopover;
  var subSectionsAvailable = false;

  if (section.props.children && section.props.children.filter) {
    var subSections = section.props.children.filter(function (item) {
      return item.props && item.props.isSubSection;
    });
    subSectionsAvailable = subSections.length > 0;
  }

  React.useEffect(function () {
    if (subSectionsAvailable) {
      try {
        var _ref$current, _ref$current$parentEl, _ref$current$parentEl2;

        var element = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : (_ref$current$parentEl = _ref$current.parentElement) === null || _ref$current$parentEl === void 0 ? void 0 : (_ref$current$parentEl2 = _ref$current$parentEl.shadowRoot) === null || _ref$current$parentEl2 === void 0 ? void 0 : _ref$current$parentEl2.querySelector(".ui5-tc__headerList li[aria-posinset=\"".concat(index + 1, "\"] .ui5-tab-strip-itemContent"));

        if (element && !element.querySelector('ui5-icon')) {
          var icon = document.createElement('ui5-icon');
          icon.name = 'slim-arrow-down';
          icon.style.verticalAlign = 'text-bottom';
          icon.style.pointerEvents = 'all';
          icon.addEventListener('click', function (e) {
            e.stopImmediatePropagation();
            e.preventDefault();
            e.stopPropagation();
            onShowSubSectionPopover(e, section);
          });
          element.appendChild(icon);
        }
      } catch (e) {// empty catch block, mainly required for tests
      }
    }
  }, [subSectionsAvailable, ref, onShowSubSectionPopover, section]);
  return /*#__PURE__*/React__default['default'].createElement(Tab$1.Tab, {
    ref: ref,
    "data-index": index,
    "data-section-id": section.props.id,
    text: section.props.title,
    selected: selected
  });
};

var safeGetChildrenArray = function safeGetChildrenArray(children) {
  return React.Children.toArray(children).filter(Boolean);
};
var getSectionById = function getSectionById(sections, id) {
  return safeGetChildrenArray(sections).find(function (objectPageSection) {
    var _objectPageSection$pr;

    return ((_objectPageSection$pr = objectPageSection.props) === null || _objectPageSection$pr === void 0 ? void 0 : _objectPageSection$pr.id) === id;
  });
};
var extractSectionIdFromHtmlId = function extractSectionIdFromHtmlId(id) {
  return id.replace(/^ObjectPageSection-/, '');
};
var getLastObjectPageSection = function getLastObjectPageSection(ref) {
  var _ref$current;

  var sections = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelectorAll('[id^="ObjectPageSection"]');

  if (!sections || sections.length < 1) {
    return null;
  }

  return sections[sections.length - 1];
};

Theming.addCustomCSS('ui5-button', "\n  :host([data-ui5wcr-object-page-header-action]){\n    width: 1.375rem;\n    height: 1.375rem;\n    min-width: 1.375rem;\n  }\n  :host([data-ui5wcr-object-page-header-action]) .ui5-button-root {\n    padding: 0;\n  }");
Theming.addCustomCSS('ui5-togglebutton', "\n  :host([data-ui5wcr-object-page-header-action]){\n    width: 1.375rem;\n    height: 1.375rem;\n    min-width: 1.375rem;\n  }\n  :host([data-ui5wcr-object-page-header-action]) .ui5-button-root {\n    padding: 0;\n  }");
var anchorBarStyles$1 = {
  anchorBarActionButton: {
    position: 'absolute',
    top: "-0.6875rem",
    marginLeft: "-0.6875rem",
    left: '50%',
    '&:before, &:after': {
      content: '""',
      position: 'absolute',
      width: '4rem',
      top: '50%',
      height: '0.0625rem'
    },
    '&:before': {
      right: '100%',
      backgroundImage: "linear-gradient(to left, ".concat(ThemingParameters.ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))")
    },
    '&:after': {
      backgroundImage: "linear-gradient(to right, ".concat(ThemingParameters.ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))"),
      left: '100%'
    }
  },
  anchorBarActionButtonExpandable: {},
  anchorBarActionButtonPinnable: {},
  anchorBarActionPinnableAndExandable: {
    '&$anchorBarActionButtonPinnable': {
      marginLeft: '0.25rem',
      '&:before': {
        backgroundImage: 'none'
      }
    },
    '&$anchorBarActionButtonExpandable': {
      marginLeft: '-1.75rem'
    }
  }
};
var useStyles$q = reactJss.createUseStyles(anchorBarStyles$1, {
  name: 'ObjectPageAnchorBar'
});
var ObjectPageAnchorBar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _popoverContent$props;

  var sections = props.sections,
      selectedSectionId = props.selectedSectionId,
      handleOnSectionSelected = props.handleOnSectionSelected,
      handleOnSubSectionSelected = props.handleOnSubSectionSelected,
      showHideHeaderButton = props.showHideHeaderButton,
      headerContentPinnable = props.headerContentPinnable,
      onToggleHeaderContentVisibility = props.onToggleHeaderContentVisibility,
      headerPinned = props.headerPinned,
      setHeaderPinned = props.setHeaderPinned,
      headerContentHeight = props.headerContentHeight,
      style = props.style,
      className = props.className;
  var classes = useStyles$q();
  var shouldRenderHideHeaderButton = showHideHeaderButton;
  var shouldRenderHeaderPinnableButton = headerContentPinnable && headerContentHeight > 0;
  var showBothActions = shouldRenderHeaderPinnableButton && shouldRenderHideHeaderButton;

  var _useState = React.useState(null),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      popoverContent = _useState2[0],
      setPopoverContent = _useState2[1];

  var popoverRef = React.useRef(null);
  var onPinHeader = React.useCallback(function (e) {
    setHeaderPinned(e.target.pressed);
  }, [setHeaderPinned]);
  var onTabItemSelect = React.useCallback(function (event) {
    var _event$detail$tab$dat = event.detail.tab.dataset,
        sectionId = _event$detail$tab$dat.sectionId,
        index = _event$detail$tab$dat.index; // eslint-disable-next-line eqeqeq

    var section = safeGetChildrenArray(sections).find(function (el) {
      return el.props.id == sectionId;
    });
    handleOnSectionSelected(Utils.enrichEventWithDetails({}, _objectSpread__default['default'](_objectSpread__default['default']({}, section), {}, {
      index: index
    })));
  }, [sections]);
  var onShowSubSectionPopover = React.useCallback(function (e, section) {
    setPopoverContent(section);
    popoverRef.current.openBy(e.target.parentElement);
  }, [setPopoverContent, popoverRef]);
  var onSubSectionClick = React.useCallback(function (e) {
    var selectedId = e.detail.item.dataset.key;
    var subSection = popoverContent.props.children.filter(function (item) {
      return item.props && item.props.isSubSection;
    }).find(function (item) {
      return item.props.id === selectedId;
    });

    if (subSection) {
      handleOnSubSectionSelected(Utils.enrichEventWithDetails(e, {
        section: popoverContent,
        subSection: subSection
      }));
    }

    popoverRef.current.close();
  }, [handleOnSubSectionSelected, popoverRef, popoverContent]);
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  return /*#__PURE__*/React__default['default'].createElement("section", {
    className: className,
    role: "navigation",
    style: style,
    ref: ref
  }, /*#__PURE__*/React__default['default'].createElement(TabContainer$1.TabContainer, {
    collapsed: true,
    fixed: true,
    onTabSelect: onTabItemSelect,
    showOverflow: true
  }, safeGetChildrenArray(sections).map(function (section, index) {
    var _section$props, _section$props2;

    return /*#__PURE__*/React__default['default'].createElement(ObjectPageAnchorButton, {
      key: "Anchor-".concat((_section$props = section.props) === null || _section$props === void 0 ? void 0 : _section$props.id),
      section: section,
      index: index,
      selected: selectedSectionId === ((_section$props2 = section.props) === null || _section$props2 === void 0 ? void 0 : _section$props2.id),
      onShowSubSectionPopover: onShowSubSectionPopover
    });
  })), shouldRenderHideHeaderButton && /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
    icon: headerContentHeight === 0 ? 'slim-arrow-down' : 'slim-arrow-up',
    onClick: onToggleHeaderContentVisibility,
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonExpandable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExandable : ''),
    "data-ui5wcr-object-page-header-action": "",
    tooltip: i18nBundle.getText(headerContentHeight === 0 ? i18nDefaults.EXPAND_HEADER : i18nDefaults.COLLAPSE_HEADER),
    "aria-label": i18nBundle.getText(headerContentHeight === 0 ? i18nDefaults.EXPAND_HEADER : i18nDefaults.COLLAPSE_HEADER)
  }), shouldRenderHeaderPinnableButton && /*#__PURE__*/React__default['default'].createElement(ToggleButton$1.ToggleButton, {
    icon: "pushpin-off",
    pressed: headerPinned,
    onClick: onPinHeader,
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonPinnable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExandable : ''),
    "data-ui5wcr-object-page-header-action": "",
    tooltip: i18nBundle.getText(headerPinned ? i18nDefaults.UNPIN_HEADER : i18nDefaults.PIN_HEADER),
    "aria-label": i18nBundle.getText(headerPinned ? i18nDefaults.UNPIN_HEADER : i18nDefaults.PIN_HEADER)
  }), /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default['default'].createElement(Popover$1.Popover, {
    placementType: PlacementType.PlacementType.Bottom,
    noArrow: true,
    ref: popoverRef,
    onAfterClose: stopPropagation
  }, /*#__PURE__*/React__default['default'].createElement(List$1.List, {
    onItemClick: onSubSectionClick
  }, popoverContent === null || popoverContent === void 0 ? void 0 : (_popoverContent$props = popoverContent.props) === null || _popoverContent$props === void 0 ? void 0 : _popoverContent$props.children.filter(function (item) {
    return item.props && item.props.isSubSection;
  }).map(function (item) {
    return /*#__PURE__*/React__default['default'].createElement(StandardListItem, {
      key: item.props.id,
      "data-key": item.props.id
    }, item.props.title);
  }))), document.body));
});
ObjectPageAnchorBar.displayName = 'ObjectPageAnchorBar';

var ObjectPageHeader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var image = props.image,
      classes = props.classes,
      imageShapeCircle = props.imageShapeCircle,
      showTitleInHeaderContent = props.showTitleInHeaderContent,
      headerContentProp = props.headerContentProp,
      breadcrumbs = props.breadcrumbs,
      title = props.title,
      subTitle = props.subTitle,
      keyInfos = props.keyInfos,
      headerPinned = props.headerPinned,
      topHeaderHeight = props.topHeaderHeight,
      headerActions = props.headerActions;
  var avatar = React.useMemo(function () {
    if (!image) {
      return null;
    }

    if (typeof image === 'string') {
      return /*#__PURE__*/React__default['default'].createElement("span", {
        className: classes.headerImage,
        style: {
          borderRadius: imageShapeCircle ? '50%' : 0,
          overflow: 'hidden'
        }
      }, /*#__PURE__*/React__default['default'].createElement("img", {
        src: image,
        className: classes.image,
        alt: "Company Logo"
      }));
    } else {
      var _image$props, _image$props2;

      return /*#__PURE__*/React__default['default'].cloneElement(image, {
        size: AvatarSize.AvatarSize.L,
        className: (_image$props = image.props) !== null && _image$props !== void 0 && _image$props.className ? "".concat(classes.headerImage, " ").concat((_image$props2 = image.props) === null || _image$props2 === void 0 ? void 0 : _image$props2.className) : classes.headerImage
      });
    }
  }, [image, classes.headerImage, classes.image, imageShapeCircle]);
  var headerStyles = React.useMemo(function () {
    if (headerPinned || Device.isIE()) {
      return {
        top: "".concat(topHeaderHeight, "px"),
        zIndex: 1
      };
    }

    return null;
  }, [headerPinned, topHeaderHeight]);
  var renderedHeaderContent = /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, avatar, headerContentProp && /*#__PURE__*/React__default['default'].createElement("span", {
    className: classes.headerCustomContent
  }, headerContentProp));

  if (showTitleInHeaderContent) {
    var firstElement;
    var contents = [];

    if ((headerContentProp === null || headerContentProp === void 0 ? void 0 : headerContentProp.type) === React__default['default'].Fragment) {
      var _safeGetChildrenArray = safeGetChildrenArray(headerContentProp.props.children);

      var _safeGetChildrenArray2 = _toArray__default['default'](_safeGetChildrenArray);

      firstElement = _safeGetChildrenArray2[0];
      contents = _safeGetChildrenArray2.slice(1);
    } else {
      firstElement = headerContentProp;
    }

    renderedHeaderContent = /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, null, avatar, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
      direction: FlexBoxDirection.FlexBoxDirection.Column
    }, /*#__PURE__*/React__default['default'].createElement("div", null, breadcrumbs), /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, null, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
      direction: FlexBoxDirection.FlexBoxDirection.Column
    }, /*#__PURE__*/React__default['default'].createElement(Title$1.Title, {
      level: TitleLevel.TitleLevel.H3,
      className: classes.title
    }, title), /*#__PURE__*/React__default['default'].createElement(Label$1.Label, {
      className: classes.subTitle
    }, subTitle), /*#__PURE__*/React__default['default'].createElement("span", null, " ", firstElement)), /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, null, contents.map(function (c, index) {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        key: "customContent-".concat(index),
        className: classes.headerCustomContentItem
      }, c);
    })), /*#__PURE__*/React__default['default'].createElement("div", {
      className: classes.keyInfos
    }, keyInfos))), /*#__PURE__*/React__default['default'].createElement(Toolbar$1.Toolbar, {
      toolbarStyle: ToolbarStyle.ToolbarStyle.Clear,
      design: ToolbarDesign.ToolbarDesign.Transparent
    }, /*#__PURE__*/React__default['default'].createElement(ToolbarSpacer$1.ToolbarSpacer, null), headerActions)));
  }

  var headerClasses = StyleClassHelper.StyleClassHelper.of(classes.contentHeader);

  if (Device.isIE()) {
    headerClasses.put(classes.iEClass);
    headerClasses.put(classes.iEClassHeader);
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    style: headerStyles,
    className: headerClasses.className,
    ref: ref
  }, renderedHeaderContent);
});
ObjectPageHeader.displayName = 'ObjectPageHeader';

var SCROLL_BAR_WIDTH = 12;
var useStyles$r = reactJss.createUseStyles(styles$j, {
  name: 'ObjectPage'
});
/**
 * A component that allows apps to easily display information related to a business object.<br />
 * The `ObjectPage` is composed of a header (title and content) and block content wrapped in sections and subsections that structure the information.
 */

var ObjectPage = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _safeGetChildrenArray, _safeGetChildrenArray2, _ref, _anchorBarRef$current, _objectPageRef$curren17, _objectPageRef$curren18, _ref2, _anchorBarRef$current2;

  var title = props.title,
      image = props.image,
      subTitle = props.subTitle,
      headerActions = props.headerActions,
      mode = props.mode,
      imageShapeCircle = props.imageShapeCircle,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot,
      showHideHeaderButton = props.showHideHeaderButton,
      children = props.children,
      onSelectedSectionChanged = props.onSelectedSectionChanged,
      selectedSectionId = props.selectedSectionId,
      noHeader = props.noHeader,
      alwaysShowContentHeader = props.alwaysShowContentHeader,
      showTitleInHeaderContent = props.showTitleInHeaderContent,
      headerContentPinnable = props.headerContentPinnable,
      headerContent = props.headerContent,
      breadcrumbs = props.breadcrumbs,
      keyInfos = props.keyInfos;
  var firstSectionId = (_safeGetChildrenArray = safeGetChildrenArray(children)[0]) === null || _safeGetChildrenArray === void 0 ? void 0 : (_safeGetChildrenArray2 = _safeGetChildrenArray.props) === null || _safeGetChildrenArray2 === void 0 ? void 0 : _safeGetChildrenArray2.id;

  var _useState = React.useState(selectedSectionId !== null && selectedSectionId !== void 0 ? selectedSectionId : firstSectionId),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      internalSelectedSectionId = _useState2[0],
      setInternalSelectedSectionId = _useState2[1];

  var _useState3 = React.useState(props.selectedSubSectionId),
      _useState4 = _slicedToArray__default['default'](_useState3, 2),
      selectedSubSectionId = _useState4[0],
      setSelectedSubSectionId = _useState4[1];

  var _useState5 = React.useState(alwaysShowContentHeader),
      _useState6 = _slicedToArray__default['default'](_useState5, 2),
      headerPinned = _useState6[0],
      setHeaderPinned = _useState6[1];

  var isProgrammaticallyScrolled = React.useRef(false);
  var objectPageRef = useConsolidatedRef.useConsolidatedRef(ref);
  var topHeaderRef = React.useRef();
  var headerContentRef = React.useRef();
  var anchorBarRef = React.useRef();

  var _useState7 = React.useState(SCROLL_BAR_WIDTH),
      _useState8 = _slicedToArray__default['default'](_useState7, 2),
      scrollbarWidth = _useState8[0],
      setScrollbarWidth = _useState8[1];

  var isMounted = React.useRef(false); // observe heights of header parts

  var _useObserveHeights = useObserveHeights(objectPageRef, topHeaderRef, headerContentRef, anchorBarRef, {
    noHeader: noHeader
  }),
      topHeaderHeight = _useObserveHeights.topHeaderHeight,
      headerContentHeight = _useObserveHeights.headerContentHeight,
      anchorBarHeight = _useObserveHeights.anchorBarHeight,
      totalHeaderHeight = _useObserveHeights.totalHeaderHeight; // *****
  // SECTION SELECTION
  // ****


  var scrollToSection = React.useCallback(function (sectionId) {
    if (!sectionId) {
      return;
    }

    if (firstSectionId === sectionId) {
      var _objectPageRef$curren;

      (_objectPageRef$curren = objectPageRef.current) === null || _objectPageRef$curren === void 0 ? void 0 : _objectPageRef$curren.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    } else {
      var _objectPageRef$curren2, _objectPageRef$curren3;

      var childOffset = (_objectPageRef$curren2 = objectPageRef.current) === null || _objectPageRef$curren2 === void 0 ? void 0 : (_objectPageRef$curren3 = _objectPageRef$curren2.querySelector("#ObjectPageSection-".concat(sectionId))) === null || _objectPageRef$curren3 === void 0 ? void 0 : _objectPageRef$curren3.offsetTop;

      if (!isNaN(childOffset)) {
        var _objectPageRef$curren4;

        (_objectPageRef$curren4 = objectPageRef.current) === null || _objectPageRef$curren4 === void 0 ? void 0 : _objectPageRef$curren4.scrollTo({
          top: childOffset - topHeaderHeight - anchorBarHeight - (headerPinned ? headerContentHeight : 0) + 45,
          behavior: 'smooth'
        });
      }
    }

    isProgrammaticallyScrolled.current = false;
  }, [firstSectionId, objectPageRef, topHeaderHeight, anchorBarHeight, headerPinned, headerContentHeight]); // change selected section when prop is changed (external change)

  React.useEffect(function () {
    isProgrammaticallyScrolled.current = true;
    setInternalSelectedSectionId(selectedSectionId !== null && selectedSectionId !== void 0 ? selectedSectionId : firstSectionId);
  }, [selectedSectionId, isProgrammaticallyScrolled, firstSectionId]); // section was selected by clicking on the anchor bar buttons

  var handleOnSectionSelected = React.useCallback(function (e) {
    var _e$detail$props;

    isProgrammaticallyScrolled.current = true;
    var newSelectionSection = (_e$detail$props = e.detail.props) === null || _e$detail$props === void 0 ? void 0 : _e$detail$props.id;
    setInternalSelectedSectionId(function (oldSelectedSection) {
      if (oldSelectedSection === newSelectionSection) {
        scrollToSection(newSelectionSection);
      }

      return newSelectionSection;
    });
    fireOnSelectedChangedEvent(e);
  }, [onSelectedSectionChanged, setInternalSelectedSectionId, isProgrammaticallyScrolled, scrollToSection]); // do internal scrolling

  React.useEffect(function () {
    if (!isMounted.current) return;

    if (mode === ObjectPageMode.ObjectPageMode.Default && isProgrammaticallyScrolled.current === true) {
      scrollToSection(internalSelectedSectionId);
    }
  }, [internalSelectedSectionId, isMounted, mode, isProgrammaticallyScrolled, scrollToSection]); // Scrolling for Sub Section Selection

  React.useEffect(function () {
    if (selectedSubSectionId && isProgrammaticallyScrolled.current === true) {
      var _objectPageRef$curren5, _objectPageRef$curren6;

      var childOffset = (_objectPageRef$curren5 = objectPageRef.current) === null || _objectPageRef$curren5 === void 0 ? void 0 : (_objectPageRef$curren6 = _objectPageRef$curren5.querySelector("div[id=\"ObjectPageSubSection-".concat(selectedSubSectionId, "\"]"))) === null || _objectPageRef$curren6 === void 0 ? void 0 : _objectPageRef$curren6.offsetTop;

      if (!isNaN(childOffset)) {
        var _objectPageRef$curren7;

        (_objectPageRef$curren7 = objectPageRef.current) === null || _objectPageRef$curren7 === void 0 ? void 0 : _objectPageRef$curren7.scrollTo({
          top: childOffset - topHeaderHeight - anchorBarHeight - (headerPinned ? headerContentHeight : 0) + 45,
          behavior: 'smooth'
        });
      }

      isProgrammaticallyScrolled.current = false;
    }
  }, [selectedSubSectionId, isProgrammaticallyScrolled, topHeaderHeight, anchorBarHeight, headerPinned, headerContentHeight]);
  React.useEffect(function () {
    setHeaderPinned(alwaysShowContentHeader);
  }, [setHeaderPinned, alwaysShowContentHeader]);
  var classes = useStyles$r();
  React.useEffect(function () {
    setSelectedSubSectionId(props.selectedSubSectionId);

    if (props.selectedSubSectionId) {
      isProgrammaticallyScrolled.current = true;

      if (mode === ObjectPageMode.ObjectPageMode.IconTabBar) {
        var sectionId;
        safeGetChildrenArray(children).forEach(function (section) {
          if ( /*#__PURE__*/React__default['default'].isValidElement(section) && section.props && section.props.children) {
            safeGetChildrenArray(section.props.children).forEach(function (subSection) {
              if ( /*#__PURE__*/React__default['default'].isValidElement(subSection) && subSection.props && subSection.props.id === props.selectedSubSectionId) {
                var _section$props;

                sectionId = (_section$props = section.props) === null || _section$props === void 0 ? void 0 : _section$props.id;
              }
            });
          }
        });

        if (sectionId) {
          setInternalSelectedSectionId(sectionId);
        }
      }
    }
  }, [props.selectedSubSectionId, setInternalSelectedSectionId, setSelectedSubSectionId, children, mode, isProgrammaticallyScrolled]);
  React.useEffect(function () {
    var fillerDivObserver = new ResizeObserver(function () {
      var _objectPageRef$curren8, _objectPageRef$curren9;

      var heightDiff = 0;
      var maxHeight = Math.min((_objectPageRef$curren8 = objectPageRef.current) === null || _objectPageRef$curren8 === void 0 ? void 0 : _objectPageRef$curren8.clientHeight, window.innerHeight);
      var availableScrollHeight = maxHeight - totalHeaderHeight;
      var lastSectionDomRef = getLastObjectPageSection(objectPageRef);

      if (lastSectionDomRef) {
        var subSections = lastSectionDomRef.querySelectorAll('[id^="ObjectPageSubSection"]');
        var lastSubSectionHeight;

        if (subSections.length > 0) {
          lastSubSectionHeight = subSections[subSections.length - 1].offsetHeight;
        } else {
          lastSubSectionHeight = lastSectionDomRef.offsetHeight - lastSectionDomRef.querySelector("[role='heading']").offsetHeight;
        }

        heightDiff = Math.max(0, availableScrollHeight - lastSubSectionHeight);

        if (isNaN(heightDiff)) {
          heightDiff = 0;
        }
      }

      (_objectPageRef$curren9 = objectPageRef.current) === null || _objectPageRef$curren9 === void 0 ? void 0 : _objectPageRef$curren9.style.setProperty(ObjectPageCssVariables.lastSectionMargin, "".concat(heightDiff, "px"));
    });
    fillerDivObserver.observe(objectPageRef.current);
    return function () {
      fillerDivObserver.disconnect();
    };
  }, [totalHeaderHeight, objectPageRef, children]);
  var fireOnSelectedChangedEvent = debounce__default['default'](function (e) {
    onSelectedSectionChanged(Utils.enrichEventWithDetails(e, {
      selectedSectionIndex: e.detail.index,
      selectedSectionId: e.detail.props.id,
      section: e.detail
    }));
  }, 500);
  var handleOnSubSectionSelected = React.useCallback(function (e) {
    isProgrammaticallyScrolled.current = true;

    if (mode === ObjectPageMode.ObjectPageMode.IconTabBar) {
      var _e$detail$section$pro;

      var sectionId = (_e$detail$section$pro = e.detail.section.props) === null || _e$detail$section$pro === void 0 ? void 0 : _e$detail$section$pro.id;
      setInternalSelectedSectionId(sectionId);
    }

    var subSection = e.detail.subSection;
    setSelectedSubSectionId(subSection.props.id);
  }, [mode, setInternalSelectedSectionId, setSelectedSubSectionId, isProgrammaticallyScrolled]);
  var onToggleHeaderContentVisibility = React.useCallback(function (e) {
    var srcElement = e.target;
    var shouldHideHeader = srcElement.icon === 'slim-arrow-up';

    if (shouldHideHeader) {
      var _objectPageRef$curren10;

      (_objectPageRef$curren10 = objectPageRef.current) === null || _objectPageRef$curren10 === void 0 ? void 0 : _objectPageRef$curren10.classList.add(classes.headerCollapsed);
    } else {
      var _objectPageRef$curren11;

      (_objectPageRef$curren11 = objectPageRef.current) === null || _objectPageRef$curren11 === void 0 ? void 0 : _objectPageRef$curren11.classList.remove(classes.headerCollapsed);
    }

    requestAnimationFrame(function () {
      var _objectPageRef$curren12;

      if (((_objectPageRef$curren12 = objectPageRef.current) === null || _objectPageRef$curren12 === void 0 ? void 0 : _objectPageRef$curren12.scrollTop) > 0 && !shouldHideHeader) {
        var _objectPageRef$curren13;

        var prevHeaderTop = headerContentRef.current.style.top;
        headerContentRef.current.style.top = "".concat(topHeaderHeight, "px");
        var prevAnchorTop = anchorBarRef.current.style.top;
        anchorBarRef.current.style.top = "".concat(headerContentRef.current.offsetHeight + topHeaderHeight, "px");
        (_objectPageRef$curren13 = objectPageRef.current) === null || _objectPageRef$curren13 === void 0 ? void 0 : _objectPageRef$curren13.addEventListener('scroll', function (e) {
          if (prevHeaderTop !== null && prevHeaderTop !== void 0 ? prevHeaderTop : true) {
            headerContentRef.current.style.top = prevHeaderTop;
          } else {
            headerContentRef.current.style.removeProperty('top');
          }

          if (prevAnchorTop !== null && prevAnchorTop !== void 0 ? prevAnchorTop : true) {
            anchorBarRef.current.style.top = prevAnchorTop;
          } else {
            anchorBarRef.current.style.removeProperty('top');
          }
        }, {
          once: true
        });
      }
    });
  }, [objectPageRef, classes.headerCollapsed, headerContentHeight, topHeaderHeight]);
  React.useEffect(function () {
    requestAnimationFrame(function () {
      var calculatedScrollBarWidth = Utils.getScrollBarWidth();

      if (calculatedScrollBarWidth && calculatedScrollBarWidth !== 0 && calculatedScrollBarWidth !== SCROLL_BAR_WIDTH) {
        setScrollbarWidth(calculatedScrollBarWidth);
      }
    });
    isMounted.current = true;
  }, [isMounted, setScrollbarWidth]);
  var objectPageClasses = StyleClassHelper.StyleClassHelper.of(classes.objectPage, GlobalStyleClasses.GlobalStyleClasses.sapScrollBar);

  if (className) {
    objectPageClasses.put(className);
  }

  if (showTitleInHeaderContent) {
    objectPageClasses.put(classes.titleInHeaderContent);
  }

  if (mode === ObjectPageMode.ObjectPageMode.IconTabBar) {
    objectPageClasses.put(classes.iconTabBarMode);
  }

  if (noHeader) {
    objectPageClasses.put(classes.noHeader);
  }

  var scrollBarWidthPadding = React.useMemo(function () {
    return {
      paddingRight: Device.isIE() ? 0 : "".concat(scrollbarWidth, "px")
    };
  }, [scrollbarWidth]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onSelectedSectionChanged']);
  React.useEffect(function () {
    var _objectPageRef$curren14, _objectPageRef$curren15, _objectPageRef$curren16;

    var objectPageHeight = (_objectPageRef$curren14 = (_objectPageRef$curren15 = objectPageRef.current) === null || _objectPageRef$curren15 === void 0 ? void 0 : _objectPageRef$curren15.clientHeight) !== null && _objectPageRef$curren14 !== void 0 ? _objectPageRef$curren14 : 1000;
    var marginBottom = objectPageHeight - totalHeaderHeight;
    var rootMargin = "-".concat(totalHeaderHeight, "px 0px -").concat(marginBottom < 0 ? 0 : marginBottom, "px 0px");
    var observer = new IntersectionObserver(function (elements) {
      elements.forEach(function (section) {
        if (section.isIntersecting && isProgrammaticallyScrolled.current === false) {
          setInternalSelectedSectionId(extractSectionIdFromHtmlId(section.target.id));
        }
      });
    }, {
      root: objectPageRef.current,
      rootMargin: rootMargin,
      threshold: [0]
    });
    (_objectPageRef$curren16 = objectPageRef.current) === null || _objectPageRef$curren16 === void 0 ? void 0 : _objectPageRef$curren16.querySelectorAll('section[data-component-name="ObjectPageSection"]').forEach(function (el) {
      observer.observe(el);
    });
    return function () {
      observer.disconnect();
    };
  }, [objectPageRef, children, totalHeaderHeight, setInternalSelectedSectionId, isProgrammaticallyScrolled]);
  var headerClasses = StyleClassHelper.StyleClassHelper.of(classes.header);
  var anchorBarClasses = StyleClassHelper.StyleClassHelper.of(classes.anchorBar);

  if (Device.isIE()) {
    headerClasses.put(classes.iEClass);
    anchorBarClasses.put(classes.iEClass);
  }

  var anchorBarPositionTop = noHeader ? 0 : headerPinned || Device.isIE() ? topHeaderHeight + headerContentHeight : topHeaderHeight;
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    "data-component-name": "ObjectPage",
    slot: slot,
    className: objectPageClasses.toString(),
    style: style,
    ref: objectPageRef,
    title: tooltip
  }, passThroughProps), /*#__PURE__*/React__default['default'].createElement("header", {
    ref: topHeaderRef,
    role: "banner",
    "aria-roledescription": "Object Page header",
    style: scrollBarWidthPadding,
    className: headerClasses.className
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.titleBar
  }, (!showTitleInHeaderContent || headerContentHeight === 0) && /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Center
  }, image && headerContentHeight === 0 && /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.avatar
  }, /*#__PURE__*/React__default['default'].createElement(CollapsedAvatar, {
    image: image,
    imageShapeCircle: imageShapeCircle
  })), /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Column,
    className: classes.container
  }, breadcrumbs, /*#__PURE__*/React__default['default'].createElement(FlexBox$1.FlexBox, {
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Baseline
  }, /*#__PURE__*/React__default['default'].createElement(Title$1.Title, {
    level: TitleLevel.TitleLevel.H3,
    className: classes.title
  }, title), /*#__PURE__*/React__default['default'].createElement(Label$1.Label, {
    className: classes.subTitle
  }, subTitle), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.keyInfos
  }, keyInfos))), /*#__PURE__*/React__default['default'].createElement(Toolbar$1.Toolbar, {
    toolbarStyle: ToolbarStyle.ToolbarStyle.Clear,
    design: ToolbarDesign.ToolbarDesign.Transparent
  }, /*#__PURE__*/React__default['default'].createElement(ToolbarSpacer$1.ToolbarSpacer, null), headerActions)))), /*#__PURE__*/React__default['default'].createElement(ObjectPageHeader, {
    headerActions: headerActions,
    image: image,
    classes: classes,
    imageShapeCircle: imageShapeCircle,
    showTitleInHeaderContent: showTitleInHeaderContent,
    headerContentProp: headerContent,
    breadcrumbs: breadcrumbs,
    keyInfos: keyInfos,
    title: title,
    subTitle: subTitle,
    headerPinned: headerPinned,
    topHeaderHeight: topHeaderHeight,
    ref: headerContentRef
  }), /*#__PURE__*/React__default['default'].createElement(ObjectPageAnchorBar, {
    sections: children,
    selectedSectionId: internalSelectedSectionId,
    handleOnSectionSelected: handleOnSectionSelected,
    handleOnSubSectionSelected: handleOnSubSectionSelected,
    headerContentPinnable: headerContentPinnable,
    showHideHeaderButton: showHideHeaderButton && !noHeader,
    headerPinned: headerPinned,
    setHeaderPinned: setHeaderPinned,
    headerContentHeight: headerContentHeight,
    style: {
      top: anchorBarPositionTop
    },
    onToggleHeaderContentVisibility: onToggleHeaderContentVisibility,
    ref: anchorBarRef,
    className: anchorBarClasses.className
  }), Device.isIE() && /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.iEBackgroundElement,
    style: {
      height: "".concat((_ref = anchorBarPositionTop + ((_anchorBarRef$current = anchorBarRef.current) === null || _anchorBarRef$current === void 0 ? void 0 : _anchorBarRef$current.offsetHeight)) !== null && _ref !== void 0 ? _ref : 0, "px"),
      width: "calc(100% - ".concat((objectPageRef === null || objectPageRef === void 0 ? void 0 : (_objectPageRef$curren17 = objectPageRef.current) === null || _objectPageRef$curren17 === void 0 ? void 0 : _objectPageRef$curren17.clientHeight) < (objectPageRef === null || objectPageRef === void 0 ? void 0 : (_objectPageRef$curren18 = objectPageRef.current) === null || _objectPageRef$curren18 === void 0 ? void 0 : _objectPageRef$curren18.scrollHeight) ? '18px' : '0px', ")")
    }
  }), Device.isIE() ? /*#__PURE__*/React__default['default'].createElement("div", {
    style: {
      marginTop: "".concat((_ref2 = anchorBarPositionTop + ((_anchorBarRef$current2 = anchorBarRef.current) === null || _anchorBarRef$current2 === void 0 ? void 0 : _anchorBarRef$current2.offsetHeight)) !== null && _ref2 !== void 0 ? _ref2 : 0, "px")
    }
  }, mode === ObjectPageMode.ObjectPageMode.IconTabBar ? getSectionById(children, internalSelectedSectionId) : children) : mode === ObjectPageMode.ObjectPageMode.IconTabBar ? getSectionById(children, internalSelectedSectionId) : children);
});
ObjectPage.displayName = 'ObjectPage';
ObjectPage.defaultProps = {
  title: '',
  image: null,
  subTitle: '',
  headerActions: [],
  mode: ObjectPageMode.ObjectPageMode.Default,
  imageShapeCircle: false,
  showHideHeaderButton: false,
  onSelectedSectionChanged: function onSelectedSectionChanged() {
    /* noop */
  },
  noHeader: false
};

(function (ObjectPageMode) {
  ObjectPageMode["Default"] = "Default";
  ObjectPageMode["IconTabBar"] = "IconTabBar";
})(exports.ObjectPageMode || (exports.ObjectPageMode = {}));

var EmptyIdPropException = /*#__PURE__*/function (_Error) {
  _inherits__default['default'](EmptyIdPropException, _Error);

  var _super = _createSuper__default['default'](EmptyIdPropException);

  function EmptyIdPropException(message) {
    var _this;

    _classCallCheck__default['default'](this, EmptyIdPropException);

    _this = _super.call(this, message);
    _this.name = _this.constructor.name;
    return _this;
  }

  return EmptyIdPropException;
}( /*#__PURE__*/_wrapNativeSuper__default['default'](Error));

var styles$k = {
  header: {
    padding: '0 3rem 0 2.5rem',
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapGroup_TitleBorderColor),
    boxSizing: 'border-box',
    height: '2.75rem'
  },
  title: {
    height: '2.75rem',
    color: ThemingParameters.ThemingParameters.sapTextColor,
    fontSize: ThemingParameters.ThemingParameters.sapFontHeader4Size,
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapActiveColor),
    display: 'inline-block',
    maxWidth: '100%',
    overflow: 'hidden',
    whiteSpace: 'nowrap',
    textOverflow: 'ellipsis',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily
  },
  uppercase: {
    textTransform: 'uppercase'
  },
  sectionContent: {
    whiteSpace: 'normal'
  },
  sectionContentInner: {
    padding: '1rem 2rem 2rem 2.5rem',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily
  }
};

var useStyles$s = reactJss.createUseStyles(styles$k, {
  name: 'ObjectPageSection'
});
/**
 * Top-level information container of an `ObjectPage`.
 */

var ObjectPageSection = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var title = props.title,
      id = props.id,
      children = props.children,
      titleUppercase = props.titleUppercase,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip;
  var classes = useStyles$s();

  if (!id) {
    throw new EmptyIdPropException('ObjectPageSection requires a unique ID property!');
  }

  var sectionRef = useConsolidatedRef.useConsolidatedRef(ref);
  var htmlId = "ObjectPageSection-".concat(id);
  var titleClasses = StyleClassHelper.StyleClassHelper.of(classes.title);

  if (titleUppercase) {
    titleClasses.put(classes.uppercase);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['id']);
  return /*#__PURE__*/React__default['default'].createElement("section", _extends__default['default']({
    ref: sectionRef,
    role: "region",
    className: className,
    style: style,
    title: tooltip
  }, passThroughProps, {
    id: htmlId,
    "data-component-name": "ObjectPageSection"
  }), /*#__PURE__*/React__default['default'].createElement("div", {
    role: "heading",
    "aria-level": 3,
    className: classes.header
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: titleClasses.valueOf()
  }, title)), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.sectionContent
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.sectionContentInner
  }, children)));
});
ObjectPageSection.defaultProps = {
  title: '',
  // @ts-ignore
  isSection: true,
  titleUppercase: true
};
ObjectPageSection.displayName = 'ObjectPageSection';

var styles$l = {
  objectPageSubSection: {
    padding: '1rem 0',
    '&:focus': {
      outline: "1px dotted ".concat(ThemingParameters.ThemingParameters.sapContent_FocusColor),
      outlineOffset: '-1px'
    }
  },
  objectPageSubSectionHeaderTitle: {
    fontSize: ThemingParameters.ThemingParameters.sapFontHeader5Size,
    color: ThemingParameters.ThemingParameters.sapGroup_TitleTextColor,
    marginBottom: '0.5rem'
  },
  subSectionContent: {
    padding: '1rem 2rem 3rem 0'
  }
};
var useStyles$t = reactJss.createUseStyles(styles$l, {
  name: 'ObjectPageSubSection'
});
/**
 * Second-level information container of an `ObjectPage`.<br />
 * __Note:__ This component should only be used inside an `ObjectPageSection` component.
 */

var ObjectPageSubSection = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      id = props.id,
      title = props.title,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip;

  if (!id) {
    throw new EmptyIdPropException('ObjectPageSubSection requires a unique ID property!');
  }

  var htmlRef = useConsolidatedRef.useConsolidatedRef(ref);
  var htmlId = "ObjectPageSubSection-".concat(id);
  var classes = useStyles$t();
  var subSectionClassName = StyleClassHelper.StyleClassHelper.of(classes.objectPageSubSection);

  if (className) {
    subSectionClassName.put(className);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['id']);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: htmlRef,
    className: subSectionClassName.toString(),
    role: "region",
    style: style,
    title: tooltip
  }, passThroughProps, {
    id: htmlId,
    "data-component-name": "ObjectPageSubSection"
  }), /*#__PURE__*/React__default['default'].createElement("div", {
    role: "heading",
    "aria-level": 4,
    className: classes.objectPageSubSectionHeaderTitle
  }, title), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.subSectionContent
  }, children));
});
ObjectPageSubSection.defaultProps = {
  title: null,
  // @ts-ignore
  isSubSection: true
};
ObjectPageSubSection.displayName = 'ObjectPageSubSection';

var styles$m = {
  objectStatus: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    position: 'relative',
    display: 'flex'
  },
  iconSuccess: {
    '& ui5-icon': {
      color: ThemingParameters.ThemingParameters.sapPositiveTextColor
    }
  },
  iconWarning: {
    '& ui5-icon': {
      color: ThemingParameters.ThemingParameters.sapCriticalTextColor
    }
  },
  iconError: {
    '& ui5-icon': {
      color: ThemingParameters.ThemingParameters.sapNegativeTextColor
    }
  },
  iconNone: {
    '& ui5-icon': {
      color: ThemingParameters.ThemingParameters.sapNeutralTextColor
    }
  },
  iconInformation: {
    color: ThemingParameters.ThemingParameters.sapInformativeElementColor
  },
  icon: {
    marginRight: '0.5rem',
    fontSize: '1rem',
    verticalAlign: 'bottom',
    lineHeight: 'inherit'
  },
  textSuccess: {
    color: ThemingParameters.ThemingParameters.sapPositiveTextColor
  },
  textError: {
    color: ThemingParameters.ThemingParameters.sapNegativeTextColor
  },
  textWarning: {
    color: ThemingParameters.ThemingParameters.sapCriticalTextColor
  },
  textInformation: {
    color: ThemingParameters.ThemingParameters.sapInformativeTextColor
  },
  textNone: {
    color: ThemingParameters.ThemingParameters.sapNeutralTextColor
  }
};

var defaultIconStyle = {
  fontSize: '1rem'
};

var getDefaultIcon = function getDefaultIcon(state) {
  switch (state) {
    case ValueState.ValueState.Error:
      return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
        name: "status-negative",
        style: defaultIconStyle
      });

    case ValueState.ValueState.Success:
      return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
        name: "status-positive",
        style: defaultIconStyle
      });

    case ValueState.ValueState.Warning:
      return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
        name: "status-critical",
        style: defaultIconStyle
      });

    case ValueState.ValueState.Information:
      return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
        name: "hint",
        style: defaultIconStyle
      });

    default:
      return /*#__PURE__*/React__default['default'].createElement(Icon$1.Icon, {
        name: "status-inactive",
        style: defaultIconStyle
      });
  }
};

var useStyles$u = reactJss.createUseStyles(styles$m, {
  name: 'ObjectStatus'
});
/**
 * Status information that can be either text with a value state, or an icon.
 */

var ObjectStatus = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var state = props.state,
      showDefaultIcon = props.showDefaultIcon,
      children = props.children,
      icon = props.icon,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot;
  var iconToRender = React.useMemo(function () {
    if (icon) {
      return icon;
    }

    if (showDefaultIcon) {
      return getDefaultIcon(state);
    }

    return null;
  }, [icon, showDefaultIcon, state]);
  var classes = useStyles$u();
  var objStatusClasses = StyleClassHelper.StyleClassHelper.of(classes.objectStatus);

  if (className) {
    objStatusClasses.put(className);
  }

  var iconClasses = StyleClassHelper.StyleClassHelper.of(classes.icon);
  iconClasses.put(classes["icon".concat(state)]);
  var textClass = classes["text".concat(state)];
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    className: objStatusClasses.valueOf(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), iconToRender && /*#__PURE__*/React__default['default'].createElement("div", {
    className: iconClasses.valueOf()
  }, iconToRender), children !== null && children !== undefined && /*#__PURE__*/React__default['default'].createElement("span", {
    className: textClass
  }, children));
});
ObjectStatus.displayName = 'ObjectStatus';
ObjectStatus.defaultProps = {
  state: ValueState.ValueState.None,
  showDefaultIcon: false,
  icon: null,
  children: null
};

/**
 * The `Option` component defines the content of an option in the `Select`
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Option" target="_blank">UI5 Web Components Playground</a>
 */
var Option = withWebComponent$1.withWebComponent('ui5-option', ['icon', 'value'], ['selected'], [], []);
Option.displayName = 'Option';
Option.defaultProps = {
  selected: false
};

/**
 * Style Class Generator Function
 *
 * @param {Object} obj - Current Theme Context by JSS Provider.
 * @param {object} obj.parameters - Theming parameters (e.g. LabelColor)
 */

var styles$n = {
  // const isS = '@media (max-width: 600px)';
  // const isM = '@media (min-width: 601px) and (max-width: 1024px)';
  // const isL = '@media (min-width: 1025px) and (max-width: 1440px)';
  // const isXL = '@media (min-width: 1441px) and (max-width: 1920px)';
  // const isXXL = '(min-width: 1921px)';
  // function getHeaderAndFooterPaddings() {
  //   return {
  //     '& [data-bar-part="Left"]': {
  //       [isS]: {
  //         paddingLeft: '1rem'
  //       },
  //       [isM]: {
  //         paddingLeft: '2rem'
  //       },
  //       [isL]: {
  //         paddingLeft: '2rem'
  //       },
  //       [isXL]: {
  //         paddingLeft: '3rem'
  //       },
  //       [isXXL]: {
  //         paddingLeft: '3rem'
  //       }
  //     },
  //     '& [data-bar-part="Right"]': {
  //       [isS]: {
  //         paddingRight: '1rem'
  //       },
  //       [isM]: {
  //         paddingRight: '2rem'
  //       },
  //       [isL]: {
  //         paddingRight: '2rem'
  //       },
  //       [isXL]: {
  //         paddingRight: '3rem'
  //       },
  //       [isXXL]: {
  //         paddingRight: '3rem'
  //       }
  //     }
  //   };
  // }
  pageContainer: {
    width: '100%',
    height: '100%',
    overflow: 'hidden',
    position: 'relative',
    '& $pageHeader': {// ...getHeaderAndFooterPaddings()
    },
    '& $pageFooter': {// ...getHeaderAndFooterPaddings()
    },
    '& $contentSection': {// [isS]: {
      //   padding: '1rem 1rem 0 1rem'
      // },
      // [isM]: {
      //   padding: '1rem 2rem 0 2rem'
      // },
      // [isL]: {
      //   padding: '1rem 2rem 0 2rem'
      // },
      // [isXL]: {
      //   padding: '1rem 3rem 0 3rem'
      // },
      // [isXXL]: {
      //   padding: '1rem 3rem 0 3rem'
      // }
    }
  },
  backgroundStandard: {
    background: ThemingParameters.ThemingParameters.sapBackgroundColor
  },
  backgroundSolid: {
    background: ThemingParameters.ThemingParameters.sapShell_Background
  },
  backgroundList: {
    background: ThemingParameters.ThemingParameters.sapGroup_ContentBackground
  },
  backgroundTransparent: {
    background: 'transparent'
  },
  baseBar: {
    '& >*': {
      paddingLeft: '0rem',
      paddingRight: '0rem',
      '& [data-bar-part="Left"]': {
        paddingLeft: '0rem'
      },
      '& [data-bar-part="Right"]': {
        paddingRight: '0rem'
      }
    }
  },
  pageHeader: {
    top: 0,
    width: '100%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    textAlign: 'center',
    background: ThemingParameters.ThemingParameters.sapPageHeader_Background,
    '& >*': {
      background: ThemingParameters.ThemingParameters.sapPageHeader_Background,
      boxShadow: "inset 0 -0.0625rem ".concat(ThemingParameters.ThemingParameters.sapPageHeader_BorderColor)
    }
  },
  contentSection: {
    position: 'absolute',
    top: '0',
    left: '0',
    right: '0',
    bottom: '0',
    overflowY: 'auto',
    overflowX: 'hidden',
    // marginTop: '1px',
    // marginBottom: '1px',
    boxSizing: 'border-box' // backgroundColor: ThemingParameters.sapBackgroundColor

  },
  pageWithHeader: {
    '& $contentSection': {
      top: CssSizeVariables.CssSizeVariables.sapWcrBarHeight
    }
  },
  pageFooter: {
    position: 'absolute',
    bottom: '0',
    left: '0',
    width: '100%',
    borderTop: "1px solid ".concat(ThemingParameters.ThemingParameters.sapPageFooter_BorderColor),
    '& >*': {
      height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight,
      background: ThemingParameters.ThemingParameters.sapPageFooter_Background,
      borderTop: "0.0625rem solid ".concat(ThemingParameters.ThemingParameters.sapPageFooter_BorderColor)
    }
  }
};

var useStyles$v = reactJss.createUseStyles(styles$n, {
  name: 'Page'
});
/**
 * A layout component that holds one whole screen of an application.
 */

var Page = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      showFooter = props.showFooter,
      showHeader = props.showHeader,
      showBackButton = props.showBackButton,
      className = props.className,
      style = props.style,
      backgroundDesign = props.backgroundDesign,
      tooltip = props.tooltip,
      slot = props.slot,
      onNavButtonPress = props.onNavButtonPress,
      title = props.title,
      customFooter = props.customFooter,
      customHeader = props.customHeader;
  var footerRef = React.useRef(null);
  var headerRef = React.useRef(null);

  var _useState = React.useState(0),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      footerHeight = _useState2[0],
      setFooterHeight = _useState2[1];

  var _useState3 = React.useState({}),
      _useState4 = _slicedToArray__default['default'](_useState3, 2),
      headerStyles = _useState4[0],
      setHeaderStyles = _useState4[1];

  var classes = useStyles$v();
  var handleNavBackButtonPress = React.useCallback(function (e) {
    if (typeof onNavButtonPress === 'function') {
      onNavButtonPress(Utils.enrichEventWithDetails(e));
    }
  }, [onNavButtonPress]);
  var renderBackButton = React.useCallback(function () {
    if (showBackButton) {
      return /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
        icon: "navigation-left-arrow",
        design: ButtonDesign.ButtonDesign.Transparent,
        onClick: handleNavBackButtonPress
      });
    }

    return null;
  }, [showBackButton]);
  var renderTitle = React.useCallback(function () {
    return /*#__PURE__*/React__default['default'].createElement(Title$1.Title, {
      level: TitleLevel.TitleLevel.H5
    }, title);
  }, [title]);
  var header = React.useMemo(function () {
    return customHeader !== null && customHeader !== void 0 ? customHeader : /*#__PURE__*/React__default['default'].createElement(Bar$1.Bar, {
      startContent: renderBackButton(),
      middleContent: renderTitle()
    });
  }, [customHeader, renderTitle, renderBackButton]);
  var pageContainer = StyleClassHelper.StyleClassHelper.of(classes.pageContainer);
  var headerClasses = StyleClassHelper.StyleClassHelper.of(classes.pageHeader, classes.baseBar);
  var footerClasses = StyleClassHelper.StyleClassHelper.of(classes.pageFooter, classes.baseBar);

  if (showHeader && !customHeader) {
    pageContainer.put(classes.pageWithHeader);
  }

  React.useEffect(function () {
    if (customHeader && showHeader) {
      var _headerRef$current;

      setHeaderStyles((_headerRef$current = headerRef.current) !== null && _headerRef$current !== void 0 && _headerRef$current.offsetHeight ? {
        top: headerRef.current.offsetHeight
      } : {});
    }

    if (!showHeader) {
      setHeaderStyles({});
    }
  }, [headerRef.current, customHeader, showHeader]);

  if (className) {
    pageContainer.put(className);
  }

  React.useEffect(function () {
    if (customFooter && showFooter) {
      var _footerRef$current$of, _footerRef$current;

      setFooterHeight((_footerRef$current$of = (_footerRef$current = footerRef.current) === null || _footerRef$current === void 0 ? void 0 : _footerRef$current.offsetHeight) !== null && _footerRef$current$of !== void 0 ? _footerRef$current$of : 0);
    }

    if (!showFooter) {
      setFooterHeight(0);
    }
  }, [footerRef.current, customFooter, showFooter]);
  pageContainer.put(classes["background".concat(backgroundDesign)]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onNavButtonPress']);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    ref: ref,
    className: pageContainer.valueOf(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), showHeader && /*#__PURE__*/React__default['default'].createElement("header", {
    ref: headerRef,
    className: headerClasses.valueOf()
  }, header), /*#__PURE__*/React__default['default'].createElement("section", {
    className: classes.contentSection,
    style: _objectSpread__default['default']({
      bottom: footerHeight
    }, headerStyles)
  }, children), showFooter && /*#__PURE__*/React__default['default'].createElement("footer", {
    ref: footerRef,
    className: footerClasses.valueOf()
  }, customFooter));
});
Page.defaultProps = {
  showHeader: true,
  showFooter: false,
  showBackButton: true,
  title: '',
  backgroundDesign: PageBackgroundDesign.PageBackgroundDesign.Standard
};
Page.displayName = 'Page';

(function (PageBackgroundDesign) {
  PageBackgroundDesign["Standard"] = "Standard";
  PageBackgroundDesign["Solid"] = "Solid";
  PageBackgroundDesign["List"] = "List";
  PageBackgroundDesign["Transparent"] = "Transparent";
})(exports.PageBackgroundDesign || (exports.PageBackgroundDesign = {}));

/**
 * The `Panel` component is a container which has a header and a content area and is used for grouping and displaying information. It can be collapsed to save space on the screen.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Panel" target="_blank">UI5 Web Components Playground</a>
 */
var Panel = withWebComponent$1.withWebComponent('ui5-panel', ['accessibleRole', 'headerLevel', 'headerText'], ['collapsed', 'fixed'], ['header'], []);
Panel.displayName = 'Panel';
Panel.defaultProps = {
  accessibleRole: PanelAccessibleRoles.PanelAccessibleRoles.Form,
  collapsed: false,
  fixed: false,
  headerLevel: TitleLevel.TitleLevel.H2
};

// introduced because of web components

(function (PanelAccessibleRoles) {
  PanelAccessibleRoles["Complementary"] = "Complementary";
  PanelAccessibleRoles["Form"] = "Form";
  PanelAccessibleRoles["Region"] = "Region";
})(exports.PanelAccessibleRoles || (exports.PanelAccessibleRoles = {}));

(function (PlacementType) {
  PlacementType["Auto"] = "Auto";
  PlacementType["Top"] = "Top";
  PlacementType["Left"] = "Left";
  PlacementType["Right"] = "Right";
  PlacementType["Bottom"] = "Bottom";
})(exports.PlacementType || (exports.PlacementType = {}));

/**
 * The `Popover` component displays additional information for an object in a compact way and without leaving the page. The Popover can contain various UI elements, such as fields, tables, images, and charts. It can also include actions in the footer.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Popover" target="_blank">UI5 Web Components Playground</a>
 */
var Popover = withWebComponent$1.withWebComponent('ui5-popover', ['headerText', 'horizontalAlign', 'placementType', 'verticalAlign', 'initialFocus'], ['allowTargetOverlap', 'hideBackdrop', 'modal', 'noArrow', 'preventFocusRestore'], ['footer', 'header'], ['after-close', 'after-open', 'before-close', 'before-open']);
Popover.displayName = 'Popover';
Popover.defaultProps = {
  allowTargetOverlap: false,
  hideBackdrop: false,
  horizontalAlign: PopoverHorizontalAlign.PopoverHorizontalAlign.Center,
  modal: false,
  noArrow: false,
  placementType: PlacementType.PlacementType.Right,
  verticalAlign: PopoverVerticalAlign.PopoverVerticalAlign.Center,
  preventFocusRestore: false
};

(function (PopoverHorizontalAlign) {
  PopoverHorizontalAlign["Center"] = "Center";
  PopoverHorizontalAlign["Left"] = "Left";
  PopoverHorizontalAlign["Right"] = "Right";
  PopoverHorizontalAlign["Stretch"] = "Stretch";
})(exports.PopoverHorizontalAlign || (exports.PopoverHorizontalAlign = {}));

(function (PopoverPlacementType) {
  PopoverPlacementType["Left"] = "Left";
  PopoverPlacementType["Right"] = "Right";
  PopoverPlacementType["Top"] = "Top";
  PopoverPlacementType["Bottom"] = "Bottom";
})(exports.PopoverPlacementType || (exports.PopoverPlacementType = {}));

// introduced because of web components

(function (PopoverVerticalAlign) {
  PopoverVerticalAlign["Center"] = "Center";
  PopoverVerticalAlign["Top"] = "Top";
  PopoverVerticalAlign["Bottom"] = "Bottom";
  PopoverVerticalAlign["Stretch"] = "Stretch";
})(exports.PopoverVerticalAlign || (exports.PopoverVerticalAlign = {}));

(function (Priority) {
  Priority["High"] = "High";
  Priority["Low"] = "Low";
  Priority["Medium"] = "Medium";
  Priority["None"] = "None";
})(exports.Priority || (exports.Priority = {}));

/**
 * The `ProductSwitch` is an SAP Fiori specific web component that is used in `ShellBar` and allows the user to easily switch between products.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ProductSwitch" target="_blank">UI5 Web Components Playground</a>
 */
var ProductSwitch = withWebComponent$1.withWebComponent('ui5-product-switch', [], [], [], []);
ProductSwitch.displayName = 'ProductSwitch';
ProductSwitch.defaultProps = {};

/**
 * The `ProductSwitchItem` web component represents the items displayed in the `ProductSwitch` web component.
 *
 * **Note:** `ProductSwitchItem` is not supported when used outside of `ProductSwitch`.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ProductSwitchItem" target="_blank">UI5 Web Components Playground</a>
 */
var ProductSwitchItem = withWebComponent$1.withWebComponent('ui5-product-switch-item', ['heading', 'icon', 'subtitle', 'target', 'targetSrc'], [], [], ['click']);
ProductSwitchItem.displayName = 'ProductSwitchItem';
ProductSwitchItem.defaultProps = {
  target: '_self'
};

/**
 * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the `ProgressIndicator` is filled with a color.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ProgressIndicator" target="_blank">UI5 Web Components Playground</a>
 */
var ProgressIndicator = withWebComponent$1.withWebComponent('ui5-progress-indicator', ['value', 'valueState'], ['disabled', 'hideValue'], [], []);
ProgressIndicator.displayName = 'ProgressIndicator';
ProgressIndicator.defaultProps = {
  disabled: false,
  hideValue: false,
  value: 0,
  valueState: ValueState.ValueState.None
};

/**
 * The `RadioButton` component enables users to select a single option from a set of options. When a `RadioButton` is selected by the user, the `onSelect` event is fired. When a `RadioButton` that is within a group is selected, the one that was previously selected gets automatically deselected. You can group radio buttons by using the `name` property.
 * **Note:** If `RadioButton` is not part of a group, it can be selected once, but can not be deselected back.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/RadioButton" target="_blank">UI5 Web Components Playground</a>
 */
var RadioButton = withWebComponent$1.withWebComponent('ui5-radiobutton', ['name', 'text', 'value', 'valueState'], ['disabled', 'readonly', 'selected', 'wrap'], [], ['select']);
RadioButton.displayName = 'RadioButton';
RadioButton.defaultProps = {
  disabled: false,
  readonly: false,
  selected: false,
  valueState: ValueState.ValueState.None,
  wrap: false
};

/**
 * Represents a numerical interval and two handles (grips) to select a sub-range within it. The purpose of the component to enable visual selection of sub-ranges within a given interval.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/RangeSlider" target="_blank">UI5 Web Components Playground</a>
 */
var RangeSlider = withWebComponent$1.withWebComponent('ui5-range-slider', ['endValue', 'startValue', 'labelInterval', 'max', 'min', 'step'], ['disabled', 'showTickmarks', 'showTooltip'], [], ['change', 'input']);
RangeSlider.displayName = 'RangeSlider';
RangeSlider.defaultProps = {
  endValue: 100,
  startValue: 0,
  disabled: false,
  labelInterval: 0,
  max: 100,
  min: 0,
  showTickmarks: false,
  showTooltip: false,
  step: 1
};

/**
 * The rating indicator is used to display a specific number of icons that are used to rate an item. Additionally, it is also used to display the average and overall ratings.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/RatingIndicator" target="_blank">UI5 Web Components Playground</a>
 */
var RatingIndicator = withWebComponent$1.withWebComponent('ui5-rating-indicator', ['maxValue', 'value'], ['disabled', 'readonly'], [], ['change']);
RatingIndicator.displayName = 'RatingIndicator';
RatingIndicator.defaultProps = {
  disabled: false,
  maxValue: 5,
  readonly: false,
  value: 0
};

/**
 * The `ResponsivePopover` acts as a Popover on desktop and tablet, while on phone it acts as a Dialog. The component improves tremendously the user experience on mobile.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ResponsivePopover" target="_blank">UI5 Web Components Playground</a>
 */
var ResponsivePopover = withWebComponent$1.withWebComponent('ui5-responsive-popover', ['headerText', 'horizontalAlign', 'placementType', 'verticalAlign', 'initialFocus'], ['allowTargetOverlap', 'hideBackdrop', 'modal', 'noArrow', 'preventFocusRestore'], ['footer', 'header'], ['after-close', 'after-open', 'before-close', 'before-open']);
ResponsivePopover.displayName = 'ResponsivePopover';
ResponsivePopover.defaultProps = {
  allowTargetOverlap: false,
  hideBackdrop: false,
  horizontalAlign: PopoverHorizontalAlign.PopoverHorizontalAlign.Center,
  modal: false,
  noArrow: false,
  placementType: PlacementType.PlacementType.Right,
  verticalAlign: PopoverVerticalAlign.PopoverVerticalAlign.Center,
  preventFocusRestore: false
};

/**
 * The `SegmentedButton` shows a group of buttons. When the user clicks or taps one of the buttons, it stays in a pressed state. It automatically resizes the buttons to fit proportionally within the component. When no width is set, the component uses the available width.
 *
 * **Note:** There can be just one selected `button` at a time.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SegmentedButton" target="_blank">UI5 Web Components Playground</a>
 */
var SegmentedButton = withWebComponent$1.withWebComponent('ui5-segmentedbutton', [], [], [], ['selection-change']);
SegmentedButton.displayName = 'SegmentedButton';
SegmentedButton.defaultProps = {};

/**
 * The `Select` component is used to create a drop-down list. The items inside the `Select` define the available options by using the `Option` component.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Select" target="_blank">UI5 Web Components Playground</a>
 */
var Select = withWebComponent$1.withWebComponent('ui5-select', ['name', 'valueState'], ['disabled', 'required'], ['valueStateMessage'], ['change']);
Select.displayName = 'Select';
Select.defaultProps = {
  disabled: false,
  required: false,
  valueState: ValueState.ValueState.None
};

(function (SemanticColor) {
  SemanticColor["Default"] = "Default";
  SemanticColor["Positive"] = "Positive";
  SemanticColor["Negative"] = "Negative";
  SemanticColor["Critical"] = "Critical";
  SemanticColor["Neutral"] = "Neutral";
})(exports.SemanticColor || (exports.SemanticColor = {}));

/**
 * The `ShellBar` is meant to serve as an application header and includes numerous built-in features, such as: logo, profile image/icon, title, search field, notifications and so on.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ShellBar" target="_blank">UI5 Web Components Playground</a>
 */
var ShellBar = withWebComponent$1.withWebComponent('ui5-shellbar', ['notificationCount', 'primaryTitle', 'secondaryTitle'], ['showCoPilot', 'showNotifications', 'showProductSwitch'], ['logo', 'menuItems', 'profile', 'searchField', 'startButton'], ['co-pilot-click', 'logo-click', 'menu-item-click', 'notifications-click', 'product-switch-click', 'profile-click']);
ShellBar.displayName = 'ShellBar';
ShellBar.defaultProps = {
  showCoPilot: false,
  showNotifications: false,
  showProductSwitch: false
};

/**
 * The `ShellBarItem` represents a custom item, that might be added to the `ShellBar`.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ShellBarItem" target="_blank">UI5 Web Components Playground</a>
 */
var ShellBarItem = withWebComponent$1.withWebComponent('ui5-shellbar-item', ['count', 'icon', 'stableDomRef', 'text'], [], [], ['item-click']);
ShellBarItem.displayName = 'ShellBarItem';
ShellBarItem.defaultProps = {};

/**
 * The `SideNavigation` is used as a standard menu in applications. It consists of three containers: header (top-aligned), main navigation section (top-aligned) and the secondary section (bottom-aligned).
 *
 * *   The header is meant for displaying user related information - profile data, avatar, etc.
 * *   The main navigation section is related to the user’s current work context
 * *   The secondary section is mostly used to link additional information that may be of interest (legal information, developer communities, external help, contact information and so on).
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SideNavigation" target="_blank">UI5 Web Components Playground</a>
 */
var SideNavigation = withWebComponent$1.withWebComponent('ui5-side-navigation', [], ['collapsed'], ['fixedItems', 'header'], ['selection-change']);
SideNavigation.displayName = 'SideNavigation';
SideNavigation.defaultProps = {
  collapsed: false
};

/**
 * The `SideNavigationItem` is used within `SideNavigation` only. Via the `SideNavigationItem` you control the content of the `SideNavigation`.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SideNavigationItem" target="_blank">UI5 Web Components Playground</a>
 */
var SideNavigationItem = withWebComponent$1.withWebComponent('ui5-side-navigation-item', ['icon', 'text'], ['expanded', 'selected', 'wholeItemToggleable'], [], []);
SideNavigationItem.displayName = 'SideNavigationItem';
SideNavigationItem.defaultProps = {
  expanded: false,
  selected: false,
  wholeItemToggleable: false
};

/**
 * The `SideNavigationSubItem` is intended to be used inside a `SideNavigationItem` only.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SideNavigationSubItem" target="_blank">UI5 Web Components Playground</a>
 */
var SideNavigationSubItem = withWebComponent$1.withWebComponent('ui5-side-navigation-sub-item', ['icon', 'text'], ['selected'], [], []);
SideNavigationSubItem.displayName = 'SideNavigationSubItem';
SideNavigationSubItem.defaultProps = {
  selected: false
};

(function (Size) {
  Size["Small"] = "Small";
  Size["Medium"] = "Medium";
  Size["Large"] = "Large";
})(exports.Size || (exports.Size = {}));

/**
 * The Slider component represents a numerical range and a handle (grip). The purpose of the component is to enable visual selection of a value in a continuous numerical range by moving an adjustable handle.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Slider" target="_blank">UI5 Web Components Playground</a>
 */
var Slider = withWebComponent$1.withWebComponent('ui5-slider', ['value', 'labelInterval', 'max', 'min', 'step'], ['disabled', 'showTickmarks', 'showTooltip'], [], ['change', 'input']);
Slider.displayName = 'Slider';
Slider.defaultProps = {
  value: 0,
  disabled: false,
  labelInterval: 0,
  max: 100,
  min: 0,
  showTickmarks: false,
  showTooltip: false,
  step: 1
};

/**
 * The `SuggestionItem` represents the suggestion item of the `Input`
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SuggestionItem" target="_blank">UI5 Web Components Playground</a>
 */
var SuggestionItem = withWebComponent$1.withWebComponent('ui5-suggestion-item', ['description', 'icon', 'image', 'info', 'infoState', 'text', 'type'], ['group', 'iconEnd'], [], []);
SuggestionItem.displayName = 'SuggestionItem';
SuggestionItem.defaultProps = {
  group: false,
  iconEnd: false,
  infoState: ValueState.ValueState.None,
  type: ListItemTypes.ListItemTypes.Active
};

/**
 * The `Switch` component is used for changing between binary states.
 * The component can display texts, that will be switched, based on the component state, via the `textOn` and `textOff` properties, but texts longer than 3 letters will be cutted off.
 * However, users are able to customize the width of `Switch` with pure CSS (`<Switch style={{width: "200px"}} />`), and set widths, depending on the texts they would use.
 * Note: the component would not automatically stretch to fit the whole text width.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Switch" target="_blank">UI5 Web Components Playground</a>
 */
var Switch = withWebComponent$1.withWebComponent('ui5-switch', ['textOff', 'textOn'], ['checked', 'disabled', 'graphical'], [], ['change']);
Switch.displayName = 'Switch';
Switch.defaultProps = {
  checked: false,
  disabled: false,
  graphical: false
};

/**
 * The `Tab` represents a selectable item inside a `Tabcontainer`. It defines both the item in the tab strip (top part of the `Tabcontainer`) and the content that is presented to the user once the tab is selected
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Tab" target="_blank">UI5 Web Components Playground</a>
 */
var Tab = withWebComponent$1.withWebComponent('ui5-tab', ['additionalText', 'icon', 'semanticColor', 'stableDomRef', 'text'], ['disabled', 'selected'], [], []);
Tab.displayName = 'Tab';
Tab.defaultProps = {
  disabled: false,
  selected: false,
  semanticColor: SemanticColor.SemanticColor.Default
};

/**
 * The `TabContainer` represents a collection of tabs with associated content. Navigation through the tabs changes the content display of the currently active content area. A tab can be labeled with text only, or icons with text.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TabContainer" target="_blank">UI5 Web Components Playground</a>
 */
var TabContainer = withWebComponent$1.withWebComponent('ui5-tabcontainer', ['tabLayout', 'tabsPlacement'], ['collapsed', 'fixed', 'showOverflow'], ['overflowButton'], ['tab-select']);
TabContainer.displayName = 'TabContainer';
TabContainer.defaultProps = {
  collapsed: false,
  fixed: false,
  showOverflow: false,
  tabLayout: TabLayout.TabLayout.Standard,
  tabsPlacement: TabContainerTabsPlacement.TabContainerTabsPlacement.Top
};

(function (TabContainerTabsPlacement) {
  TabContainerTabsPlacement["Top"] = "Top";
  TabContainerTabsPlacement["Bottom"] = "Bottom";
})(exports.TabContainerTabsPlacement || (exports.TabContainerTabsPlacement = {}));

(function (TabLayout) {
  TabLayout["Inline"] = "Inline";
  TabLayout["Standard"] = "Standard";
})(exports.TabLayout || (exports.TabLayout = {}));

/**
 * The `TabSeparator` represents a vertical line to separate tabs inside a `TabContainer`
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TabSeparator" target="_blank">UI5 Web Components Playground</a>
 */
var TabSeparator = withWebComponent$1.withWebComponent('ui5-tab-separator', [], [], [], []);
TabSeparator.displayName = 'TabSeparator';
TabSeparator.defaultProps = {};

/**
 * The `Table` component provides a set of sophisticated and convenient functions for responsive table design. It provides a comprehensive set of features for displaying and dealing with vast amounts of data.
 *
 * To render the `Table` properly, the order of the `columns` should match with the order of the item `cells` in the `rows`.
 *
 * Desktop and tablet devices are supported. On tablets, special consideration should be given to the number of visible columns and rows due to the limited performance of some devices.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Table" target="_blank">UI5 Web Components Playground</a>
 */
var Table = withWebComponent$1.withWebComponent('ui5-table', ['loadMoreSubtext', 'loadMoreText', 'noDataText'], ['hasMore', 'showNoData', 'stickyColumnHeader'], ['columns'], ['load-more', 'popin-change', 'row-click']);
Table.displayName = 'Table';
Table.defaultProps = {
  hasMore: false,
  showNoData: false,
  stickyColumnHeader: false
};

/**
 * The `TableCell` component defines the structure of the data in a single `Table` cell
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TableCell" target="_blank">UI5 Web Components Playground</a>
 */
var TableCell = withWebComponent$1.withWebComponent('ui5-table-cell', [], [], [], []);
TableCell.displayName = 'TableCell';
TableCell.defaultProps = {};

/**
 * The `TableColumn` component allows to define column specific properties that are applied when rendering the `Table` component
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TableColumn" target="_blank">UI5 Web Components Playground</a>
 */
var TableColumn = withWebComponent$1.withWebComponent('ui5-table-column', ['minWidth', 'popinText'], ['demandPopin'], [], []);
TableColumn.displayName = 'TableColumn';
TableColumn.defaultProps = {
  demandPopin: false,
  minWidth: Infinity
};

/**
 * The `TableRow` component represents a row in the `Table`
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TableRow" target="_blank">UI5 Web Components Playground</a>
 */
var TableRow$1 = withWebComponent$1.withWebComponent('ui5-table-row', [], [], [], []);
TableRow$1.displayName = 'TableRow';
TableRow$1.defaultProps = {};

(function (TableScaleWidthMode) {
  TableScaleWidthMode["Default"] = "Default";
  TableScaleWidthMode["Smart"] = "Smart";
  TableScaleWidthMode["Grow"] = "Grow";
})(exports.TableScaleWidthMode || (exports.TableScaleWidthMode = {}));

(function (TableSelectionBehavior) {
  TableSelectionBehavior["ROW"] = "Row";
  TableSelectionBehavior["ROW_ONLY"] = "RowOnly";
  TableSelectionBehavior["ROW_SELECTOR"] = "RowSelector";
})(exports.TableSelectionBehavior || (exports.TableSelectionBehavior = {}));

(function (TableSelectionMode) {
  TableSelectionMode["NONE"] = "None";
  TableSelectionMode["SINGLE_SELECT"] = "SingleSelect";
  TableSelectionMode["MULTI_SELECT"] = "MultiSelect";
})(exports.TableSelectionMode || (exports.TableSelectionMode = {}));

(function (TableVisibleRowCountMode) {
  TableVisibleRowCountMode["FIXED"] = "Fixed";
  TableVisibleRowCountMode["AUTO"] = "Auto";
  TableVisibleRowCountMode["INTERACTIVE"] = "Interactive";
})(exports.TableVisibleRowCountMode || (exports.TableVisibleRowCountMode = {}));

var TextStyles = {
  // Text Style
  text: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapTextColor,
    display: 'inline-block',
    boxSizing: 'border-box',
    whiteSpace: 'pre-line',
    wordWrap: 'break-word',
    maxWidth: '100%'
  },
  renderWhitespace: {
    whiteSpace: 'pre-wrap'
  },
  noWrap: {
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    wordWrap: 'normal',
    overflow: 'hidden',
    '&$renderWhitespace': {
      whiteSpace: 'pre'
    }
  }
};

var useStyles$w = reactJss.createUseStyles(TextStyles, {
  name: 'Text'
});
/**
 * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.
 * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.
 */

var Text = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      renderWhitespace = props.renderWhitespace,
      wrapping = props.wrapping,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot;
  var classes = useStyles$w();
  var classNameString = StyleClassHelper.StyleClassHelper.of(classes.text);

  if (wrapping === false) {
    classNameString.put(classes.noWrap);
  }

  if (renderWhitespace) {
    classNameString.put(classes.renderWhitespace);
  }

  if (className) {
    classNameString.put(className);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default['default'].createElement("span", _extends__default['default']({
    ref: ref,
    style: style,
    className: classNameString.toString(),
    title: tooltip,
    slot: slot
  }, passThroughProps), children);
});
Text.defaultProps = {
  renderWhitespace: false,
  wrapping: true
};
Text.displayName = 'Text';

(function (TextAlign) {
  TextAlign["Begin"] = "Begin";
  TextAlign["End"] = "End";
  TextAlign["Left"] = "Left";
  TextAlign["Right"] = "Right";
  TextAlign["Center"] = "Center";
  TextAlign["Initial"] = "Initial";
})(exports.TextAlign || (exports.TextAlign = {}));

/**
 * The `TextArea` component provides large spaces for text entries in the form of multiple rows. It has the functionality of the `TextField` with the additional functionality for multiline texts.
 *
 * When empty, it can hold a placeholder similar to a `Input`. You can define the rows of the `TextArea` and also determine specific behavior when handling long texts.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TextArea" target="_blank">UI5 Web Components Playground</a>
 */
var TextArea = withWebComponent$1.withWebComponent('ui5-textarea', ['growingMaxLines', 'maxlength', 'name', 'placeholder', 'rows', 'value', 'valueState'], ['disabled', 'growing', 'readonly', 'required', 'showExceededText'], ['valueStateMessage'], ['change', 'input']);
TextArea.displayName = 'TextArea';
TextArea.defaultProps = {
  disabled: false,
  growing: false,
  growingMaxLines: 0,
  maxlength: null,
  readonly: false,
  required: false,
  rows: 0,
  showExceededText: false,
  valueState: ValueState.ValueState.None
};

var GlobalStyleClassesStyles = {
  '@global': _defineProperty__default['default']({}, ".".concat(GlobalStyleClasses.GlobalStyleClasses.sapScrollBar), {
    '&::-webkit-scrollbar': {
      backgroundColor: ThemingParameters.ThemingParameters.sapScrollBar_TrackColor,
      '&:horizontal': {
        height: ThemingParameters.ThemingParameters.sapScrollBar_Dimension
      },
      '&:vertical': {
        width: ThemingParameters.ThemingParameters.sapScrollBar_Dimension
      }
    },
    '&::-webkit-scrollbar-thumb': {
      backgroundColor: ThemingParameters.ThemingParameters.sapScrollBar_FaceColor,
      borderRadius: '0.25rem',
      '&:hover': {
        backgroundColor: ThemingParameters.ThemingParameters.sapScrollBar_Hover_FaceColor
      },
      '&:horizontal': {
        height: ThemingParameters.ThemingParameters.sapScrollBar_Dimension
      },
      '&:vertical': {
        width: ThemingParameters.ThemingParameters.sapScrollBar_Dimension
      }
    },
    '&::-webkit-scrollbar-corner': {
      backgroundColor: ThemingParameters.ThemingParameters.sapScrollBar_TrackColor
    }
  })
};

var useStyles$x = reactJss.createUseStyles(GlobalStyleClassesStyles);

var cssVarsPonyfillNeeded = function cssVarsPonyfillNeeded() {
  return !!window.CSSVarsPonyfill;
};

// inject the size variables first before the ThemeProvider Component is mounted, otherwise there will be some flickering
if (!document.querySelector('style[data-ui5-webcomponents-react-sizes]')) {
  var variables = document.createElement('style');
  variables.setAttribute('data-ui5-webcomponents-react-sizes', '');
  variables.innerHTML = CssSizeVariables.cssVariablesStyles;
  document.head.appendChild(variables);
}

var ThemeProvider = function ThemeProvider(props) {
  var children = props.children;
  var isCompactSize = document.body.classList.contains('ui5-content-density-compact');
  useStyles$x();
  var theme = Theme.getTheme();
  var themeContext = React.useMemo(function () {
    return {
      theme: theme,
      contentDensity: isCompactSize ? ContentDensity.ContentDensity.Compact : ContentDensity.ContentDensity.Cozy,
      parameters: ThemingParameters.ThemingParameters,
      rtl: RTL.getRTL()
    };
  }, [theme, isCompactSize]);
  React.useEffect(function () {
    if (cssVarsPonyfillNeeded()) {
      window.CSSVarsPonyfill.cssVars({
        rootElement: document.head,
        include: 'style[data-ui5-webcomponents-react-sizes],style[data-jss]',
        watch: true,
        silent: true
      });
    }
  }, []); // init default media range sets

  hooks.useIsomorphicLayoutEffect(function () {
    Device.initRangeSet();
    Device.initRangeSet(Device.RANGESETS.SAP_STANDARD_EXTENDED);
    i18nBundle.fetchI18nBundle('@ui5/webcomponents-react');
  }, []);
  return /*#__PURE__*/React__default['default'].createElement(reactJss.ThemeProvider, {
    theme: themeContext
  }, children);
};

ThemeProvider.displayName = 'ThemeProvider';

(function (Themes) {
  Themes["sap_fiori_3"] = "sap_fiori_3";
  Themes["sap_fiori_3_dark"] = "sap_fiori_3_dark";
  Themes["sap_fiori_3_hcb"] = "sap_fiori_3_hcb";
  Themes["sap_fiori_3_hcw"] = "sap_fiori_3_hcw";
  Themes["sap_belize"] = "sap_belize";
  Themes["sap_belize_hcb"] = "sap_belize_hcb";
  Themes["sap_belize_hcw"] = "sap_belize_hcw";
})(exports.Themes || (exports.Themes = {}));

/**
 * The `TimePicker` component provides an input field with assigned sliders which opens on user action. The `TimePicker` allows users to select a localized time using touch, mouse, or keyboard input. It consists of two parts: the time input field and the sliders.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TimePicker" target="_blank">UI5 Web Components Playground</a>
 */
var TimePicker = withWebComponent$1.withWebComponent('ui5-time-picker', ['formatPattern', 'placeholder', 'value', 'valueState'], ['disabled', 'readonly'], ['valueStateMessage'], ['change', 'input']);
TimePicker.displayName = 'TimePicker';
TimePicker.defaultProps = {
  disabled: false,
  placeholder: undefined,
  readonly: false,
  value: undefined,
  valueState: ValueState.ValueState.None
};

/**
 * The `Timeline` component shows entries (such as objects, events, or posts) in chronological order. A common use case is to provide information about changes to an object, or events related to an object. These entries can be generated by the system (for example, value XY changed from A to B), or added manually. There are two distinct variants of the timeline: basic and social. The basic timeline is read-only, while the social timeline offers a high level of interaction and collaboration, and is integrated within SAP Jam
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Timeline" target="_blank">UI5 Web Components Playground</a>
 */
var Timeline = withWebComponent$1.withWebComponent('ui5-timeline', [], [], [], []);
Timeline.displayName = 'Timeline';
Timeline.defaultProps = {};

/**
 * An entry posted on the timeline
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TimelineItem" target="_blank">UI5 Web Components Playground</a>
 */
var TimelineItem = withWebComponent$1.withWebComponent('ui5-timeline-item', ['icon', 'itemName', 'subtitleText', 'titleText'], ['itemNameClickable'], [], ['item-name-click']);
TimelineItem.displayName = 'TimelineItem';
TimelineItem.defaultProps = {
  itemNameClickable: false
};

/**
 * The `Title` component is used to display titles inside a page. It is a simple, large-sized text with explicit header/title semantics.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Title" target="_blank">UI5 Web Components Playground</a>
 */
var Title = withWebComponent$1.withWebComponent('ui5-title', ['level'], ['wrap'], [], []);
Title.displayName = 'Title';
Title.defaultProps = {
  level: TitleLevel.TitleLevel.H2,
  wrap: false
};

(function (TitleLevel) {
  TitleLevel["H1"] = "H1";
  TitleLevel["H2"] = "H2";
  TitleLevel["H3"] = "H3";
  TitleLevel["H4"] = "H4";
  TitleLevel["H5"] = "H5";
  TitleLevel["H6"] = "H6";
})(exports.TitleLevel || (exports.TitleLevel = {}));

/**
 * The `Toast` is a small, non-disruptive popup for success or information messages that disappears automatically after a few seconds.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Toast" target="_blank">UI5 Web Components Playground</a>
 */
var Toast = withWebComponent$1.withWebComponent('ui5-toast', ['duration', 'placement'], [], [], []);
Toast.displayName = 'Toast';
Toast.defaultProps = {
  duration: 3000,
  placement: ToastPlacement.ToastPlacement.BottomCenter
};

(function (ToastPlacement) {
  ToastPlacement["TopStart"] = "TopStart";
  ToastPlacement["TopCenter"] = "TopCenter";
  ToastPlacement["TopEnd"] = "TopEnd";
  ToastPlacement["MiddleStart"] = "MiddleStart";
  ToastPlacement["MiddleCenter"] = "MiddleCenter";
  ToastPlacement["MiddleEnd"] = "MiddleEnd";
  ToastPlacement["BottomStart"] = "BottomStart";
  ToastPlacement["BottomCenter"] = "BottomCenter";
  ToastPlacement["BottomEnd"] = "BottomEnd";
})(exports.ToastPlacement || (exports.ToastPlacement = {}));

/**
 * The `ToggleButton` component is an enhanced `Button` that can be toggled between pressed and normal states. Users can use the `ToggleButton` as a switch to turn a setting on or off. It can also be used to represent an independent choice similar to a check box.
 *
 * Clicking or tapping on a `ToggleButton` changes its state to `pressed`. The button returns to its initial state when the user clicks or taps on it again. By applying additional custom CSS-styling classes, apps can give a different style to any `ToggleButton`.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ToggleButton" target="_blank">UI5 Web Components Playground</a>
 */
var ToggleButton = withWebComponent$1.withWebComponent('ui5-togglebutton', ['design', 'icon', 'iconSize'], ['pressed', 'disabled', 'iconEnd', 'submits'], [], ['click']);
ToggleButton.displayName = 'ToggleButton';
ToggleButton.defaultProps = {
  pressed: false,
  design: ButtonDesign.ButtonDesign.Default,
  disabled: false,
  iconEnd: false,
  iconSize: undefined,
  submits: false
};

/**
 * Tokens are small items of information (similar to tags) that mainly serve to visualize previously selected items.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Token" target="_blank">UI5 Web Components Playground</a>
 */
var Token = withWebComponent$1.withWebComponent('ui5-token', ['text'], ['readonly', 'selected'], ['closeIcon'], ['select']);
Token.displayName = 'Token';
Token.defaultProps = {};

var OverflowPopover = function OverflowPopover(props) {
  var lastVisibleIndex = props.lastVisibleIndex,
      contentClass = props.contentClass,
      children = props.children;
  var popoverRef = React.useRef();

  var _useState = React.useState(false),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      pressed = _useState2[0],
      setPressed = _useState2[1];

  var handleToggleButtonClick = React.useCallback(function (e) {
    if (popoverRef.current) {
      if (!pressed) {
        popoverRef.current.openBy(e.target);
        setPressed(true);
      } else {
        popoverRef.current.close();
      }
    }
  }, [pressed]);
  React.useEffect(function () {
    return function () {
      if (popoverRef.current) {
        popoverRef.current.close();
      }
    };
  }, []);
  var handleClose = React.useCallback(function (e) {
    stopPropagation(e);
    setPressed(false);
  }, [setPressed]);
  var renderChildren = React.useCallback(function () {
    return React__default['default'].Children.toArray((children === null || children === void 0 ? void 0 : children.type) === React__default['default'].Fragment ? children.props.children : children).map(function (item, index) {
      if (index > lastVisibleIndex) {
        if (item.type.displayName === 'ToolbarSeparator') {
          return /*#__PURE__*/React__default['default'].cloneElement(item, {
            style: {
              height: '0.0625rem',
              margin: '0.375rem 0.1875rem',
              width: '100%'
            }
          });
        }

        return item;
      }

      return null;
    });
  }, [children, lastVisibleIndex]);
  return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(ToggleButton$1.ToggleButton, {
    design: ButtonDesign.ButtonDesign.Transparent,
    icon: "overflow",
    onClick: handleToggleButtonClick,
    pressed: pressed
  }), /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default['default'].createElement(Popover$1.Popover, {
    placementType: PlacementType.PlacementType.Bottom,
    ref: popoverRef,
    onAfterClose: handleClose
  }, /*#__PURE__*/React__default['default'].createElement("div", {
    className: contentClass
  }, renderChildren())), document.body));
};

var styles$o = {
  outerContainer: {
    width: '100%',
    height: CssSizeVariables.CssSizeVariables.sapWcrToolbarHeight,
    position: 'relative',
    overflow: 'hidden',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottom: "solid 0.0625rem ".concat(ThemingParameters.ThemingParameters.sapGroup_TitleBorderColor)
  },
  hasOverflow: {
    '& $toolbar': {
      maxWidth: 'calc(100% - 44px)'
    }
  },
  clear: {
    borderBottom: 'none'
  },
  active: {
    cursor: 'pointer',
    '&:active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapActiveColor
    },
    '&:hover': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_Background
    }
  },
  info: {
    // This color is most similar to darken(@sapUiBaseColor, 10)
    backgroundColor: ThemingParameters.ThemingParameters.sapList_HeaderBorderColor,
    '&$active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapInfobar_Active_Background,
      '&:active': {
        backgroundColor: "".concat(ThemingParameters.ThemingParameters.sapInfobar_Active_Background)
      },
      '&:hover': {
        backgroundColor: ThemingParameters.ThemingParameters.sapInfobar_Hover_Background
      }
    }
  },
  solid: {
    backgroundColor: ThemingParameters.ThemingParameters.sapBackgroundColor
  },
  transparent: {
    backgroundColor: ThemingParameters.ThemingParameters.sapToolbar_Background
  },
  toolbar: {
    width: '100%',
    '& >:first-child:not(.spacer)': {
      margin: '0 0.25rem 0 0'
    },
    '& >:last-child:not(.spacer)': {
      margin: '0 0.5rem 0 0.25rem'
    },
    '& > *:not(first-child):not(last-child):not(.spacer)': {
      margin: '0 0.25rem'
    },
    display: 'flex',
    alignItems: 'center',
    maxWidth: '100%'
  },
  overflowButtonContainer: {
    marginRight: '0.5rem'
  },
  popoverContent: {
    maxWidth: '20rem',
    padding: CssSizeVariables.CssSizeVariables.sapWcrToolbarPopoverContentPadding,
    display: 'flex',
    flexDirection: 'column'
  }
};

var useStyles$y = reactJss.createUseStyles(styles$o, {
  name: 'Toolbar'
});

/**
 * Horizontal container most commonly used to display buttons, labels, selects and various other input controls.
 *
 * The content of the `Toolbar` moves into the overflow area from right to left when the available space is not enough in the visible area of the container.
 * It can be accessed by the user through the overflow button that opens it in a popover.
 */
var Toolbar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      toolbarStyle = props.toolbarStyle,
      design = props.design,
      active = props.active,
      style = props.style,
      tooltip = props.tooltip,
      className = props.className,
      onClick = props.onClick,
      slot = props.slot;
  var classes = useStyles$y(styles$o);
  var outerContainer = hooks.useConsolidatedRef(ref);
  var controlMetaData = React.useRef([]);

  var _useState = React.useState(null),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      lastVisibleIndex = _useState2[0],
      setLastVisibleIndex = _useState2[1];

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onClick']);
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  var toolbarClasses = StyleClassHelper.StyleClassHelper.of(classes.outerContainer);

  if (toolbarStyle === ToolbarStyle.ToolbarStyle.Clear) {
    toolbarClasses.put(classes.clear);
  }

  if (active) {
    toolbarClasses.put(classes.active);
  }

  switch (design) {
    case ToolbarDesign.ToolbarDesign.Solid:
      toolbarClasses.put(classes.solid);
      break;

    case ToolbarDesign.ToolbarDesign.Transparent:
      toolbarClasses.put(classes.transparent);
      break;

    case ToolbarDesign.ToolbarDesign.Info:
      toolbarClasses.put(classes.info);
      break;
  }

  toolbarClasses.putIfPresent(className);
  var childrenWithRef = React.useMemo(function () {
    controlMetaData.current = [];
    var refactoredChildren = React__default['default'].Children.toArray(children).map(function (child, index) {
      if (child.type === React__default['default'].Fragment) {
        return child.props.children.filter(Boolean).map(function (item, itemIndex) {
          return /*#__PURE__*/React.cloneElement(item, {
            key: ".".concat(index, ":").concat(itemIndex)
          });
        });
      }

      return child;
    });
    return refactoredChildren.flat().map(function (item, index) {
      var _item$type;

      var itemRef = /*#__PURE__*/React.createRef();
      controlMetaData.current.push({
        ref: itemRef
      }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

      if ((item === null || item === void 0 ? void 0 : (_item$type = item.type) === null || _item$type === void 0 ? void 0 : _item$type.displayName) === 'ToolbarSpacer') {
        return item;
      }

      return /*#__PURE__*/React__default['default'].createElement("div", {
        ref: itemRef,
        key: index
      }, item);
    });
  }, [children, controlMetaData]);
  var overflowNeeded = (lastVisibleIndex || lastVisibleIndex === 0) && React__default['default'].Children.count(childrenWithRef) !== lastVisibleIndex + 1;
  toolbarClasses.putIfPresent(overflowNeeded && classes.hasOverflow);
  var calculateVisibleItems = React.useCallback(function () {
    var OVERFLOW_BUTTON_WIDTH = 32 + 8;
    requestAnimationFrame(function () {
      if (!outerContainer.current) return;
      var availableWidth = outerContainer.current.getBoundingClientRect().width;
      var consumedWidth = 0;
      var lastIndex = null;

      if (availableWidth - OVERFLOW_BUTTON_WIDTH <= 0) {
        lastIndex = -1;
      } else {
        controlMetaData.current.forEach(function (item, index) {
          var currentMeta = controlMetaData.current[index];

          if (currentMeta && currentMeta.ref && currentMeta.ref.current) {
            var nextWidth = currentMeta.ref.current.getBoundingClientRect().width;
            nextWidth += index === 0 || index === controlMetaData.current.length - 1 ? 4 : 8; // first & last element = padding: 4px

            if (index === controlMetaData.current.length - 1) {
              if (consumedWidth + nextWidth <= availableWidth - 8) {
                lastIndex = index;
              }
            } else {
              if (consumedWidth + nextWidth <= availableWidth - OVERFLOW_BUTTON_WIDTH) {
                lastIndex = index;
              }

              if (consumedWidth < availableWidth - OVERFLOW_BUTTON_WIDTH && consumedWidth + nextWidth >= availableWidth - OVERFLOW_BUTTON_WIDTH) {
                lastIndex = index - 1;
              }
            }

            consumedWidth += nextWidth;
          }
        });
      }

      setLastVisibleIndex(lastIndex);
    });
  }, [outerContainer.current, controlMetaData.current, setLastVisibleIndex, childrenWithRef, overflowNeeded]);
  var observer = React.useRef(new ResizeObserver(calculateVisibleItems));
  React.useEffect(function () {
    if (outerContainer.current) {
      observer.current.observe(outerContainer.current);
    }

    return function () {
      observer.current.disconnect();
    };
  }, [outerContainer.current]);
  React.useLayoutEffect(function () {
    calculateVisibleItems();
  }, [calculateVisibleItems]);
  var handleToolbarClick = React.useCallback(function (e) {
    if (active && typeof onClick === 'function') {
      onClick(Utils.enrichEventWithDetails(e));
    }
  }, [onClick, active]);
  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    title: tooltip,
    style: style,
    className: toolbarClasses.className,
    ref: outerContainer,
    slot: slot,
    onClick: handleToolbarClick
  }, passThroughProps), /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.toolbar
  }, overflowNeeded && React__default['default'].Children.map(childrenWithRef, function (item, index) {
    if (index >= lastVisibleIndex + 1) {
      return /*#__PURE__*/React__default['default'].cloneElement(item, {
        style: {
          visibility: 'hidden'
        }
      });
    }

    return item;
  }), !overflowNeeded && childrenWithRef), overflowNeeded && /*#__PURE__*/React__default['default'].createElement("div", {
    className: classes.overflowButtonContainer,
    title: i18nBundle.getText(i18nDefaults.SHOW_MORE)
  }, /*#__PURE__*/React__default['default'].createElement(OverflowPopover, {
    lastVisibleIndex: lastVisibleIndex,
    contentClass: classes.popoverContent
  }, React__default['default'].Children.toArray(children).map(function (child) {
    if (child.type === React__default['default'].Fragment) {
      return child.props.children;
    }

    return child;
  }))));
});
Toolbar.defaultProps = {
  toolbarStyle: ToolbarStyle.ToolbarStyle.Standard,
  design: ToolbarDesign.ToolbarDesign.Auto,
  active: false
};
Toolbar.displayName = 'Toolbar';

(function (ToolbarDesign) {
  ToolbarDesign["Auto"] = "Auto";
  ToolbarDesign["Info"] = "Info";
  ToolbarDesign["Solid"] = "Solid";
  ToolbarDesign["Transparent"] = "Transparent";
})(exports.ToolbarDesign || (exports.ToolbarDesign = {}));

var styles$p = {
  separator: {
    width: '0.0625rem',
    height: CssSizeVariables.CssSizeVariables.sapWcrToolbarSeparatorHeight,
    background: ThemingParameters.ThemingParameters.sapToolbar_SeparatorColor
  }
};
var useStyles$z = reactJss.createUseStyles(styles$p, {
  name: 'ToolbarSeparator'
});

var ToolbarSeparator = function ToolbarSeparator(props) {
  var style = props.style,
      className = props.className;
  var classes = useStyles$z(styles$p);
  var separatorClasses = StyleClassHelper.StyleClassHelper.of(classes.separator);
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');

  if (className) {
    separatorClasses.put(className);
  }

  return /*#__PURE__*/React__default['default'].createElement("div", {
    style: style,
    className: separatorClasses.valueOf(),
    "aria-label": i18nBundle.getText(i18nDefaults.SEPARATOR)
  });
};

ToolbarSeparator.displayName = 'ToolbarSeparator';

var ToolbarSpacer = function ToolbarSpacer() {
  return /*#__PURE__*/React__default['default'].createElement("span", {
    style: {
      flexGrow: 1
    },
    className: "spacer"
  });
};

ToolbarSpacer.displayName = 'ToolbarSpacer';

(function (ToolbarStyle) {
  ToolbarStyle["Clear"] = "Clear";
  ToolbarStyle["Standard"] = "Standard";
})(exports.ToolbarStyle || (exports.ToolbarStyle = {}));

/**
 * The `Tree` component provides a tree structure for displaying data in a hierarchy.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Tree" target="_blank">UI5 Web Components Playground</a>
 */
var Tree = withWebComponent$1.withWebComponent('ui5-tree', ['footerText', 'headerText', 'mode', 'noDataText'], [], ['header'], ['item-click', 'item-delete', 'item-toggle', 'selection-change']);
Tree.displayName = 'Tree';
Tree.defaultProps = {
  mode: ListMode.ListMode.None
};

/**
 * This is the item to use inside a `Tree`. You can represent an arbitrary tree structure by recursively nesting tree items.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TreeItem" target="_blank">UI5 Web Components Playground</a>
 */
var TreeItem = withWebComponent$1.withWebComponent('ui5-tree-item', ['icon', 'text'], ['expanded', 'hasChildren', 'selected'], [], []);
TreeItem.displayName = 'TreeItem';
TreeItem.defaultProps = {
  expanded: false,
  hasChildren: false,
  selected: false
};

/**
 * This component allows you to represent files before uploading them to a server, with the help of `UploadCollectionItem`. It also allows you to show already uploaded files.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/UploadCollection" target="_blank">UI5 Web Components Playground</a>
 */
var UploadCollection = withWebComponent$1.withWebComponent('ui5-upload-collection', ['mode', 'noDataDescription', 'noDataText'], ['noDnd'], ['header'], ['drop', 'file-deleted', 'selection-change']);
UploadCollection.displayName = 'UploadCollection';
UploadCollection.defaultProps = {
  mode: ListMode.ListMode.None,
  noDnd: false
};

/**
 * A component to be used within the `UploadCollection`.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/UploadCollectionItem" target="_blank">UI5 Web Components Playground</a>
 */
var UploadCollectionItem = withWebComponent$1.withWebComponent('ui5-upload-collection-item', ['file', 'fileName', 'progress', 'uploadState'], ['fileNameClickable', 'noDelete', 'noRetry', 'noTerminate'], ['thumbnail'], ['file-name-click', 'rename', 'retry', 'terminate']);
UploadCollectionItem.displayName = 'UploadCollectionItem';
UploadCollectionItem.defaultProps = {
  file: null,
  fileNameClickable: false,
  noDelete: false,
  noRetry: false,
  noTerminate: false,
  progress: 0,
  uploadState: UploadState.UploadState.Ready
};

(function (UploadState) {
  UploadState["Complete"] = "Complete";
  UploadState["Error"] = "Error";
  UploadState["Ready"] = "Ready";
  UploadState["Uploading"] = "Uploading";
})(exports.UploadState || (exports.UploadState = {}));

(function (ValueState) {
  ValueState["Error"] = "Error";
  ValueState["None"] = "None";
  ValueState["Success"] = "Success";
  ValueState["Warning"] = "Warning";
  ValueState["Information"] = "Information";
})(exports.ValueState || (exports.ValueState = {}));

var styles$q = {
  container: {
    display: 'flex',
    alignItems: 'center',
    textAlign: 'center',
    cursor: 'pointer'
  },
  title: {
    cursor: 'pointer',
    color: ThemingParameters.ThemingParameters.sapButton_TextColor,
    '&:hover': {
      color: ThemingParameters.ThemingParameters.sapButton_Hover_TextColor
    }
  },
  disabled: {
    '& $title': {
      color: ThemingParameters.ThemingParameters.sapGroup_TitleTextColor,
      cursor: 'default',
      '&:hover': {
        color: 'ThemingParameters.sapGroup_TitleTextColor'
      }
    }
  },
  footer: {
    margin: '0.4375rem 1rem 0.4325rem auto'
  }
};
var useStyles$A = reactJss.createUseStyles(styles$q, {
  name: 'VariantManagement'
});
/**
 * The `VariantManagement` component can be used to manage variants, such as FilterBar variants or AnalyticalTable variants.
 */

var VariantManagement = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _ref, _props$selectedKey, _variantItems$;

  var variantItems = props.variantItems,
      popupTitle = props.popupTitle,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      placement = props.placement,
      level = props.level,
      onSelect = props.onSelect,
      closeOnItemSelect = props.closeOnItemSelect,
      disabled = props.disabled;
  var classes = useStyles$A();
  var popoverRef = React.useRef(null);

  var _useState = React.useState((_ref = (_props$selectedKey = props.selectedKey) !== null && _props$selectedKey !== void 0 ? _props$selectedKey : variantItems === null || variantItems === void 0 ? void 0 : (_variantItems$ = variantItems[0]) === null || _variantItems$ === void 0 ? void 0 : _variantItems$.key) !== null && _ref !== void 0 ? _ref : null),
      _useState2 = _slicedToArray__default['default'](_useState, 2),
      selectedKey = _useState2[0],
      setSelectedKey = _useState2[1];

  React.useEffect(function () {
    if (props.selectedKey) {
      setSelectedKey(props.selectedKey);
    }
  }, [props.selectedKey, setSelectedKey]);
  var handleCancelButtonClick = React.useCallback(function () {
    popoverRef.current.close();
  }, [popoverRef]);
  var handleOpenVariantManagement = React.useCallback(function (e) {
    popoverRef.current.open(e.target);
  }, [popoverRef]);
  var i18nBundle = hooks.useI18nBundle('@ui5/webcomponents-react');
  var text = i18nBundle.getText(i18nDefaults.CANCEL);
  var footerButtons = React.useMemo(function () {
    return /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
      className: classes.footer,
      onClick: handleCancelButtonClick,
      design: ButtonDesign.ButtonDesign.Emphasized
    }, text);
  }, [classes.footer, handleCancelButtonClick, text]);

  var getItemByKey = function getItemByKey(key) {
    return variantItems === null || variantItems === void 0 ? void 0 : variantItems.find(function (item) {
      return item.key === key;
    });
  };

  var selectedItem = getItemByKey(selectedKey) || variantItems[0];
  var variantManagementClasses = StyleClassHelper.StyleClassHelper.of(classes.container);

  if (disabled) {
    variantManagementClasses.put(classes.disabled);
  }

  if (className) {
    variantManagementClasses.put(className);
  }

  var handleVariantItemSelect = React.useCallback(function (event) {
    var newSelectedKey = event.detail.item.dataset.key;
    setSelectedKey(newSelectedKey);
    onSelect(Utils.enrichEventWithDetails(event, _objectSpread__default['default'](_objectSpread__default['default']({}, event.details), {}, {
      selectedItem: getItemByKey(newSelectedKey) || variantItems[0]
    })));

    if (closeOnItemSelect) {
      handleCancelButtonClick();
    }
  }, [handleCancelButtonClick, closeOnItemSelect, selectedKey, variantItems, setSelectedKey]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onSelect']);

  if (!variantItems || variantItems.length < 1) {
    return null;
  }

  return /*#__PURE__*/React__default['default'].createElement("div", _extends__default['default']({
    className: variantManagementClasses.valueOf(),
    style: style,
    title: tooltip
  }, passThroughProps, {
    ref: ref
  }), /*#__PURE__*/React__default['default'].createElement(Title$1.Title, {
    level: level,
    className: classes.title
  }, selectedItem.label), /*#__PURE__*/React__default['default'].createElement(Button$1.Button, {
    onClick: handleOpenVariantManagement,
    design: ButtonDesign.ButtonDesign.Transparent,
    icon: "navigation-down-arrow",
    disabled: disabled
  }), /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default['default'].createElement(ResponsivePopover$1.ResponsivePopover, {
    ref: popoverRef,
    headerText: popupTitle,
    placementType: placement,
    footer: footerButtons,
    onAfterClose: stopPropagation
  }, /*#__PURE__*/React__default['default'].createElement(List$1.List, {
    onItemClick: handleVariantItemSelect,
    mode: ListMode.ListMode.SingleSelect
  }, variantItems.map(function (item) {
    return /*#__PURE__*/React__default['default'].createElement(StandardListItem$1.StandardListItem, {
      style: {
        width: '300px'
      },
      "data-key": item.key,
      type: ListItemTypes.ListItemTypes.Active,
      key: item.key,
      selected: selectedKey === item.key
    }, item.label);
  }))), document.body));
});
VariantManagement.defaultProps = {
  popupTitle: 'Variants',
  selectedKey: null,
  onSelect: function onSelect() {},
  closeOnItemSelect: true,
  placement: PlacementType.PlacementType.Bottom,
  level: TitleLevel.TitleLevel.H4,
  disabled: false,
  variantItems: []
};
VariantManagement.displayName = 'VariantManagement';

(function (VerticalAlign) {
  VerticalAlign["Bottom"] = "Bottom";
  VerticalAlign["Inherit"] = "Inherit";
  VerticalAlign["Middle"] = "Middle";
  VerticalAlign["Top"] = "Top";
})(exports.VerticalAlign || (exports.VerticalAlign = {}));

/**
 * The `Wizard` helps users complete a complex task by dividing it into sections and guiding the user through it. It has two main areas - a navigation area at the top showing the step sequence and a content area below it.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Wizard" target="_blank">UI5 Web Components Playground</a>
 */
var Wizard = withWebComponent$1.withWebComponent('ui5-wizard', [], [], [], ['selection-change']);
Wizard.displayName = 'Wizard';
Wizard.defaultProps = {};

/**
 * A component that represents a logical step as part of the `Wizard`. It is meant to aggregate arbitrary HTML elements that forms the content of a single step.
 *
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/WizardStep" target="_blank">UI5 Web Components Playground</a>
 */
var WizardStep = withWebComponent$1.withWebComponent('ui5-wizard-step', ['heading', 'icon', 'subheading'], ['branching', 'disabled', 'selected'], [], []);
WizardStep.displayName = 'WizardStep';
WizardStep.defaultProps = {
  branching: false,
  disabled: false,
  selected: false
};

var capitalizeFirstLetter = function capitalizeFirstLetter(s) {
  return s.charAt(0).toUpperCase() + s.slice(1);
};

var camelToKebabCase = function camelToKebabCase(s) {
  return s.replace(/([A-Z])/g, function (a, b) {
    return "-".concat(b.toLowerCase());
  });
};

var kebabToCamelCase = function kebabToCamelCase(str) {
  return str.replace(/([-_]\w)/g, function (g) {
    return g[1].toUpperCase();
  });
};

var createEventPropName = function createEventPropName(eventName) {
  return "on".concat(capitalizeFirstLetter(kebabToCamelCase(eventName)));
};

var withWebComponent = function withWebComponent(tagName, regularProperties, booleanProperties, slotProperties, eventProperties) {
  var WithWebComponent = /*#__PURE__*/React.forwardRef(function (props, wcRef) {
    var className = props.className,
        tooltip = props.tooltip,
        children = props.children,
        rest = _objectWithoutProperties__default['default'](props, ["className", "tooltip", "children"]);

    var ref = useConsolidatedRef.useConsolidatedRef(wcRef);
    var eventRegistry = React.useRef({}); // regular props (no booleans, no slots and no events)

    var regularProps = regularProperties.reduce(function (acc, name) {
      if (rest.hasOwnProperty(name)) {
        return _objectSpread__default['default'](_objectSpread__default['default']({}, acc), {}, _defineProperty__default['default']({}, camelToKebabCase(name), rest[name]));
      }

      return acc;
    }, {}); // boolean properties - only attach if they are truthy

    var booleanProps = booleanProperties.reduce(function (acc, name) {
      if (rest[name] === true || rest[name] === 'true') {
        return _objectSpread__default['default'](_objectSpread__default['default']({}, acc), {}, _defineProperty__default['default']({}, camelToKebabCase(name), true));
      }

      return acc;
    }, {});
    var slots = slotProperties.reduce(function (acc, name) {
      var slotValue = rest[name];
      if (!slotValue) return acc;
      var slottedChildren = [];
      var index = 0;

      var removeFragments = function removeFragments(element) {
        if (!element) return;

        if (element.type === React__default['default'].Fragment) {
          var _element$props;

          React.Children.toArray((_element$props = element.props) === null || _element$props === void 0 ? void 0 : _element$props.children).filter(Boolean).forEach(function (item) {
            removeFragments(item);
          });
        } else {
          slottedChildren.push( /*#__PURE__*/React.cloneElement(element, {
            key: "".concat(name, "-").concat(index),
            slot: name
          }));
          index++;
        }
      };

      if (Array.isArray(slotValue)) {
        slotValue.forEach(function (item) {
          removeFragments(item);
        });
      } else {
        removeFragments(slotValue);
      }

      return [].concat(_toConsumableArray__default['default'](acc), slottedChildren);
    }, []); // event binding

    React.useEffect(function () {
      eventProperties.forEach(function (eventName) {
        var eventHandler = rest[createEventPropName(eventName)];

        if (typeof eventHandler === 'function') {
          eventRegistry.current[eventName] = eventHandler;
          ref.current.addEventListener(eventName, eventRegistry.current[eventName]);
        }
      });
      return function () {
        // eslint-disable-next-line guard-for-in
        for (var eventName in eventRegistry.current) {
          var _ref$current;

          (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.removeEventListener(eventName, eventRegistry.current[eventName]);
        }
      };
    }, eventProperties.map(function (eventName) {
      return rest[createEventPropName(eventName)];
    })); // non web component related props, just pass them

    var nonWebComponentRelatedProps = Object.entries(rest).filter(function (_ref) {
      var _ref2 = _slicedToArray__default['default'](_ref, 1),
          key = _ref2[0];

      return !regularProperties.includes(key);
    }).filter(function (_ref3) {
      var _ref4 = _slicedToArray__default['default'](_ref3, 1),
          key = _ref4[0];

      return !slotProperties.includes(key);
    }).filter(function (_ref5) {
      var _ref6 = _slicedToArray__default['default'](_ref5, 1),
          key = _ref6[0];

      return !booleanProperties.includes(key);
    }).filter(function (_ref7) {
      var _ref8 = _slicedToArray__default['default'](_ref7, 1),
          key = _ref8[0];

      return !eventProperties.map(function (eventName) {
        return createEventPropName(eventName);
      }).includes(key);
    }).reduce(function (acc, _ref9) {
      var _ref10 = _slicedToArray__default['default'](_ref9, 2),
          key = _ref10[0],
          val = _ref10[1];

      return _objectSpread__default['default'](_objectSpread__default['default']({}, acc), {}, _defineProperty__default['default']({}, key, val));
    }, {});
    var tagNameSuffix = CustomElementsScope.getEffectiveScopingSuffixForTag(tagName);
    var Component = tagNameSuffix ? "".concat(tagName, "-").concat(tagNameSuffix) : tagName;
    return /*#__PURE__*/React__default['default'].createElement(Component, _extends__default['default']({
      ref: ref
    }, booleanProps, regularProps, nonWebComponentRelatedProps, {
      "class": className,
      title: tooltip
    }), slots, children);
  });
  WithWebComponent.displayName = "WithWebComponent(".concat(tagName, ")");
  return WithWebComponent;
};

exports.ActionSheet = ActionSheet;
exports.AnalyticalCard = AnalyticalCard;
exports.AnalyticalCardHeader = AnalyticalCardHeader;
exports.AnalyticalTable = AnalyticalTable;
exports.AnalyticalTableHooks = AnalyticalTableHooks;
exports.Avatar = Avatar;
exports.AvatarGroup = AvatarGroup;
exports.Badge = Badge;
exports.Bar = Bar;
exports.Breadcrumbs = Breadcrumbs;
exports.BusyIndicator = BusyIndicator;
exports.Button = Button;
exports.Calendar = Calendar;
exports.Card = Card;
exports.Carousel = Carousel;
exports.CheckBox = CheckBox;
exports.ComboBox = ComboBox;
exports.ComboBoxItem = ComboBoxItem;
exports.CustomListItem = CustomListItem;
exports.DatePicker = DatePicker;
exports.DateRangePicker = DateRangePicker;
exports.DateTimePicker = DateTimePicker;
exports.Dialog = Dialog;
exports.DurationPicker = DurationPicker;
exports.DynamicPage = DynamicPage;
exports.DynamicPageHeader = DynamicPageHeader;
exports.DynamicPageTitle = DynamicPageTitle;
exports.FileUploader = FileUploader;
exports.FilterBar = FilterBar;
exports.FilterGroupItem = FilterGroupItem;
exports.FlexBox = FlexBox;
exports.FlexibleColumnLayout = FlexibleColumnLayout;
exports.Form = Form;
exports.FormGroup = FormGroup;
exports.FormItem = FormItem;
exports.Grid = Grid;
exports.GroupHeaderListItem = GroupHeaderListItem;
exports.Icon = Icon;
exports.Input = Input;
exports.Label = Label;
exports.Link = Link;
exports.List = List;
exports.Loader = Loader;
exports.MessageBox = MessageBox;
exports.MessageStrip = MessageStrip;
exports.MultiComboBox = MultiComboBox;
exports.MultiComboBoxItem = MultiComboBoxItem;
exports.MultiInput = MultiInput;
exports.NotificationAction = NotificationAction;
exports.NotificationListGroupItem = NotificationListGroupItem;
exports.NotificationListItem = NotificationListItem;
exports.ObjectPage = ObjectPage;
exports.ObjectPageSection = ObjectPageSection;
exports.ObjectPageSubSection = ObjectPageSubSection;
exports.ObjectStatus = ObjectStatus;
exports.Option = Option;
exports.Page = Page;
exports.Panel = Panel;
exports.Popover = Popover;
exports.ProductSwitch = ProductSwitch;
exports.ProductSwitchItem = ProductSwitchItem;
exports.ProgressIndicator = ProgressIndicator;
exports.RadioButton = RadioButton;
exports.RangeSlider = RangeSlider;
exports.RatingIndicator = RatingIndicator;
exports.ResponsivePopover = ResponsivePopover;
exports.SegmentedButton = SegmentedButton;
exports.Select = Select;
exports.ShellBar = ShellBar;
exports.ShellBarItem = ShellBarItem;
exports.SideNavigation = SideNavigation;
exports.SideNavigationItem = SideNavigationItem;
exports.SideNavigationSubItem = SideNavigationSubItem;
exports.Slider = Slider;
exports.StandardListItem = StandardListItem;
exports.SuggestionItem = SuggestionItem;
exports.Switch = Switch;
exports.Tab = Tab;
exports.TabContainer = TabContainer;
exports.TabSeparator = TabSeparator;
exports.Table = Table;
exports.TableCell = TableCell;
exports.TableColumn = TableColumn;
exports.TablePlaceholder = TablePlaceholder;
exports.TableRow = TableRow$1;
exports.Text = Text;
exports.TextArea = TextArea;
exports.ThemeProvider = ThemeProvider;
exports.TimePicker = TimePicker;
exports.Timeline = Timeline;
exports.TimelineItem = TimelineItem;
exports.Title = Title;
exports.Toast = Toast;
exports.ToggleButton = ToggleButton;
exports.Token = Token;
exports.Toolbar = Toolbar;
exports.ToolbarSeparator = ToolbarSeparator;
exports.ToolbarSpacer = ToolbarSpacer;
exports.Tree = Tree;
exports.TreeItem = TreeItem;
exports.UploadCollection = UploadCollection;
exports.UploadCollectionItem = UploadCollectionItem;
exports.VariantManagement = VariantManagement;
exports.Wizard = Wizard;
exports.WizardStep = WizardStep;
exports.withWebComponent = withWebComponent;
