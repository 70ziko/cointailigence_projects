{"version":3,"file":"TextArea.js","sources":["../src/webComponents/TextArea/index.tsx"],"sourcesContent":["import { ValueState } from '@ui5/webcomponents-react/lib/ValueState';\nimport { withWebComponent, WithWebComponentPropTypes } from '@ui5/webcomponents-react/lib/withWebComponent';\nimport '@ui5/webcomponents/dist/TextArea';\nimport { FC, ReactNode } from 'react';\n\nexport interface TextAreaPropTypes extends Omit<WithWebComponentPropTypes, 'onChange' | 'onInput'> {\n  /**\n   * Indicates whether the user can interact with the component or not.\n   *\n   * **Note:** Disabled components cannot be focused and they are out of the tab chain.\n   */\n  disabled?: boolean;\n  /**\n   * Enables the `TextArea` to automatically grow and shrink dynamically with its content.\n   *\n   * **Note:** If set to `true`, the CSS `height` property is ignored.\n   */\n  growing?: boolean;\n  /**\n   * Defines the maximum number of lines that the Web Component can grow.\n   */\n  growingMaxLines?: number;\n  /**\n   * Defines the maximum number of characters that the `value` can have.\n   */\n  maxlength?: number;\n  /**\n   * Determines the name with which the `TextArea` will be submitted in an HTML form.\n   *\n   * **Important:** For the `name` property to have effect, you must add the following import to your project: `import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n   *\n   * **Note:** When set, a native `input` HTML element will be created inside the `TextArea` so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit a form.\n   */\n  name?: string;\n  /**\n   * Defines a short hint intended to aid the user with data entry when the component has no value.\n   */\n  placeholder?: string;\n  /**\n   * Defines whether the `TextArea` is read-only.\n   *\n   * **Note:** A read-only `TextArea` is not editable, but still provides visual feedback upon user interaction.\n   */\n  readonly?: boolean;\n  /**\n   * Defines whether the `TextArea` is required.\n   */\n  required?: boolean;\n  /**\n   * Defines the number of visible text lines for the component.\n   *\n   * **Notes:**\n   *\n   * *   If the `growing` property is enabled, this property defines the minimum rows to be displayed in the textarea.\n   * *   The CSS `height` property wins over the `rows` property, if both are set.\n   */\n  rows?: number;\n  /**\n   * Determines whether the characters exceeding the maximum allowed character count are visible in the `TextArea`.\n   *\n   * If set to `false`, the user is not allowed to enter more characters than what is set in the `maxlength` property. If set to `true` the characters exceeding the `maxlength` value are selected on paste and the counter below the `TextArea` displays their number.\n   */\n  showExceededText?: boolean;\n  /**\n   * Defines the value of the Web Component.\n   */\n  value?: string;\n  /**\n   * Defines the value state of the `TextArea`.\n   *\n   * Available options are:\n   *\n   * *   `None`\n   * *   `Error`\n   * *   `Warning`\n   * *   `Success`\n   * *   `Information`\n   *\n   *\n   *\n   * **Note:** If `maxlength` property is set, the component turns into \"Warning\" state once the characters exceeds the limit. In this case, only the \"Error\" state is considered and can be applied.\n   */\n  valueState?: ValueState;\n  /**\n   * Defines the value state message that will be displayed as pop up under the `TextArea`.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   *\n   * **Note:** The `valueStateMessage` would be displayed if the `TextArea` has `valueState` of type `Information`, `Warning` or `Error`.\n   */\n  valueStateMessage?: ReactNode | ReactNode[];\n  /**\n   * Fired when the text has changed and the focus leaves the `TextArea`.\n   */\n  onChange?: (event: CustomEvent) => void;\n  /**\n   * Fired when the value of the `TextArea` changes at each keystroke or when something is pasted.\n   */\n  onInput?: (event: CustomEvent) => void;\n}\n\n/**\n * The `TextArea` component provides large spaces for text entries in the form of multiple rows. It has the functionality of the `TextField` with the additional functionality for multiline texts.\n *\n * When empty, it can hold a placeholder similar to a `Input`. You can define the rows of the `TextArea` and also determine specific behavior when handling long texts.\n *\n * <a href=\"https://sap.github.io/ui5-webcomponents/playground/components/TextArea\" target=\"_blank\">UI5 Web Components Playground</a>\n */\nconst TextArea: FC<TextAreaPropTypes> = withWebComponent<TextAreaPropTypes>(\n  'ui5-textarea',\n  ['growingMaxLines', 'maxlength', 'name', 'placeholder', 'rows', 'value', 'valueState'],\n  ['disabled', 'growing', 'readonly', 'required', 'showExceededText'],\n  ['valueStateMessage'],\n  ['change', 'input']\n);\n\nTextArea.displayName = 'TextArea';\n\nTextArea.defaultProps = {\n  disabled: false,\n  growing: false,\n  growingMaxLines: 0,\n  maxlength: null,\n  readonly: false,\n  required: false,\n  rows: 0,\n  showExceededText: false,\n  valueState: ValueState.None\n};\n\nexport { TextArea };\n"],"names":["TextArea","withWebComponent","displayName","defaultProps","disabled","growing","growingMaxLines","maxlength","readonly","required","rows","showExceededText","valueState","ValueState","None"],"mappings":";;;;AAqGA;AACA;AACA;AACA;AACA;AACA;AACA;IACMA,QAA+B,GAAGC,gBAAgB,CACtD,cADsD,EAEtD,CAAC,iBAAD,EAAoB,WAApB,EAAiC,MAAjC,EAAyC,aAAzC,EAAwD,MAAxD,EAAgE,OAAhE,EAAyE,YAAzE,CAFsD,EAGtD,CAAC,UAAD,EAAa,SAAb,EAAwB,UAAxB,EAAoC,UAApC,EAAgD,kBAAhD,CAHsD,EAItD,CAAC,mBAAD,CAJsD,EAKtD,CAAC,QAAD,EAAW,OAAX,CALsD;AAQxDD,QAAQ,CAACE,WAAT,GAAuB,UAAvB;AAEAF,QAAQ,CAACG,YAAT,GAAwB;AACtBC,EAAAA,QAAQ,EAAE,KADY;AAEtBC,EAAAA,OAAO,EAAE,KAFa;AAGtBC,EAAAA,eAAe,EAAE,CAHK;AAItBC,EAAAA,SAAS,EAAE,IAJW;AAKtBC,EAAAA,QAAQ,EAAE,KALY;AAMtBC,EAAAA,QAAQ,EAAE,KANY;AAOtBC,EAAAA,IAAI,EAAE,CAPgB;AAQtBC,EAAAA,gBAAgB,EAAE,KARI;AAStBC,EAAAA,UAAU,EAAEC,UAAU,CAACC;AATD,CAAxB;;;;"}