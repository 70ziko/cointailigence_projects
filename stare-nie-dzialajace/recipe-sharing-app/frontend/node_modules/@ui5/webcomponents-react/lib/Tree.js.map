{"version":3,"file":"Tree.js","sources":["../src/webComponents/Tree/index.tsx"],"sourcesContent":["import { ListMode } from '@ui5/webcomponents-react/lib/ListMode';\nimport { withWebComponent, WithWebComponentPropTypes } from '@ui5/webcomponents-react/lib/withWebComponent';\nimport '@ui5/webcomponents/dist/Tree';\nimport { FC, ReactNode } from 'react';\n\nexport interface TreePropTypes extends WithWebComponentPropTypes {\n  /**\n   * Defines the `Tree` footer text.\n   */\n  footerText?: string;\n  /**\n   * Defines the `Tree` header text.\n   *\n   * **Note:** If the `header` slot is set, this property is ignored.\n   */\n  headerText?: string;\n  /**\n   * Defines the mode of the `Tree`. Since the tree uses a `List` to display its structure, the tree modes are exactly the same as the list modes, and are all applicable.\n   *\n   * **Note:** Available options are `None`, `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd`, `MultiSelect`, and `Delete`.\n   */\n  mode?: ListMode;\n  /**\n   * Defines the text that is displayed when the `Tree` contains no items.\n   */\n  noDataText?: string;\n  /**\n   * Defines the items of the `Tree`. Tree items may have other tree items as children.\n   *\n   * **Note:** Use `TreeItem` for the intended design.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the `Tree` header.\n   *\n   * **Note:** When the `header` slot is set, the `headerText` property is ignored.\n   */\n  header?: ReactNode | ReactNode[];\n  /**\n   * Fired when a tree item is activated.\n   */\n  onItemClick?: (event: CustomEvent<{ item: ReactNode }>) => void;\n  /**\n   * Fired when the Delete button of any tree item is pressed.\n   *\n   * **Note:** A Delete button is displayed on each item, when the `Tree` `mode` property is set to `Delete`.\n   */\n  onItemDelete?: (event: CustomEvent<{ item: ReactNode }>) => void;\n  /**\n   * Fired when a tree item is expanded or collapsed. _Note:_ You can call `preventDefault()` on the event object to suppress the event, if needed. This may be handy for example if you want to dynamically load tree items upon the user expanding a node. Even if you prevented the event's default behavior, you can always manually call `toggle()` on a tree item.\n   */\n  onItemToggle?: (event: CustomEvent<{ item: ReactNode }>) => void;\n  /**\n   * Fired when selection is changed by user interaction in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect` modes.\n   */\n  onSelectionChange?: (event: CustomEvent<{ selectedItems: unknown[]; previouslySelectedItems: unknown[] }>) => void;\n}\n\n/**\n * The `Tree` component provides a tree structure for displaying data in a hierarchy.\n *\n * <a href=\"https://sap.github.io/ui5-webcomponents/playground/components/Tree\" target=\"_blank\">UI5 Web Components Playground</a>\n */\nconst Tree: FC<TreePropTypes> = withWebComponent<TreePropTypes>(\n  'ui5-tree',\n  ['footerText', 'headerText', 'mode', 'noDataText'],\n  [],\n  ['header'],\n  ['item-click', 'item-delete', 'item-toggle', 'selection-change']\n);\n\nTree.displayName = 'Tree';\n\nTree.defaultProps = {\n  mode: ListMode.None\n};\n\nexport { Tree };\n"],"names":["Tree","withWebComponent","displayName","defaultProps","mode","ListMode","None"],"mappings":";;;;AA0DA;AACA;AACA;AACA;AACA;IACMA,IAAuB,GAAGC,gBAAgB,CAC9C,UAD8C,EAE9C,CAAC,YAAD,EAAe,YAAf,EAA6B,MAA7B,EAAqC,YAArC,CAF8C,EAG9C,EAH8C,EAI9C,CAAC,QAAD,CAJ8C,EAK9C,CAAC,YAAD,EAAe,aAAf,EAA8B,aAA9B,EAA6C,kBAA7C,CAL8C;AAQhDD,IAAI,CAACE,WAAL,GAAmB,MAAnB;AAEAF,IAAI,CAACG,YAAL,GAAoB;AAClBC,EAAAA,IAAI,EAAEC,QAAQ,CAACC;AADG,CAApB;;;;"}