import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { CheckBox } from '@ui5/webcomponents-react/lib/CheckBox';
import { TableSelectionMode } from '@ui5/webcomponents-react/lib/TableSelectionMode';
import React from 'react';

var reOpenBracket = /\[/g;
var reCloseBracket = /\]/g;

function makePathArray(obj) {
  return flattenDeep(obj) // remove all periods in parts
  .map(function (d) {
    return String(d).replace('.', '_');
  }) // join parts using period
  .join('.') // replace brackets with periods
  .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods
  .split('.');
}

function flattenDeep(arr) {
  var newArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!Array.isArray(arr)) {
    newArr.push(arr);
  } else {
    for (var i = 0; i < arr.length; i += 1) {
      flattenDeep(arr[i], newArr);
    }
  }

  return newArr;
} // copied from https://github.com/tannerlinsley/react-table/blob/master/src/utils.js#L169-L191 (13.Jan 2021)


var pathObjCache = new Map();
function getBy(obj, path, def) {
  if (!path) {
    return obj;
  }

  var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);

  var pathObj = pathObjCache.get(cacheKey) || function () {
    var pathObj = makePathArray(path);
    pathObjCache.set(cacheKey, pathObj);
    return pathObj;
  }();

  var val;

  try {
    val = pathObj.reduce(function (cursor, pathPart) {
      return cursor[pathPart];
    }, obj);
  } catch (e) {// continue regardless of error
  }

  return typeof val !== 'undefined' ? val : def;
}

var customCheckBoxStyling = {
  verticalAlign: 'middle'
};

var columns = function columns(_columns) {
  return _columns.map(function (column) {
    if (column.id === '__ui5wcr__internal_selection_column') {
      return _objectSpread(_objectSpread({}, column), {}, {
        Cell: function Cell(instance) {
          var webComponentsReactProperties = instance.webComponentsReactProperties,
              row = instance.row;

          if (row.disableSelect === true) {
            if (row.isGrouped && webComponentsReactProperties.selectionMode === TableSelectionMode.SINGLE_SELECT) {
              return null;
            }

            if (webComponentsReactProperties.selectionMode === TableSelectionMode.SINGLE_SELECT) {
              return /*#__PURE__*/React.createElement("div", {
                onClick: undefined,
                "data-name": "internal_selection_column"
              });
            }

            return /*#__PURE__*/React.createElement(CheckBox, _extends({}, row.getToggleRowSelectedProps(), {
              disabled: true,
              style: customCheckBoxStyling,
              "data-name": "internal_selection_column"
            }));
          }

          return column.Cell(instance);
        },
        Header: function Header() {
          return null;
        }
      });
    }

    return column;
  });
};
/**
 * A plugin hook for disabling row selection of specific rows.
 * __Note:__ The "Select All" checkbox is not available with this hook.
 *
 * @param disableRowSelection - Can be either a `string` or a `function`. `string:` Defines the key in the dataset for disabling rows. If the value of the key is `true`, then the row will not be selectable. `function:` Programmatically disable rows for selection. The function receives the current row as parameter.
 */


var useRowDisableSelection = function useRowDisableSelection(disableRowSelection) {
  var disableRowAccessor = typeof disableRowSelection === 'function' ? disableRowSelection : function (d) {
    return getBy(d.original, disableRowSelection, undefined);
  };

  var getRowProps = function getRowProps(rowProps, _ref) {
    var row = _ref.row,
        instance = _ref.instance;
    var webComponentsReactProperties = instance.webComponentsReactProperties;

    if (disableRowAccessor(row) === true) {
      row.disableSelect = true;
      return _objectSpread(_objectSpread({}, rowProps), {}, {
        onClick: undefined,
        className: webComponentsReactProperties.classes.tr
      });
    }

    return rowProps;
  };

  var columnDeps = function columnDeps(deps) {
    return [].concat(_toConsumableArray(deps), [disableRowSelection]);
  };

  var useDisableSelectionRow = function useDisableSelectionRow(hooks) {
    hooks.getRowProps.push(getRowProps);
    hooks.columns.push(columns);
    hooks.columnsDeps.push(columnDeps);
  };

  useDisableSelectionRow.pluginName = 'useRowDisableSelection';
  return useDisableSelectionRow;
};

export { useRowDisableSelection };
//# sourceMappingURL=AnalyticalTableHooks.js.map
