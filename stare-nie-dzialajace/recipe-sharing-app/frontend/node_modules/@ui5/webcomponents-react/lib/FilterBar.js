import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import _toPropertyKey from '@babel/runtime/helpers/toPropertyKey';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { createUseStyles } from 'react-jss';
import { useI18nBundle } from '@ui5/webcomponents-react-base/lib/hooks';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { BASIC, CANCEL, CLEAR, RESTORE, SAVE, SEARCH_FOR_FILTERS, SHOW_ON_FILTER_BAR, FILTERS, GO, SHOW_FILTER_BAR, HIDE_FILTER_BAR } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { BusyIndicator } from '@ui5/webcomponents-react/lib/BusyIndicator';
import { BusyIndicatorSize } from '@ui5/webcomponents-react/lib/BusyIndicatorSize';
import { Button } from '@ui5/webcomponents-react/lib/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/lib/ButtonDesign';
import { Toolbar } from '@ui5/webcomponents-react/lib/Toolbar';
import { ToolbarSeparator } from '@ui5/webcomponents-react/lib/ToolbarSeparator';
import { ToolbarSpacer } from '@ui5/webcomponents-react/lib/ToolbarSpacer';
import { ToolbarStyle } from '@ui5/webcomponents-react/lib/ToolbarStyle';
import React, { cloneElement, useState, useRef, useEffect, useCallback, useMemo, Children, forwardRef } from 'react';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import '@ui5/webcomponents-icons/dist/search';
import { Bar } from '@ui5/webcomponents-react/lib/Bar';
import { BarDesign } from '@ui5/webcomponents-react/lib/BarDesign';
import { CheckBox } from '@ui5/webcomponents-react/lib/CheckBox';
import { Dialog } from '@ui5/webcomponents-react/lib/Dialog';
import { FlexBox } from '@ui5/webcomponents-react/lib/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/lib/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/lib/FlexBoxDirection';
import { FlexBoxJustifyContent } from '@ui5/webcomponents-react/lib/FlexBoxJustifyContent';
import { Icon } from '@ui5/webcomponents-react/lib/Icon';
import { Input } from '@ui5/webcomponents-react/lib/Input';
import { Text } from '@ui5/webcomponents-react/lib/Text';
import { Title } from '@ui5/webcomponents-react/lib/Title';
import { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';
import { CssSizeVariables } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';
import { sapUiContentPadding } from '@ui5/webcomponents-react-base/lib/spacing';
import { createPortal } from 'react-dom';

var styles = {
  outerContainer: {
    paddingTop: '0.5rem',
    paddingLeft: '2rem',
    paddingRight: '2rem',
    paddingBottom: '1px',
    background: ThemingParameters.sapObjectHeader_Background,
    boxShadow: ThemingParameters.sapContent_HeaderShadow
  },
  filterItemExpand: {
    '--_ui5_input_width': '100%'
  },
  filterBarHeader: {
    alignItems: 'center',
    display: 'flex',
    background: ThemingParameters.sapObjectHeader_Background,
    minHeight: '3rem',
    paddingBottom: '0.5rem',
    boxShadow: 'none',
    flexWrap: 'wrap'
  },
  filterArea: {
    display: 'flex',
    flexWrap: 'wrap',
    paddingTop: '1rem',
    paddingBottom: '1rem',
    background: ThemingParameters.sapObjectHeader_Background,
    transition: 'max-height 0.2s ease-out, opacity 0.2s ease-in'
  },
  filterAreaClosed: {
    maxHeight: '0',
    opacity: 0,
    padding: 0,
    overflowY: 'auto'
  },
  filterAreaOpen: {
    maxHeight: '500px',
    opacity: 1,
    overflowY: 'auto'
  },
  headerRowRight: {
    display: 'flex',
    justifyContent: 'flex-end',
    flexGrow: 1,
    '& ui5-button': {
      marginLeft: '0.5rem'
    }
  },
  showFiltersBtn: {
    minWidth: '108px'
  },
  loadingContainer: {
    marginBottom: '0.5rem',
    display: 'flex',
    width: '100%',
    justifyContent: 'center'
  }
};

var stopPropagation = function stopPropagation(e) {
  e.stopPropagation();
  e.stopImmediatePropagation();
};

var styles$1 = {
  dialog: _objectSpread(_objectSpread({}, sapUiContentPadding), {}, {
    display: 'flex',
    flexDirection: 'column',
    maxWidth: '960px',
    width: '80vw',
    maxHeight: '70vh',
    '--_ui5_input_width': '100%'
  }),
  header: {
    width: '100%',
    padding: '0.25rem 1rem 0 1rem',
    '& *': {
      margin: '0.25rem 0 0.25rem 0'
    },
    '& ui5-input': {
      width: '100%'
    }
  },
  footer: {
    '& :not(:last-child)': {
      marginRight: '0.25rem'
    }
  },
  groupContainer: {
    display: 'flex',
    flexDirection: 'column'
  },
  groupTitle: {
    maxWidth: '85%',
    marginRight: '0.5rem'
  },
  filters: {
    padding: '1rem 0 2rem 0'
  },
  singleFilter: {
    display: 'grid',
    gridTemplateColumns: "auto minmax(".concat(CssSizeVariables.sapWcrCheckBoxWidthHeight, ",7%)"),
    gridTemplateRows: 'auto',
    gridColumnGap: '0.5rem',
    '@media(max-width:700px)': {
      marginTop: '0.5rem'
    },
    '& ui5-checkbox': {
      placeSelf: 'center start',
      '@media(max-width:700px)': {
        marginTop: '0.8rem',
        paddingLeft: 0,
        placeSelf: 'end start'
      }
    }
  },
  fbSearch: {
    '@media(min-width:700px)': {
      display: 'grid',
      gridTemplateColumns: '20% auto 7%',
      gridTemplateRows: 'auto',
      gridRowGap: '0.5rem',
      gridColumnGap: '0.5rem'
    },
    paddingBottom: '2rem',
    width: '100%',
    '& ui5-input': {
      width: '100%'
    }
  }
};

var filterValue = function filterValue(ref, child) {
  var tagName = ref.tagName;
  var filterItemProps = {};

  if (tagName === 'UI5-INPUT' || tagName === 'UI5-DATE-PICKER' || tagName === 'UI5-DATETIME-PICKER' || tagName === 'UI5-DATERANGE-PICKER' || tagName === 'UI5-TIME-PICKER' || tagName === 'UI5-DURATION-PICKER') {
    filterItemProps = {
      value: ref.value
    };
  }

  if (tagName === 'UI5-COMBOBOX') {
    filterItemProps = {
      value: ref.value,
      filterValue: ref.filterValue
    };
  }

  if (tagName === 'UI5-SELECT' || tagName === 'UI5-MULTI-COMBOBOX') {
    var _child$props$children;

    var selectedIndices = Array.from(ref.children).map(function (item, index) {
      return item.selected ? index : false;
    }).filter(function (el) {
      return el !== false;
    });
    var selectedIndicesSet = new Set(selectedIndices);
    var options = (_child$props$children = child.props.children.props.children) === null || _child$props$children === void 0 ? void 0 : _child$props$children.map(function (item, index) {
      if (selectedIndicesSet.has(index)) {
        return /*#__PURE__*/cloneElement(item, {
          selected: true
        });
      }

      return /*#__PURE__*/cloneElement(item, {
        selected: false
      });
    });
    filterItemProps = {
      children: options
    };
  }

  if (tagName === 'UI5-SWITCH' || tagName === 'UI5-CHECKBOX') {
    filterItemProps = {
      checked: ref.checked
    };
  }

  return filterItemProps;
};
var renderSearchWithValue = function renderSearchWithValue(renderSearchElement, searchValue) {
  var _renderSearchElement$;

  return /*#__PURE__*/cloneElement(renderSearchElement, {
    value: searchValue !== null && searchValue !== void 0 ? searchValue : renderSearchElement === null || renderSearchElement === void 0 ? void 0 : (_renderSearchElement$ = renderSearchElement.props) === null || _renderSearchElement$ === void 0 ? void 0 : _renderSearchElement$.value
  });
};

var useStyles = createUseStyles(styles$1, {
  name: 'FilterBarDialog'
});
var FilterDialog = function FilterDialog(props) {
  var filterBarRefs = props.filterBarRefs,
      open = props.open,
      handleDialogClose = props.handleDialogClose,
      children = props.children,
      showClearButton = props.showClearButton,
      showRestoreButton = props.showRestoreButton,
      showGoButton = props.showGoButton,
      showSearch = props.showSearch,
      renderFBSearch = props.renderFBSearch,
      handleClearFilters = props.handleClearFilters,
      handleRestoreFilters = props.handleRestoreFilters,
      handleDialogSave = props.handleDialogSave,
      searchValue = props.searchValue,
      handleSearchValueChange = props.handleSearchValueChange,
      onGo = props.onGo,
      handleSelectionChange = props.handleSelectionChange,
      handleDialogSearch = props.handleDialogSearch,
      handleDialogCancel = props.handleDialogCancel;
  var classes = useStyles();

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      searchString = _useState2[0],
      setSearchString = _useState2[1];

  var searchRef = useRef(null);

  var _useState3 = useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      toggledFilters = _useState4[0],
      setToggledFilters = _useState4[1];

  var dialogRefs = useRef({});
  var dialogRef = useRef();
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var basicText = i18nBundle.getText(BASIC);
  var cancelText = i18nBundle.getText(CANCEL);
  var clearText = i18nBundle.getText(CLEAR);
  var restoreText = i18nBundle.getText(RESTORE);
  var saveText = i18nBundle.getText(SAVE);
  var searchForFiltersText = i18nBundle.getText(SEARCH_FOR_FILTERS);
  var showOnFilterBarText = i18nBundle.getText(SHOW_ON_FILTER_BAR);
  var filtersTitle = i18nBundle.getText(FILTERS);
  var goText = i18nBundle.getText(GO);
  useEffect(function () {
    if (open) {
      dialogRef.current.open();
    }
  }, [open]);
  var handleSearch = useCallback(function (e) {
    if (handleDialogSearch) {
      handleDialogSearch(enrichEventWithDetails(e, {
        value: e.target.value
      }));
    }

    setSearchString(e.target.value);
  }, [setSearchString, handleDialogSearch]);
  var handleSave = useCallback(function (e) {
    if (renderFBSearch) {
      var _searchRef$current;

      handleSearchValueChange((_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.children[1].value);
    }

    handleDialogSave(e, dialogRefs.current, toggledFilters);
  }, [renderFBSearch, handleSearchValueChange, searchRef, handleDialogSave, toggledFilters, dialogRefs]);
  var handleClose = useCallback(function (e) {
    stopPropagation(e);

    if (!showGoButton) {
      handleSave(e);
      return;
    }

    handleDialogClose(e);
  }, [showGoButton, handleSave, handleDialogClose]);
  var handleDialogGo = useCallback(function (e) {
    if (onGo) {
      onGo(enrichEventWithDetails(e));
    }

    handleDialogClose(e);
  }, [onGo, handleDialogClose]);
  var handleRestore = useCallback(function (e) {
    handleRestoreFilters(e, 'dialog');
  }, [handleRestoreFilters]);
  var handleCancel = useCallback(function (e) {
    if (handleDialogCancel) {
      handleDialogCancel(enrichEventWithDetails(e));
    }

    handleDialogClose(e);
  }, [handleDialogCancel]);
  var footerContentRight = useMemo(function () {
    return /*#__PURE__*/React.createElement(FlexBox, {
      justifyContent: FlexBoxJustifyContent.End,
      className: classes.footer
    }, showGoButton && /*#__PURE__*/React.createElement(Button, {
      onClick: handleDialogGo,
      design: ButtonDesign.Emphasized,
      title: goText
    }, goText), showClearButton && /*#__PURE__*/React.createElement(Button, {
      onClick: handleClearFilters
    }, clearText), showRestoreButton && /*#__PURE__*/React.createElement(Button, {
      onClick: handleRestore
    }, restoreText), /*#__PURE__*/React.createElement(Button, {
      onClick: handleSave
    }, saveText), /*#__PURE__*/React.createElement(Button, {
      design: ButtonDesign.Transparent,
      onClick: handleCancel
    }, cancelText));
  }, [goText, showGoButton, classes.footer, handleDialogGo, showClearButton, handleClearFilters, showRestoreButton, handleRestore, handleSave, handleCancel]);
  var renderFooter = useCallback(function () {
    return /*#__PURE__*/React.createElement(Bar, {
      design: BarDesign.Footer,
      endContent: footerContentRight
    });
  }, [footerContentRight]);
  var renderHeader = useCallback(function () {
    return /*#__PURE__*/React.createElement(FlexBox, {
      direction: FlexBoxDirection.Column,
      alignItems: FlexBoxAlignItems.Center,
      className: classes.header
    }, /*#__PURE__*/React.createElement(Title, {
      level: TitleLevel.H4,
      tooltip: filtersTitle
    }, filtersTitle), showSearch && /*#__PURE__*/React.createElement(Input, {
      placeholder: searchForFiltersText,
      onInput: handleSearch,
      icon: /*#__PURE__*/React.createElement(Icon, {
        name: "search"
      })
    }));
  }, [classes.header, showSearch, handleSearch, filtersTitle]);
  var renderChildren = useCallback(function () {
    return children.filter(function (item) {
      var _item$props, _item$props2, _item$props2$label;

      return !!(item !== null && item !== void 0 && item.props) && ((_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.visible) && (((_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : (_item$props2$label = _item$props2.label) === null || _item$props2$label === void 0 ? void 0 : _item$props2$label.toLowerCase().includes(searchString.toLowerCase())) || searchString.length === 0);
    }).map(function (child) {
      var filterBarItemRef = filterBarRefs.current[child.key];
      var filterItemProps = {};

      if (filterBarItemRef) {
        filterItemProps = filterValue(filterBarItemRef, child);
      }

      if (!child.props.children) return child;
      return /*#__PURE__*/cloneElement(child, {
        children: _objectSpread(_objectSpread({}, child.props.children), {}, {
          props: _objectSpread(_objectSpread({}, child.props.children.props), filterItemProps),
          ref: function ref(node) {
            dialogRefs.current[child.key] = node;
          }
        })
      });
    });
  }, [children, searchString, filterBarRefs]);
  var handleCheckBoxChange = useCallback(function (element) {
    return function (e) {
      if (handleSelectionChange) {
        handleSelectionChange(enrichEventWithDetails(e, {
          element: element,
          checked: e.target.checked
        }));
      }

      setToggledFilters(function (old) {
        return _objectSpread(_objectSpread({}, old), {}, _defineProperty({}, element.key, e.target.checked));
      });
    };
  }, [setToggledFilters, handleSelectionChange]);
  var renderGroups = useCallback(function () {
    var groups = {};
    Children.forEach(renderChildren(), function (child) {
      var _child$props$groupNam;

      var childGroups = (_child$props$groupNam = child.props.groupName) !== null && _child$props$groupNam !== void 0 ? _child$props$groupNam : 'default';

      if (groups[childGroups]) {
        groups[childGroups].push(child);
      } else {
        groups[childGroups] = [child];
      }
    });
    return Object.keys(groups).sort(function (x, y) {
      return x === 'default' ? -1 : y === 'role' ? 1 : 0;
    }).map(function (item, index) {
      var filters = groups[item].map(function (el) {
        return /*#__PURE__*/React.createElement("div", {
          className: classes.singleFilter,
          key: "".concat(el.key, "-container")
        }, el, /*#__PURE__*/React.createElement(CheckBox, {
          role: "checkbox",
          checked: el.props.visibleInFilterBar || el.props.required || el.type.displayName !== 'FilterGroupItem',
          onChange: handleCheckBoxChange(el),
          disabled: el.props.required || el.type.displayName !== 'FilterGroupItem'
        }));
      });
      return /*#__PURE__*/React.createElement("div", {
        className: classes.groupContainer,
        key: item
      }, /*#__PURE__*/React.createElement(FlexBox, {
        justifyContent: FlexBoxJustifyContent.SpaceBetween,
        alignItems: FlexBoxAlignItems.Center
      }, /*#__PURE__*/React.createElement(Title, {
        level: TitleLevel.H5,
        className: index === 0 ? classes.groupTitle : '',
        tooltip: item === 'default' ? basicText : item
      }, item === 'default' ? basicText : item), index === 0 && /*#__PURE__*/React.createElement(Text, {
        wrapping: false
      }, showOnFilterBarText)), /*#__PURE__*/React.createElement("div", {
        className: classes.filters
      }, filters));
    });
  }, [renderChildren, toggledFilters, handleCheckBoxChange]);
  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Dialog, {
    ref: dialogRef,
    header: renderHeader(),
    footer: renderFooter(),
    onAfterClose: handleClose
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.dialog,
    role: "dialog"
  }, renderFBSearch && /*#__PURE__*/React.createElement("div", {
    className: classes.fbSearch,
    ref: searchRef
  }, /*#__PURE__*/React.createElement("span", null), renderSearchWithValue(renderFBSearch, searchValue)), renderGroups())), document.body);
};

var useStyles$1 = createUseStyles(styles, {
  name: 'FilterBar'
});
/**
 * The `FilterBar` displays filters in a user-friendly manner to populate values for a query. It consists of a row containing the `VariantManagement`, the related buttons, and an area underneath displaying the filters. The filters are arranged in a logical row that is divided depending on the space available and the width of the filters. The area containing the filters can be hidden or shown using the "Hide FilterBar / Show FilterBar" button, the "Filters" button shows the filter dialog.
 In this dialog, the consumer has full control over the FilterBar. The filters in this dialog are displayed in one column and organized in groups. Each filter can be marked as visible in the FilterBar by selecting "Add to FilterBar".
 */

var FilterBar = /*#__PURE__*/forwardRef(function (props, ref) {
  var _search$props2, _search$props5, _searchRef$current;

  var children = props.children,
      useToolbar = props.useToolbar,
      loading = props.loading,
      filterBarExpanded = props.filterBarExpanded,
      considerGroupName = props.considerGroupName,
      filterContainerWidth = props.filterContainerWidth,
      activeFiltersCount = props.activeFiltersCount,
      showClearOnFB = props.showClearOnFB,
      showGoOnFB = props.showGoOnFB,
      showGo = props.showGo,
      showFilterConfiguration = props.showFilterConfiguration,
      showRestoreOnFB = props.showRestoreOnFB,
      showClearButton = props.showClearButton,
      showRestoreButton = props.showRestoreButton,
      showSearchOnFiltersDialog = props.showSearchOnFiltersDialog,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      search = props.search,
      variants = props.variants,
      onToggleFilters = props.onToggleFilters,
      onFiltersDialogOpen = props.onFiltersDialogOpen,
      onFiltersDialogCancel = props.onFiltersDialogCancel,
      onFiltersDialogClose = props.onFiltersDialogClose,
      onFiltersDialogSave = props.onFiltersDialogSave,
      onFiltersDialogClear = props.onFiltersDialogClear,
      onClear = props.onClear,
      onFiltersDialogSelectionChange = props.onFiltersDialogSelectionChange,
      onFiltersDialogSearch = props.onFiltersDialogSearch,
      onGo = props.onGo,
      onRestore = props.onRestore;

  var _useState = useState(useToolbar ? filterBarExpanded : true),
      _useState2 = _slicedToArray(_useState, 2),
      showFilters = _useState2[0],
      setShowFilters = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      mountFilters = _useState4[0],
      setMountFilters = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      dialogOpen = _useState6[0],
      setDialogOpen = _useState6[1];

  var _useState7 = useState(undefined),
      _useState8 = _slicedToArray(_useState7, 2),
      searchValue = _useState8[0],
      setSearchValue = _useState8[1];

  var searchRef = useRef(null);
  var filterRefs = useRef({});

  var _useState9 = useState({}),
      _useState10 = _slicedToArray(_useState9, 2),
      dialogRefs = _useState10[0],
      setDialogRefs = _useState10[1];

  var _useState11 = useState({}),
      _useState12 = _slicedToArray(_useState11, 2),
      toggledFilters = _useState12[0],
      setToggledFilters = _useState12[1];

  var prevVisibleInFilterBarProps = useRef({});
  var prevSearchInputPropsValueRef = useRef();
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var clearText = i18nBundle.getText(CLEAR);
  var restoreText = i18nBundle.getText(RESTORE);
  var showFilterBarText = i18nBundle.getText(SHOW_FILTER_BAR);
  var hideFilterBarText = i18nBundle.getText(HIDE_FILTER_BAR);
  var goText = i18nBundle.getText(GO);
  var filtersText = i18nBundle.getText(FILTERS);
  useEffect(function () {
    Children.toArray(children).forEach(function (item) {
      setToggledFilters(function (prev) {
        if (!item.props.hasOwnProperty('visibleInFilterBar') && (prev === null || prev === void 0 ? void 0 : prev[item.key]) === undefined) {
          return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, item.key, true));
        }

        if (item.props.hasOwnProperty('visibleInFilterBar')) {
          return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, item.key, item.props.visibleInFilterBar));
        }

        return prev;
      });
    });
  }, [children, setToggledFilters]);
  useEffect(function () {
    setShowFilters(useToolbar ? filterBarExpanded : true);
  }, [setShowFilters, useToolbar, filterBarExpanded]);
  var classes = useStyles$1();
  var filterAreaClasses = StyleClassHelper.of(classes.filterArea);

  if (showFilters) {
    filterAreaClasses.put(classes.filterAreaOpen);
  } else {
    filterAreaClasses.put(classes.filterAreaClosed);
  }

  var handleToggle = useCallback(function (e) {
    if (onToggleFilters) {
      onToggleFilters(enrichEventWithDetails(e, {
        visible: !showFilters
      }));
    }

    setShowFilters(!showFilters);
  }, [showFilters, onToggleFilters, setShowFilters]);
  var handleDialogSave = useCallback(function (e, newRefs, updatedToggledFilters) {
    setDialogRefs(newRefs);
    setToggledFilters(function (old) {
      return _objectSpread(_objectSpread({}, old), updatedToggledFilters);
    });

    if (onFiltersDialogSave) {
      onFiltersDialogSave(enrichEventWithDetails(e, {
        elements: newRefs,
        toggledElements: _objectSpread(_objectSpread({}, toggledFilters), updatedToggledFilters)
      }));
    }

    handleDialogClose(e);
  }, [setDialogOpen, setDialogRefs, setToggledFilters, onFiltersDialogSave, toggledFilters]);
  var handleDialogOpen = useCallback(function (e) {
    setDialogOpen(true);

    if (onFiltersDialogOpen) {
      onFiltersDialogOpen(enrichEventWithDetails(e));
    }
  }, [setDialogOpen, onFiltersDialogOpen]);
  var handleDialogClose = useCallback(function (e) {
    if (onFiltersDialogClose) {
      onFiltersDialogClose(enrichEventWithDetails(e));
    }

    setDialogOpen(false);
  }, [setDialogOpen, onFiltersDialogClose]);
  var passThroughProps = usePassThroughHtmlProps(props, ['onToggleFilters', 'onFiltersDialogOpen', 'onFiltersDialogClose', 'onFiltersDialogSave', 'onFiltersDialogClear', 'onClear', 'onFiltersDialogSelectionChange', 'onFiltersDialogSearch', 'onGo', 'onRestore', 'onFiltersDialogCancel']);
  var safeChildren = useCallback(function () {
    if (Object.keys(toggledFilters).length > 0) {
      return Children.toArray(children).map(function (child) {
        if ((toggledFilters === null || toggledFilters === void 0 ? void 0 : toggledFilters[child.key]) !== undefined) {
          return /*#__PURE__*/cloneElement(child, {
            visibleInFilterBar: toggledFilters[child.key]
          });
        }

        return child;
      });
    }

    return Children.toArray(children);
  }, [toggledFilters, children]);
  var prevChildren = useRef({});
  var renderChildren = useCallback(function () {
    var childProps = {
      considerGroupName: considerGroupName,
      inFB: true
    };
    return safeChildren().filter(function (item) {
      var _item$props, _item$props2;

      return (item === null || item === void 0 ? void 0 : (_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.visible) && ((_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.visibleInFilterBar);
    }).map(function (child) {
      var _prevChildren$current, _child$props$children, _child$props$children2, _prevChildren$current2, _prevChildren$current3, _child$props$children3, _child$props$children4, _prevChildren$current4, _prevChildren$current5, _child$props$children5, _child$props$children6, _prevChildren$current6, _prevChildren$current7, _child$props$children7, _child$props$children8, _child$props$children9, _prevChildren$current8, _prevChildren$current9, _prevChildren$current10;

      if (filterContainerWidth) {
        childProps.style = _objectSpread({
          width: filterContainerWidth
        }, child.props.style);
      }

      if (!showFilterConfiguration) {
        return /*#__PURE__*/cloneElement(child, _objectSpread({}, childProps));
      }

      prevVisibleInFilterBarProps.current[child.key] = child.props.visibleInFilterBar;
      var filterItemProps = {};

      if (Object.keys(dialogRefs).length > 0) {
        var dialogItemRef = dialogRefs[child.key];

        if (dialogItemRef) {
          filterItemProps = filterValue(dialogItemRef, child);
        }
      }

      if (!child.props.children) {
        return /*#__PURE__*/cloneElement(child, _objectSpread({}, childProps));
      }

      if ((_prevChildren$current = prevChildren.current) !== null && _prevChildren$current !== void 0 && _prevChildren$current[child.key] && ( //Input
      ((_child$props$children = child.props.children) === null || _child$props$children === void 0 ? void 0 : (_child$props$children2 = _child$props$children.props) === null || _child$props$children2 === void 0 ? void 0 : _child$props$children2.value) !== ((_prevChildren$current2 = prevChildren.current) === null || _prevChildren$current2 === void 0 ? void 0 : (_prevChildren$current3 = _prevChildren$current2[child.key]) === null || _prevChildren$current3 === void 0 ? void 0 : _prevChildren$current3.value) || //Combobox
      ((_child$props$children3 = child.props.children) === null || _child$props$children3 === void 0 ? void 0 : (_child$props$children4 = _child$props$children3.props) === null || _child$props$children4 === void 0 ? void 0 : _child$props$children4.filterValue) !== ((_prevChildren$current4 = prevChildren.current) === null || _prevChildren$current4 === void 0 ? void 0 : (_prevChildren$current5 = _prevChildren$current4[child.key]) === null || _prevChildren$current5 === void 0 ? void 0 : _prevChildren$current5.filterValue) || //Checkbox
      ((_child$props$children5 = child.props.children) === null || _child$props$children5 === void 0 ? void 0 : (_child$props$children6 = _child$props$children5.props) === null || _child$props$children6 === void 0 ? void 0 : _child$props$children6.checked) !== ((_prevChildren$current6 = prevChildren.current) === null || _prevChildren$current6 === void 0 ? void 0 : (_prevChildren$current7 = _prevChildren$current6[child.key]) === null || _prevChildren$current7 === void 0 ? void 0 : _prevChildren$current7.checked) || //Selectable
      ((_child$props$children7 = child.props.children) === null || _child$props$children7 === void 0 ? void 0 : (_child$props$children8 = _child$props$children7.props) === null || _child$props$children8 === void 0 ? void 0 : (_child$props$children9 = _child$props$children8.children) === null || _child$props$children9 === void 0 ? void 0 : _child$props$children9.map(function (item) {
        return item.props.selected;
      }).join(',')) !== (prevChildren === null || prevChildren === void 0 ? void 0 : (_prevChildren$current8 = prevChildren.current) === null || _prevChildren$current8 === void 0 ? void 0 : (_prevChildren$current9 = _prevChildren$current8[child.key]) === null || _prevChildren$current9 === void 0 ? void 0 : (_prevChildren$current10 = _prevChildren$current9.children) === null || _prevChildren$current10 === void 0 ? void 0 : _prevChildren$current10.map(function (item) {
        return item.props.selected;
      }).join(',')))) {
        // @ts-ignore
        var _child$key = child.key;
            dialogRefs[_child$key];
            var rest = _objectWithoutProperties(dialogRefs, [_child$key].map(_toPropertyKey));

        setDialogRefs(rest);
      }

      prevChildren.current[child.key] = child.props.children.props;
      return /*#__PURE__*/cloneElement(child, _objectSpread(_objectSpread({}, childProps), {}, {
        children: _objectSpread(_objectSpread({}, child.props.children), {}, {
          props: _objectSpread(_objectSpread({}, child.props.children.props), filterItemProps),
          ref: function ref(node) {
            filterRefs.current[child.key] = node;
          }
        })
      }));
    });
  }, [filterContainerWidth, considerGroupName, dialogRefs, safeChildren, showFilterConfiguration]);
  var handleSearchValueChange = useCallback(function (newVal) {
    setSearchValue(newVal);
  }, [setSearchValue]);
  var handleRestoreFilters = useCallback(function (e, source) {
    if (source === 'dialog' && showGo) {
      setDialogOpen(false);
      setDialogOpen(true);
    } else if (source === 'filterBar' && showGoOnFB) {
      setMountFilters(false);
      setMountFilters(true);
    }

    if (onRestore) {
      onRestore(enrichEventWithDetails(e, {
        source: source
      }));
    }
  }, [setDialogOpen, showGo, showGoOnFB, onRestore]);
  var handleFBRestore = useCallback(function (e) {
    handleRestoreFilters(e, 'filterBar');
  }, [handleRestoreFilters]);
  var cssClasses = StyleClassHelper.of(classes.outerContainer);

  if (className) {
    cssClasses.put(className);
  }

  if (filterContainerWidth) {
    cssClasses.put(classes.filterItemExpand);
  }

  useEffect(function () {
    var _search$props;

    prevSearchInputPropsValueRef.current = search === null || search === void 0 ? void 0 : (_search$props = search.props) === null || _search$props === void 0 ? void 0 : _search$props.value;
  }, [search === null || search === void 0 ? void 0 : (_search$props2 = search.props) === null || _search$props2 === void 0 ? void 0 : _search$props2.value]);
  var prevSearchInputPropsValue = prevSearchInputPropsValueRef.current;
  useEffect(function () {
    var _search$props3;

    if (prevSearchInputPropsValue !== (search === null || search === void 0 ? void 0 : (_search$props3 = search.props) === null || _search$props3 === void 0 ? void 0 : _search$props3.value)) {
      var _search$props4;

      setSearchValue(search === null || search === void 0 ? void 0 : (_search$props4 = search.props) === null || _search$props4 === void 0 ? void 0 : _search$props4.value);
    }
  }, [prevSearchInputPropsValue, search === null || search === void 0 ? void 0 : (_search$props5 = search.props) === null || _search$props5 === void 0 ? void 0 : _search$props5.value]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, dialogOpen && showFilterConfiguration && /*#__PURE__*/React.createElement(FilterDialog, {
    filterBarRefs: filterRefs,
    open: dialogOpen,
    handleDialogClose: handleDialogClose,
    onGo: onGo,
    handleRestoreFilters: handleRestoreFilters,
    searchValue: (_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.children[0].value,
    handleSearchValueChange: handleSearchValueChange,
    showClearButton: showClearButton,
    showRestoreButton: showRestoreButton,
    showSearch: showSearchOnFiltersDialog,
    renderFBSearch: search,
    handleClearFilters: onFiltersDialogClear,
    handleSelectionChange: onFiltersDialogSelectionChange,
    handleDialogSave: handleDialogSave,
    showGoButton: showGo,
    handleDialogSearch: onFiltersDialogSearch,
    handleDialogCancel: onFiltersDialogCancel
  }, safeChildren()), /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: cssClasses.toString(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), loading ? /*#__PURE__*/React.createElement(BusyIndicator, {
    active: true,
    className: classes.loadingContainer,
    size: BusyIndicatorSize.Large
  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Toolbar, {
    className: classes.filterBarHeader,
    toolbarStyle: ToolbarStyle.Clear
  }, variants, search && /*#__PURE__*/React.createElement(ToolbarSeparator, null), search && /*#__PURE__*/React.createElement("div", {
    ref: searchRef
  }, renderSearchWithValue(search, searchValue)), useToolbar && /*#__PURE__*/React.createElement(ToolbarSpacer, null), useToolbar && showClearOnFB && /*#__PURE__*/React.createElement(Button, {
    onClick: onClear,
    design: ButtonDesign.Transparent
  }, clearText), useToolbar && showRestoreOnFB && /*#__PURE__*/React.createElement(Button, {
    onClick: handleFBRestore,
    design: ButtonDesign.Transparent
  }, restoreText), useToolbar && /*#__PURE__*/React.createElement(Button, {
    onClick: handleToggle,
    design: ButtonDesign.Transparent,
    className: classes.showFiltersBtn
  }, showFilters ? hideFilterBarText : showFilterBarText), useToolbar && showFilterConfiguration && /*#__PURE__*/React.createElement(Button, {
    onClick: handleDialogOpen
  }, "".concat(filtersText).concat(activeFiltersCount && parseInt(activeFiltersCount) > 0 ? " (".concat(activeFiltersCount, ")") : '')), useToolbar && showGoOnFB && /*#__PURE__*/React.createElement(Button, {
    onClick: onGo,
    design: ButtonDesign.Emphasized
  }, goText)), mountFilters && /*#__PURE__*/React.createElement("div", {
    className: filterAreaClasses.valueOf()
  }, renderChildren()))));
});
FilterBar.defaultProps = {
  useToolbar: true,
  filterBarExpanded: true,
  showClearOnFB: false,
  showGo: false,
  showRestoreOnFB: false,
  showGoOnFB: false,
  showFilterConfiguration: false,
  showClearButton: false,
  showRestoreButton: false,
  showSearchOnFiltersDialog: false,
  considerGroupName: false,
  loading: false,
  onToggleFilters: null,
  onFiltersDialogOpen: null,
  onFiltersDialogCancel: null,
  onFiltersDialogClose: null,
  onFiltersDialogSave: null,
  onFiltersDialogClear: null,
  onClear: null,
  onFiltersDialogSelectionChange: null,
  onFiltersDialogSearch: null,
  onGo: null,
  onRestore: null
};
FilterBar.displayName = 'FilterBar';

export { FilterBar };
//# sourceMappingURL=FilterBar.js.map
