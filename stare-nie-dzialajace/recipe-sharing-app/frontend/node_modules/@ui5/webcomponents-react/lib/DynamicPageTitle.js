import _extends from '@babel/runtime/helpers/extends';
import { createUseStyles } from 'react-jss';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { FlexBox } from '@ui5/webcomponents-react/lib/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/lib/FlexBoxAlignItems';
import { Toolbar } from '@ui5/webcomponents-react/lib/Toolbar';
import { ToolbarDesign } from '@ui5/webcomponents-react/lib/ToolbarDesign';
import { ToolbarSeparator } from '@ui5/webcomponents-react/lib/ToolbarSeparator';
import { ToolbarSpacer } from '@ui5/webcomponents-react/lib/ToolbarSpacer';
import { ToolbarStyle } from '@ui5/webcomponents-react/lib/ToolbarStyle';
import React, { forwardRef, Children } from 'react';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { sapUiResponsiveContentPadding, sapUiTinyMarginBeginEnd } from '@ui5/webcomponents-react-base/lib/spacing';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import { isIE } from '@ui5/webcomponents-react-base/lib/Device';

var padding = isIE() ? {
  padding: '0 2rem'
} : _objectSpread({}, sapUiResponsiveContentPadding);
var DynamicPageTitleStyles = {
  container: _objectSpread(_objectSpread({}, padding), {}, {
    backgroundColor: ThemingParameters.sapObjectHeader_Background,
    minHeight: '3rem',
    wordWrap: 'break-word',
    paddingTop: '0.5rem',
    paddingBottom: '0.5rem',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    position: 'sticky',
    top: 0,
    zIndex: 2,
    '&:hover': {
      // TODO background color should be sapObjectHeader_Hover_Background (same color as sapTile_Active_Background)
      backgroundColor: ThemingParameters.sapTile_Active_Background
    }
  }),
  iEClass: {
    position: 'fixed',
    // page width - padding - scrollbar
    width: 'calc(100% - 18px - 4rem)'
  },
  breadcrumbs: {
    padding: '0.5rem 0 0.25rem 0'
  },
  titleMainSection: {
    flexGrow: 1,
    width: '100%',
    alignItems: 'flex-start'
  },
  title: {
    color: ThemingParameters.sapGroup_TitleTextColor,
    fontSize: ThemingParameters.sapFontHeader3Size,
    padding: '0.3125rem 0 0 0',
    textOverflow: 'ellipsis',
    flexShrink: 1
  },
  subTitle: {
    color: ThemingParameters.sapContent_LabelColor,
    fontSize: ThemingParameters.sapFontSize,
    marginTop: '0.25rem',
    marginBottom: '0.25rem'
  },
  content: {
    flexShrink: 1.6,
    padding: '0 0 0 1rem'
  },
  actions: {
    flexShrink: 1.6,
    paddingLeft: '0.5rem',
    marginLeft: 'auto'
  },
  navigationActions: {
    flexShrink: 1.6,
    paddingLeft: '0.5rem',
    marginLeft: 'auto'
  },
  navigationActionsSeparator: _objectSpread({
    background: ThemingParameters.sapBackgroundColor,
    width: '0.0625rem',
    height: '2rem'
  }, sapUiTinyMarginBeginEnd)
};

var useStyles = createUseStyles(DynamicPageTitleStyles, {
  name: 'DynamicPageTitle'
});
/**
 * The dynamic page title defines the elements in the top header.
 * It can contain Breadcrumbs, Title, Subtitle, Content, KPIs and Actions.
 */

var DynamicPageTitle = /*#__PURE__*/forwardRef(function (props, ref) {
  var actions = props.actions,
      onToggleHeaderContentVisibility = props.onToggleHeaderContentVisibility,
      breadcrumbs = props.breadcrumbs,
      children = props.children,
      heading = props.heading,
      subHeading = props.subHeading,
      navigationActions = props.navigationActions,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip;
  var classes = useStyles();
  var containerClasses = StyleClassHelper.of(classes.container);

  if (isIE()) {
    containerClasses.put(classes.iEClass);
  }

  containerClasses.putIfPresent(className);
  var passThroughProps = usePassThroughHtmlProps(props, ['onToggleHeaderContentVisibility']);
  return /*#__PURE__*/React.createElement(FlexBox, _extends({
    className: containerClasses.className,
    style: style,
    ref: ref,
    tooltip: tooltip,
    "data-component-name": "DynamicPageTitle",
    onClick: onToggleHeaderContentVisibility
  }, passThroughProps), /*#__PURE__*/React.createElement("div", {
    className: classes.breadcrumbs
  }, breadcrumbs), /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Center,
    style: {
      flexGrow: 1,
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(FlexBox, {
    className: classes.titleMainSection
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.title
  }, heading), /*#__PURE__*/React.createElement("div", {
    className: classes.content
  }, /*#__PURE__*/React.createElement(Toolbar, {
    toolbarStyle: ToolbarStyle.Clear
  }, children))), /*#__PURE__*/React.createElement(Toolbar, {
    design: ToolbarDesign.Auto,
    toolbarStyle: ToolbarStyle.Clear
  }, /*#__PURE__*/React.createElement(ToolbarSpacer, null), actions, Children.count(actions) > 0 && Children.count(navigationActions) > 0 && /*#__PURE__*/React.createElement(ToolbarSeparator, null), navigationActions)), /*#__PURE__*/React.createElement(FlexBox, null, /*#__PURE__*/React.createElement("div", {
    className: classes.subTitle
  }, subHeading)));
});
DynamicPageTitle.displayName = 'DynamicPageTitle';

export { DynamicPageTitle };
//# sourceMappingURL=DynamicPageTitle.js.map
