import _extends from '@babel/runtime/helpers/extends';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { createUseStyles } from 'react-jss';
import { useI18nBundle, usePassThroughHtmlProps, useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/hooks';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import { FlexBox } from '@ui5/webcomponents-react/lib/FlexBox';
import { GlobalStyleClasses } from '@ui5/webcomponents-react/lib/GlobalStyleClasses';
import { PageBackgroundDesign } from '@ui5/webcomponents-react/lib/PageBackgroundDesign';
import React, { forwardRef, useCallback, useState, useEffect, useRef, cloneElement } from 'react';
import { addCustomCSS } from '@ui5/webcomponents-base/dist/Theming';
import '@ui5/webcomponents-icons/dist/slim-arrow-down.js';
import '@ui5/webcomponents-icons/dist/slim-arrow-up.js';
import { EXPAND_HEADER, COLLAPSE_HEADER, UNPIN_HEADER, PIN_HEADER } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Button } from '@ui5/webcomponents-react/lib/Button';
import { ToggleButton } from '@ui5/webcomponents-react/lib/ToggleButton';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { sapUiResponsiveContentPadding } from '@ui5/webcomponents-react-base/lib/spacing';
import { isIE } from '@ui5/webcomponents-react-base/lib/Device';

addCustomCSS('ui5-button', "\n  :host([data-ui5wcr-dynamic-page-header-action]){\n    width: 1.375rem;\n    height: 1.375rem;\n    min-width: 1.375rem;\n  }\n  :host([data-ui5wcr-dynamic-page-header-action]) .ui5-button-root {\n    padding: 0;\n  }");
addCustomCSS('ui5-togglebutton', "\n    :host([data-ui5wcr-dynamic-page-header-action]){\n    width: 1.375rem;\n    height: 1.375rem;\n    min-width: 1.375rem;\n  }\n  :host([data-ui5wcr-dynamic-page-header-action]) .ui5-button-root {\n    padding: 0;\n  }");
var anchorBarStyles = {
  anchorBarActionButton: {
    position: 'absolute',
    top: "-0.6875rem",
    marginLeft: "-0.6875rem",
    left: '50%',
    zIndex: 3,
    '&:before, &:after': {
      content: '""',
      position: 'absolute',
      width: '4rem',
      top: '50%',
      height: '0.0625rem'
    },
    '&:before': {
      right: '100%',
      backgroundImage: "linear-gradient(to left, ".concat(ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))")
    },
    '&:after': {
      backgroundImage: "linear-gradient(to right, ".concat(ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))"),
      left: '100%'
    }
  },
  anchorBarActionButtonExpandable: {},
  anchorBarActionButtonPinnable: {},
  anchorBarActionPinnableAndExpandable: {
    '&$anchorBarActionButtonPinnable': {
      marginLeft: '0.25rem',
      '&:before': {
        backgroundColor: 'white'
      }
    },
    '&$anchorBarActionButtonExpandable': {
      marginLeft: '-1.75rem'
    }
  }
};
var useStyles = createUseStyles(anchorBarStyles, {
  name: 'DynamicPageAnchorBar'
});

/**
 * The dynamic page anchor bar contains the expand/collapse (expands or collapses the header content)
 * and pin button (pins the content header).
 */
var DynamicPageAnchorBar = /*#__PURE__*/forwardRef(function (props, ref) {
  var showHideHeaderButton = props.showHideHeaderButton,
      headerContentHeight = props.headerContentHeight,
      headerContentPinnable = props.headerContentPinnable,
      headerPinned = props.headerPinned,
      setHeaderPinned = props.setHeaderPinned,
      onToggleHeaderContentVisibility = props.onToggleHeaderContentVisibility,
      onHoverToggleButton = props.onHoverToggleButton,
      style = props.style;
  var classes = useStyles();
  var shouldRenderHeaderPinnableButton = headerContentPinnable && headerContentHeight > 0;
  var showBothActions = shouldRenderHeaderPinnableButton && showHideHeaderButton;
  var onPinHeader = useCallback(function (e) {
    setHeaderPinned(e.target.pressed);
  }, [setHeaderPinned]);
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  return /*#__PURE__*/React.createElement("section", {
    style: style,
    role: "navigation",
    className: showHideHeaderButton || headerContentPinnable ? classes.anchorBarActionButton : null,
    ref: ref
  }, showHideHeaderButton && /*#__PURE__*/React.createElement(Button, {
    icon: headerContentHeight === 0 ? 'slim-arrow-down' : 'slim-arrow-up',
    "data-ui5wcr-dynamic-page-header-action": "",
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonExpandable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExpandable : ''),
    onClick: onToggleHeaderContentVisibility,
    onMouseOver: onHoverToggleButton,
    onMouseLeave: onHoverToggleButton,
    tooltip: i18nBundle.getText(headerContentHeight === 0 ? EXPAND_HEADER : COLLAPSE_HEADER),
    "aria-label": i18nBundle.getText(headerContentHeight === 0 ? EXPAND_HEADER : COLLAPSE_HEADER)
  }), shouldRenderHeaderPinnableButton && /*#__PURE__*/React.createElement(ToggleButton, {
    icon: "pushpin-off",
    "data-ui5wcr-dynamic-page-header-action": "",
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonPinnable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExpandable : ''),
    pressed: headerPinned,
    onClick: onPinHeader,
    tooltip: i18nBundle.getText(headerPinned ? UNPIN_HEADER : PIN_HEADER),
    "aria-label": i18nBundle.getText(headerPinned ? UNPIN_HEADER : PIN_HEADER)
  }));
});
DynamicPageAnchorBar.displayName = 'DynamicPageAnchorBar';

var useObserveHeights = function useObserveHeights(objectPage, topHeader, headerContentRef, anchorBarRef, _ref) {
  var _anchorBarRef$current, _anchorBarRef$current2;

  var noHeader = _ref.noHeader;

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      topHeaderHeight = _useState2[0],
      setTopHeaderHeight = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      headerContentHeight = _useState4[0],
      setHeaderContentHeight = _useState4[1];

  var _useState5 = useState(true),
      _useState6 = _slicedToArray(_useState5, 2),
      isIntersecting = _useState6[0],
      setIsIntersecting = _useState6[1];

  useEffect(function () {
    var headerIntersectionObserver = new IntersectionObserver(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 1),
          header = _ref3[0];

      if (header.isIntersecting) {
        setIsIntersecting(true);
        setHeaderContentHeight(header.target.offsetHeight);
      } else {
        setIsIntersecting(false);
        setHeaderContentHeight(0);
      }
    }, {
      rootMargin: "-".concat(topHeaderHeight, "px 0px 0px 0px"),
      root: objectPage.current,
      threshold: 0.3
    });

    if (headerContentRef.current) {
      headerIntersectionObserver.observe(headerContentRef.current);
    }

    return function () {
      headerIntersectionObserver.disconnect();
    };
  }, [topHeaderHeight, setHeaderContentHeight, headerContentRef, setIsIntersecting]); // top header

  useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref4) {
      var _header$contentRect$h, _header$contentRect;

      var _ref5 = _slicedToArray(_ref4, 1),
          header = _ref5[0];

      setTopHeaderHeight((_header$contentRect$h = header === null || header === void 0 ? void 0 : (_header$contentRect = header.contentRect) === null || _header$contentRect === void 0 ? void 0 : _header$contentRect.height) !== null && _header$contentRect$h !== void 0 ? _header$contentRect$h : 0);
    });

    if (topHeader.current) {
      headerContentResizeObserver.observe(topHeader.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [topHeader.current, setTopHeaderHeight]); // header content

  useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 1),
          headerContent = _ref7[0];

      if (isIntersecting) {
        var _headerContent$conten, _headerContent$conten2;

        setHeaderContentHeight((_headerContent$conten = headerContent === null || headerContent === void 0 ? void 0 : (_headerContent$conten2 = headerContent.contentRect) === null || _headerContent$conten2 === void 0 ? void 0 : _headerContent$conten2.height) !== null && _headerContent$conten !== void 0 ? _headerContent$conten : 0);
      }
    });

    if (headerContentRef.current) {
      headerContentResizeObserver.observe(headerContentRef.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [headerContentRef.current, setHeaderContentHeight, isIntersecting]);
  var anchorBarHeight = (_anchorBarRef$current = (_anchorBarRef$current2 = anchorBarRef.current) === null || _anchorBarRef$current2 === void 0 ? void 0 : _anchorBarRef$current2.offsetHeight) !== null && _anchorBarRef$current !== void 0 ? _anchorBarRef$current : 33;
  var totalHeaderHeight = (noHeader ? 0 : topHeaderHeight + headerContentHeight) + anchorBarHeight;
  return {
    topHeaderHeight: topHeaderHeight,
    headerContentHeight: headerContentHeight,
    anchorBarHeight: anchorBarHeight,
    totalHeaderHeight: totalHeaderHeight
  };
};

var _headerCollapsed;
var DynamicPageCssVariables = {
  headerDisplay: '--ui5wcr_DynamicPage_header_display'
};
var styles = {
  dynamicPage: _defineProperty({
    width: '100%',
    height: '100%',
    maxHeight: '100%',
    position: 'relative',
    whiteSpace: 'normal',
    fontFamily: ThemingParameters.sapFontFamily,
    backgroundColor: ThemingParameters.sapBackgroundColor,
    overflowX: 'hidden',
    overflowY: 'auto'
  }, DynamicPageCssVariables.headerDisplay, 'block'),
  headerCollapsed: (_headerCollapsed = {}, _defineProperty(_headerCollapsed, DynamicPageCssVariables.headerDisplay, 'none'), _defineProperty(_headerCollapsed, '& $anchorBar > section[role="navigation"]', {
    top: '-0.025rem'
  }), _headerCollapsed),
  anchorBar: {
    position: 'sticky',
    boxShadow: ThemingParameters.sapContent_HeaderShadow,
    height: '1px',
    zIndex: 2,
    '& > section[role="navigation"]': {
      top: 0
    }
  },
  iEClass: {
    position: 'fixed',
    //page width - scrollbar
    width: 'calc(100% - 18px)'
  },
  iEBackgroundElement: {
    position: 'fixed',
    backgroundColor: ThemingParameters.sapObjectHeader_Background
  },
  contentContainer: _objectSpread(_objectSpread({}, sapUiResponsiveContentPadding), {}, {
    paddingTop: '1rem !important',
    boxSizing: 'border-box',
    width: '100%',
    height: 'auto',
    fontFamily: ThemingParameters.sapFontFamily,
    zIndex: 0
  }),
  backgroundStandard: {
    background: ThemingParameters.sapBackgroundColor
  },
  backgroundSolid: {
    background: ThemingParameters.sapBackgroundColor
  },
  backgroundList: {
    background: ThemingParameters.sapGroup_ContentBackground
  },
  backgroundTransparent: {
    background: 'transparent'
  }
};

/**
 * Defines the current state of the component.
 */
var HEADER_STATES;

(function (HEADER_STATES) {
  HEADER_STATES["AUTO"] = "AUTO";
  HEADER_STATES["VISIBLE_PINNED"] = "VISIBLE_PINNED";
  HEADER_STATES["HIDDEN_PINNED"] = "HIDDEN_PINNED";
  HEADER_STATES["VISIBLE"] = "VISIBLE";
  HEADER_STATES["HIDDEN"] = "HIDDEN";
})(HEADER_STATES || (HEADER_STATES = {}));

var useStyles$1 = createUseStyles(styles, {
  name: 'DynamicPage'
});
/**
 * The dynamic page is a generic layout control designed to support various floorplans and use cases.
 * The content of both the header and the page can differ from floorplan to floorplan.
 *
 * The header of the dynamic page is collapsible, which helps users to focus on the actual page content, but still ensures that important header information
 * and actions are readily available.
 */

var DynamicPage = /*#__PURE__*/forwardRef(function (props, ref) {
  var _headerContentRef$cur, _headerContentRef$cur2, _dynamicPageRef$curre3, _dynamicPageRef$curre4;

  var title = props.title,
      header = props.header,
      tooltip = props.tooltip,
      style = props.style,
      backgroundDesign = props.backgroundDesign,
      showHideHeaderButton = props.showHideHeaderButton,
      headerContentPinnable = props.headerContentPinnable,
      alwaysShowContentHeader = props.alwaysShowContentHeader,
      children = props.children,
      className = props.className;
  var passThroughProps = usePassThroughHtmlProps(props);
  var classes = useStyles$1();
  var dynamicPageClasses = StyleClassHelper.of(classes.dynamicPage, GlobalStyleClasses.sapScrollBar);
  dynamicPageClasses.put(classes["background".concat(backgroundDesign)]);
  dynamicPageClasses.putIfPresent(className);
  var anchorBarRef = useRef();
  var dynamicPageRef = useConsolidatedRef(ref);
  var topHeaderRef = useRef();
  var headerContentRef = useRef();

  var _useState = useState(alwaysShowContentHeader ? HEADER_STATES.VISIBLE_PINNED : isIE() ? HEADER_STATES.VISIBLE : HEADER_STATES.AUTO),
      _useState2 = _slicedToArray(_useState, 2),
      headerState = _useState2[0],
      setHeaderState = _useState2[1]; // observe heights of header parts


  var _useObserveHeights = useObserveHeights(dynamicPageRef, topHeaderRef, headerContentRef, anchorBarRef, {
    noHeader: false
  }),
      topHeaderHeight = _useObserveHeights.topHeaderHeight,
      headerContentHeight = _useObserveHeights.headerContentHeight;

  if (headerState === HEADER_STATES.HIDDEN || headerState === HEADER_STATES.HIDDEN_PINNED) {
    dynamicPageClasses.put(classes.headerCollapsed);
  }

  useEffect(function () {
    var oneTimeScrollHandler = function oneTimeScrollHandler() {
      if (!isIE()) {
        setHeaderState(HEADER_STATES.AUTO);
      }
    };

    if (headerState === HEADER_STATES.VISIBLE || headerState === HEADER_STATES.HIDDEN) {
      var _dynamicPageRef$curre;

      (_dynamicPageRef$curre = dynamicPageRef.current) === null || _dynamicPageRef$curre === void 0 ? void 0 : _dynamicPageRef$curre.addEventListener('scroll', oneTimeScrollHandler, {
        once: true
      });
    }

    return function () {
      var _dynamicPageRef$curre2;

      (_dynamicPageRef$curre2 = dynamicPageRef.current) === null || _dynamicPageRef$curre2 === void 0 ? void 0 : _dynamicPageRef$curre2.removeEventListener('scroll', oneTimeScrollHandler);
    };
  }, [dynamicPageRef, headerState]);
  var onToggleHeaderContentVisibility = useCallback(function (e, element) {
    var srcElement = element !== null && element !== void 0 ? element : e.target;
    var shouldHideHeader = srcElement.icon === 'slim-arrow-up';
    setHeaderState(function (oldState) {
      if (oldState === HEADER_STATES.VISIBLE_PINNED || oldState === HEADER_STATES.HIDDEN_PINNED) {
        return shouldHideHeader ? HEADER_STATES.HIDDEN_PINNED : HEADER_STATES.VISIBLE_PINNED;
      }

      return shouldHideHeader ? HEADER_STATES.HIDDEN : HEADER_STATES.VISIBLE;
    });
  }, [setHeaderState]);
  var onHoverToggleButton = useCallback(function (e) {
    // TODO background color should be sapObjectHeader_Hover_Background (same color as sapTile_Active_Background)
    topHeaderRef.current.style.backgroundColor = (e === null || e === void 0 ? void 0 : e.type) === 'mouseover' ? ThemingParameters.sapTile_Active_Background : null;
  }, [topHeaderRef]);

  var onToggleHeaderContent = function onToggleHeaderContent(e) {
    if (e.target.tagName === 'DIV') {
      onToggleHeaderContentVisibility(e, anchorBarRef.current.children.item(0).children.item(0));
    }
  };

  var handleHeaderPinnedChange = useCallback(function (headerWillPin) {
    if (headerWillPin) {
      setHeaderState(HEADER_STATES.VISIBLE_PINNED);
    } else {
      setHeaderState(HEADER_STATES.VISIBLE);
    }
  }, [setHeaderState]);
  useEffect(function () {
    if (alwaysShowContentHeader) {
      setHeaderState(HEADER_STATES.VISIBLE_PINNED);
    } else if (!isIE()) {
      setHeaderState(HEADER_STATES.AUTO);
    }
  }, [alwaysShowContentHeader, setHeaderState]);
  var anchorBarClasses = StyleClassHelper.of(classes.anchorBar);

  if (isIE()) {
    anchorBarClasses.put(classes.iEClass);
  }

  return /*#__PURE__*/React.createElement("div", _extends({
    ref: dynamicPageRef,
    title: tooltip,
    className: dynamicPageClasses.toString(),
    style: style
  }, passThroughProps), title && /*#__PURE__*/cloneElement(title, {
    ref: topHeaderRef,
    onToggleHeaderContentVisibility: onToggleHeaderContent
  }), header && /*#__PURE__*/cloneElement(header, {
    ref: headerContentRef,
    headerPinned: headerState === HEADER_STATES.VISIBLE_PINNED || headerState === HEADER_STATES.VISIBLE,
    topHeaderHeight: topHeaderHeight
  }), /*#__PURE__*/React.createElement(FlexBox, {
    className: anchorBarClasses.className,
    ref: anchorBarRef,
    style: {
      top: headerState === HEADER_STATES.VISIBLE_PINNED || headerState === HEADER_STATES.VISIBLE ? ((_headerContentRef$cur = headerContentRef === null || headerContentRef === void 0 ? void 0 : (_headerContentRef$cur2 = headerContentRef.current) === null || _headerContentRef$cur2 === void 0 ? void 0 : _headerContentRef$cur2.offsetHeight) !== null && _headerContentRef$cur !== void 0 ? _headerContentRef$cur : 0) + topHeaderHeight : topHeaderHeight
    }
  }, /*#__PURE__*/React.createElement(DynamicPageAnchorBar, {
    headerContentPinnable: headerContentPinnable,
    showHideHeaderButton: showHideHeaderButton,
    headerContentHeight: headerContentHeight,
    onToggleHeaderContentVisibility: onToggleHeaderContentVisibility,
    setHeaderPinned: handleHeaderPinnedChange,
    headerPinned: headerState === HEADER_STATES.VISIBLE_PINNED || headerState === HEADER_STATES.HIDDEN_PINNED,
    onHoverToggleButton: onHoverToggleButton
  })), isIE() && /*#__PURE__*/React.createElement("div", {
    className: classes.iEBackgroundElement,
    style: {
      height: "".concat(headerContentHeight + topHeaderHeight, "px"),
      width: "calc(100% - ".concat((dynamicPageRef === null || dynamicPageRef === void 0 ? void 0 : (_dynamicPageRef$curre3 = dynamicPageRef.current) === null || _dynamicPageRef$curre3 === void 0 ? void 0 : _dynamicPageRef$curre3.clientHeight) < (dynamicPageRef === null || dynamicPageRef === void 0 ? void 0 : (_dynamicPageRef$curre4 = dynamicPageRef.current) === null || _dynamicPageRef$curre4 === void 0 ? void 0 : _dynamicPageRef$curre4.scrollHeight) ? '18px' : '0px', ")")
    }
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.contentContainer,
    style: {
      marginTop: isIE() ? "".concat(headerContentHeight + topHeaderHeight + 34, "px") : 0
    }
  }, children));
});
DynamicPage.displayName = 'DynamicPage';
DynamicPage.defaultProps = {
  backgroundDesign: PageBackgroundDesign.Standard,
  showHideHeaderButton: true,
  headerContentPinnable: true,
  alwaysShowContentHeader: false
};

export { DynamicPage };
//# sourceMappingURL=DynamicPage.js.map
