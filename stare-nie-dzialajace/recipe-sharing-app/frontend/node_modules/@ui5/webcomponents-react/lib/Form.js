import _extends from '@babel/runtime/helpers/extends';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { CssSizeVariables } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import { createUseStyles } from 'react-jss';
import { getCurrentRange } from '@ui5/webcomponents-react-base/lib/Device';
import { useConsolidatedRef, usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/hooks';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { Title } from '@ui5/webcomponents-react/lib/Title';
import { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';
import React, { forwardRef, useState, useRef, useEffect, useMemo, Children, cloneElement } from 'react';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';

var labelSpanClasses = function labelSpanClasses() {
  var styleClasses = {};

  for (var i = 1; i <= 11; i++) {
    styleClasses["labelSpan".concat(i)] = {
      '--ui5wcr_form_content_span': 12 - i,
      '--ui5wcr_form_label_span': i
    };
  }

  return styleClasses;
};

var styles = _objectSpread(_objectSpread({
  form: {
    display: 'grid',
    alignItems: 'baseline',
    rowGap: '0.25rem',
    columnGap: '0.5rem',
    gridTemplateColumns: "repeat(12, 1fr)",
    '--ui5wcr_form_full_span': 'span 12',
    '--ui5wcr_form_label_text_align': 'end',
    '&[data-columns="1"]': {},
    '&[data-columns="2"]': {
      gridTemplateColumns: "repeat(24, 1fr)",
      '--ui5wcr_form_full_span': 'span 24'
    },
    '&[data-columns="3"]': {
      gridTemplateColumns: "repeat(36, 1fr)",
      '--ui5wcr_form_full_span': 'span 36'
    },
    '&[data-columns="4"]': {
      gridTemplateColumns: "repeat(48, 1fr)",
      '--ui5wcr_form_full_span': 'span 48'
    },
    '&[data-columns="5"]': {
      gridTemplateColumns: "repeat(60, 1fr)",
      '--ui5wcr_form_full_span': 'span 60'
    },
    '&[data-columns="6"]': {
      gridTemplateColumns: "repeat(72, 1fr)",
      '--ui5wcr_form_full_span': 'span 72'
    },
    '&[data-columns="7"]': {
      gridTemplateColumns: "repeat(84, 1fr)",
      '--ui5wcr_form_full_span': 'span 84'
    },
    '&[data-columns="8"]': {
      gridTemplateColumns: "repeat(96, 1fr)",
      '--ui5wcr_form_full_span': 'span 96'
    },
    '&[data-columns="9"]': {
      gridTemplateColumns: "repeat(108, 1fr)",
      '--ui5wcr_form_full_span': 'span 108'
    },
    '&[data-columns="10"]': {
      gridTemplateColumns: "repeat(120, 1fr)",
      '--ui5wcr_form_full_span': 'span 120'
    },
    '&[data-columns="11"]': {
      gridTemplateColumns: "repeat(132, 1fr)",
      '--ui5wcr_form_full_span': 'span 132'
    },
    '&[data-columns="12"]': {
      gridTemplateColumns: "repeat(144, 1fr)",
      '--ui5wcr_form_full_span': 'span 144'
    }
  },
  formTitle: {
    borderBottom: "1px solid ".concat(ThemingParameters.sapGroup_TitleBorderColor),
    marginBottom: '1.75rem',
    gridColumn: 'var(--ui5wcr_form_full_span)'
  }
}, labelSpanClasses()), {}, {
  labelSpan12: {
    '--ui5wcr_form_content_span': 12,
    '--ui5wcr_form_label_text_align': 'start'
  }
});

var useStyles = createUseStyles(styles, {
  name: 'Form'
});
/**
 * The `Form` component arranges labels and fields into groups and rows. There are different ways to visualize forms for different screen sizes.
 */

var Form = /*#__PURE__*/forwardRef(function (props, ref) {
  var title = props.title,
      children = props.children,
      className = props.className,
      slot = props.slot,
      style = props.style,
      tooltip = props.tooltip,
      columnsS = props.columnsS,
      columnsM = props.columnsM,
      columnsL = props.columnsL,
      columnsXL = props.columnsXL,
      labelSpanS = props.labelSpanS,
      labelSpanM = props.labelSpanM,
      labelSpanL = props.labelSpanL,
      labelSpanXL = props.labelSpanXL;
  var columnsMap = new Map();
  columnsMap.set('Phone', columnsS);
  columnsMap.set('Tablet', columnsM);
  columnsMap.set('Desktop', columnsL);
  columnsMap.set('LargeDesktop', columnsXL);
  var labelSpanMap = new Map();
  labelSpanMap.set('Phone', labelSpanS);
  labelSpanMap.set('Tablet', labelSpanM);
  labelSpanMap.set('Desktop', labelSpanL);
  labelSpanMap.set('LargeDesktop', labelSpanXL);
  var formRef = useConsolidatedRef(ref); // use the window range set as first best guess

  var _useState = useState(getCurrentRange('StdExt', window.innerWidth).name),
      _useState2 = _slicedToArray(_useState, 2),
      currentRange = _useState2[0],
      setCurrentRange = _useState2[1];

  var lastRange = useRef(currentRange);
  useEffect(function () {
    var observer = new ResizeObserver(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          form = _ref2[0];

      var newRange = getCurrentRange('StdExt', form.contentRect.width).name;

      if (lastRange.current !== newRange) {
        lastRange.current = newRange;
        setCurrentRange(newRange);
      }
    });

    if (formRef.current) {
      observer.observe(formRef.current);
    }

    return function () {
      observer.disconnect();
    };
  }, [formRef, setCurrentRange, lastRange]);
  var classes = useStyles();
  var currentNumberOfColumns = columnsMap.get(currentRange);
  var currentLabelSpan = labelSpanMap.get(currentRange);

  var _useMemo = useMemo(function () {
    var _props$title;

    var computedFormGroups = [];

    if (Children.count(children) === 1 && !title && ((_props$title = children.props.title) === null || _props$title === void 0 ? void 0 : _props$title.length) > 0) {
      return [/*#__PURE__*/cloneElement(children, {
        title: null
      }), children.props.title];
    }

    var currentColumnCount = currentNumberOfColumns;

    if (currentColumnCount === 1) {
      return [children, title];
    }

    var rows = [];
    var childrenArray = Children.toArray(children);
    var estimatedNumberOfGroupRows = childrenArray.length / currentColumnCount;

    for (var i = 0; i < estimatedNumberOfGroupRows; i++) {
      rows[i] = childrenArray.slice(i * currentColumnCount, i * currentColumnCount + currentColumnCount);
    }

    var maxRowsPerRow = [];
    rows.forEach(function (rowGroup, rowIndex) {
      var numberOfRowsOfEachForm = rowGroup.map(function (row) {
        if (row.type.displayName === 'FormItem') {
          return 1;
        }

        return Children.count(row.props.children) + 1;
      });
      maxRowsPerRow[rowIndex] = Math.max.apply(Math, _toConsumableArray(numberOfRowsOfEachForm));
    });
    var totalRowCount = 2;
    rows.forEach(function (column, rowIndex) {
      var rowsForThisRow = maxRowsPerRow[rowIndex];
      column.forEach(function (cell, columnIndex) {
        var _cell$props;

        var titleStyles = {
          gridColumnEnd: 'span 12',
          gridColumnStart: columnIndex * 12 + 1,
          gridRowStart: totalRowCount,
          display: 'flex',
          alignItems: 'center',
          fontFamily: ThemingParameters.sapFontFamily,
          height: CssSizeVariables.sapWcrFormGroupTitleHeight,
          lineHeight: CssSizeVariables.sapWcrFormGroupTitleHeight,
          color: ThemingParameters.sapTextColor,
          fontSize: ThemingParameters.sapFontSize,
          fontWeight: 'bold',
          backgroundColor: ThemingParameters.sapGroup_TitleBackground,
          margin: 0,
          paddingTop: '1rem'
        };

        if (cell !== null && cell !== void 0 && (_cell$props = cell.props) !== null && _cell$props !== void 0 && _cell$props.title) {
          computedFormGroups.push( /*#__PURE__*/React.createElement("h6", {
            style: titleStyles,
            title: cell.props.title,
            "aria-label": cell.props.title,
            key: "title-col-".concat(columnIndex, "-row-").concat(totalRowCount)
          }, cell.props.title));
        }

        for (var _i = 0; _i < rowsForThisRow; _i++) {
          var itemToRender = cell.type.displayName === 'FormGroup' ? Children.toArray(cell.props.children)[_i] : cell.type.displayName === 'FormItem' && _i === 0 ? cell : null;

          if (itemToRender) {
            computedFormGroups.push( /*#__PURE__*/cloneElement(itemToRender, {
              key: "col-".concat(columnIndex, "-row-").concat(totalRowCount + _i),
              columnIndex: columnIndex,
              lastGroupItem: cell.type.displayName === 'FormGroup' && rowsForThisRow - 2 === _i,
              rowIndex: totalRowCount + _i + 1,
              labelSpan: currentLabelSpan
            }));
          }
        }
      });
      totalRowCount += rowsForThisRow;

      if (rowsForThisRow === 1) {
        totalRowCount += 1;
      }
    });
    return [computedFormGroups, title];
  }, [children, currentRange, title, currentNumberOfColumns, currentLabelSpan]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      formGroups = _useMemo2[0],
      updatedTitle = _useMemo2[1];

  var passThroughProps = usePassThroughHtmlProps(props);
  var formClassNames = StyleClassHelper.of(classes.form).put(classes["labelSpan".concat((currentLabelSpan - 1) % 12 + 1)]).putIfPresent(className);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: formRef,
    slot: slot,
    className: formClassNames.valueOf(),
    title: tooltip,
    style: style,
    "data-columns": currentNumberOfColumns
  }, passThroughProps), updatedTitle && /*#__PURE__*/React.createElement(Title, {
    level: TitleLevel.H3,
    className: classes.formTitle
  }, updatedTitle), formGroups);
});
Form.displayName = 'Form';
Form.defaultProps = {
  columnsS: 1,
  columnsM: 1,
  columnsL: 1,
  columnsXL: 2,
  labelSpanS: 12,
  labelSpanM: 2,
  labelSpanL: 4,
  labelSpanXL: 4
};

export { Form };
//# sourceMappingURL=Form.js.map
