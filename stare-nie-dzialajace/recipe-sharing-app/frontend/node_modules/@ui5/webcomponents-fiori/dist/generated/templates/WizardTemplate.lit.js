
/* eslint no-unused-vars: 0 */
import ifDefined from '@ui5/webcomponents-base/dist/renderer/ifDefined.js';
import { html, svg, repeat, classMap, styleMap, unsafeHTML, setTags, setSuffix } from '@ui5/webcomponents-base/dist/renderer/LitRenderer.js';
const block0 = (context) => { return html`<div class="ui5-wiz-root" aria-label="${ifDefined(context.ariaLabelText)}"><div class="ui5-wiz-nav" role="navigation" aria-roledescription="${ifDefined(context.navAriaRoleDescription)}" tabindex="-1"><ul class="ui5-wiz-nav-list" role="list">${ repeat(context._stepsInHeader, (item, index) => item._id || index, (item, index) => block1(item, index, context)) }</ul></div><div class="ui5-wiz-content" @scroll="${context.onScroll}">${ repeat(context._steps, (item, index) => item._id || index, (item, index) => block2(item, index, context)) }</div></div>`; };
const block1 = (item, index, context) => { return html`<ui5-wizard-tab heading="${ifDefined(item.heading)}" subheading="${ifDefined(item.subheading)}" icon="${ifDefined(item.icon)}" number="${ifDefined(item.number)}" ?disabled="${item.disabled}" ?selected="${item.selected}" ?hide-separator="${item.hideSeparator}" ?active-separator="${item.activeSeparator}" ?branching-separator="${item.branchingSeparator}" role="listitem" aria-posinset="${ifDefined(item.pos)}" aria-setsize="${ifDefined(item.size)}" aria-roledescription="${ifDefined(item.roleDescription)}" aria-label="${ifDefined(item.ariaLabel)}" data-ui5-content-ref-id="${ifDefined(item.refStepId)}" data-ui5-index="${ifDefined(item.pos)}" _tab-index="${ifDefined(item.tabIndex)}" @selection-change-requested="${context.onSelectionChangeRequested}" @focused="${context.onStepInHeaderFocused}"></ui5-wizard-tab>`; };
const block2 = (item, index, context) => { return html`<div class="ui5-wiz-content-item" ?hidden="${item.disabled}" ?selected="${item.selected}" ?stretch="${item.stretch}" data-ui5-content-item-ref-id="${ifDefined(item._id)}"><slot name="${ifDefined(item._individualSlot)}"></slot></div>`; };


const main = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0(context);
};
 
export default main;