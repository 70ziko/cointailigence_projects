import { useRef, useMemo, useEffect, useState, useLayoutEffect } from 'react';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _toArray from '@babel/runtime/helpers/toArray';
import { getI18nBundleData } from '@ui5/webcomponents-base/dist/asset-registries/i18n';
import { getI18nBundle, fetchI18nBundle } from '@ui5/webcomponents-base/dist/i18nBundle';
import { attachLanguageChange, detachLanguageChange } from '@ui5/webcomponents-base/dist/locale/languageChange';
import { useIsomorphicLayoutEffect as useIsomorphicLayoutEffect$1 } from '@ui5/webcomponents-react-base/lib/hooks';
import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';
import { getCurrentRange, attachMediaHandler, detachMediaHandler } from '@ui5/webcomponents-react-base/lib/Device';
import { getRTL } from '@ui5/webcomponents-base/dist/config/RTL';

var useConsolidatedRef = function useConsolidatedRef(ref) {
  var localRef = useRef(null);
  var consolidatedRef = useMemo(function () {
    if (!ref || typeof ref === 'function') {
      return localRef;
    }

    return ref;
  }, [ref]);
  useEffect(function () {
    if (typeof ref === 'function') {
      // @ts-ignore
      ref(consolidatedRef.current);
    }
  }, [consolidatedRef.current]);
  return consolidatedRef;
};

var resolveTranslations = function resolveTranslations(bundle, texts) {
  return texts.map(function (text) {
    if (Array.isArray(text)) {
      var _text = _toArray(text),
          key = _text[0],
          replacements = _text.slice(1);

      return bundle.getText(key, replacements);
    }

    return bundle.getText(text);
  });
};

var useI18nText = function useI18nText(bundleName) {
  for (var _len = arguments.length, texts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    texts[_key - 1] = arguments[_key];
  }

  var i18nBundle = getI18nBundle(bundleName);

  var _useState = useState(resolveTranslations(i18nBundle, texts)),
      _useState2 = _slicedToArray(_useState, 2),
      translations = _useState2[0],
      setTranslations = _useState2[1];

  useEffect(function () {
    deprecationNotice('useI18nText', "'useI18nText' is deprecated and will be removed in the next release. Please use 'useI18nBundle' instead.\nA Migration Guide can be found here: https://sap.github.io/ui5-webcomponents-react/?path=/docs/migration-guide--page#migrating-from-013x-to-0140");
  }, []);
  useEffect(function () {
    var didCancel = false;

    var fetchAndLoadBundle = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return fetchI18nBundle(bundleName);

              case 2:
                if (!didCancel) {
                  setTranslations(function (prev) {
                    var next = resolveTranslations(i18nBundle, texts);

                    if (prev.length === next.length && prev.every(function (translation, index) {
                      return next[index] === translation;
                    })) {
                      return prev;
                    }

                    return next;
                  });
                }

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function fetchAndLoadBundle() {
        return _ref.apply(this, arguments);
      };
    }();

    fetchAndLoadBundle();
    return function () {
      didCancel = true;
    };
  }, [fetchI18nBundle, bundleName].concat(texts));
  return translations;
};
var useI18nBundle = function useI18nBundle(bundleName) {
  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2);
      _useState4[0];
      var setUpdater = _useState4[1];

  useIsomorphicLayoutEffect$1(function () {
    var isMounted = true;
    var i18nBundleData = getI18nBundleData('@ui5/webcomponents-react');

    if (!i18nBundleData) {
      fetchI18nBundle("".concat(bundleName)).then(function () {
        if (isMounted) {
          setUpdater(function (old) {
            return old + 1;
          });
        }
      });
    }

    return function () {
      isMounted = false;
    };
  }, [bundleName]);
  useEffect(function () {
    var isMounted = true;

    var handler = function handler() {
      fetchI18nBundle("".concat(bundleName)).then(function () {
        if (isMounted) {
          setUpdater(function (old) {
            return old + 1;
          });
        }
      });
    };

    attachLanguageChange(handler);
    return function () {
      isMounted = false;
      detachLanguageChange(handler);
    };
  }, []);
  return getI18nBundle(bundleName);
};

var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;

var PROP_INCLUDELIST = /^(aria-|data-|id$|on[A-Z]|slot$)/;
var usePassThroughHtmlProps = function usePassThroughHtmlProps(props) {
  var propExcludeList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var componentPropExcludelist = new Set(propExcludeList);
  var returnVal = {};

  for (var name in props) {
    if (PROP_INCLUDELIST.test(name) && !componentPropExcludelist.has(name)) {
      returnVal[name] = props[name];
    }
  }

  return returnVal;
};

var useViewportRange = function useViewportRange(rangeSet) {
  var _useState = useState(getCurrentRange(rangeSet, window.innerWidth).name),
      _useState2 = _slicedToArray(_useState, 2),
      currentRange = _useState2[0],
      setCurrentRange = _useState2[1];

  useEffect(function () {
    var isMounted = true;

    var handler = function handler(_ref) {
      var range = _ref.name;

      if (isMounted === true) {
        setCurrentRange(range);
      }
    };

    attachMediaHandler(handler, rangeSet);
    return function () {
      isMounted = false;
      detachMediaHandler(handler);
    };
  }, [setCurrentRange]);
  return currentRange;
};

var GLOBAL_DIR_CSS_VAR = '--_ui5_dir';

var detectRTL = function detectRTL(elementRef) {
  var _elementRef$current;

  var doc = window.document;
  var dirValues = ['ltr', 'rtl']; // exclude "auto" and "" from all calculations

  var locallyAppliedDir = getComputedStyle(elementRef.current).getPropertyValue(GLOBAL_DIR_CSS_VAR); // In that order, inspect the CSS Var (for modern browsers), the element itself, html and body (for IE fallback)

  if (dirValues.includes(locallyAppliedDir)) {
    return locallyAppliedDir === 'rtl';
  }

  if (dirValues.includes((_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.dir)) {
    var _elementRef$current2;

    return ((_elementRef$current2 = elementRef.current) === null || _elementRef$current2 === void 0 ? void 0 : _elementRef$current2.dir) === 'rtl';
  }

  if (dirValues.includes(doc.documentElement.dir)) {
    return doc.documentElement.dir === 'rtl';
  }

  if (dirValues.includes(doc.body.dir)) {
    return doc.body.dir === 'rtl';
  } // Finally, check the configuration for explicitly set RTL or language-implied RTL


  return getRTL();
};

var useIsRTL = function useIsRTL(elementRef) {
  var _useState = useState(getRTL()),
      _useState2 = _slicedToArray(_useState, 2),
      isRTL = _useState2[0],
      setRTL = _useState2[1]; // use config RTL as best guess


  useIsomorphicLayoutEffect$1(function () {
    setRTL(detectRTL(elementRef)); // update immediately while rendering

    var targets = [document.documentElement, document.body, elementRef.current].filter(Boolean);
    var observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.attributeName === 'dir') {
          setRTL(detectRTL(elementRef));
        }
      });
    });
    targets.forEach(function (target) {
      observer.observe(target, {
        attributes: true,
        childList: false,
        characterData: false,
        attributeFilter: ['dir']
      });
    });
    return function () {
      observer.disconnect();
    };
  }, []);
  return isRTL;
};

export { useConsolidatedRef, useI18nBundle, useI18nText, useIsRTL, useIsomorphicLayoutEffect, usePassThroughHtmlProps, useViewportRange };
//# sourceMappingURL=hooks.js.map
