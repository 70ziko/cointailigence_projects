{"ast":null,"code":"import { getLanguage as getConfiguredLanguage, getUseDefaultLanguage as getConfiguredUseDefaultLanguage } from \"../InitialConfiguration.js\";\nimport { fireLanguageChange } from \"../locale/languageChange.js\";\nimport RenderScheduler from \"../RenderScheduler.js\";\nlet language;\nlet useDefaultLanguage;\n\n/**\n * Returns the currently configured language, or the browser language as a fallback\n * @returns {String}\n */\nconst getLanguage = () => {\n  if (language === undefined) {\n    language = getConfiguredLanguage();\n  }\n  return language;\n};\n\n/**\n * Changes the current language, re-fetches all message bundles, updates all language-aware components\n * and returns a promise that resolves when all rendering is done\n *\n * @param newLanguage\n * @returns {Promise<void>}\n */\nconst setLanguage = async newLanguage => {\n  if (language === newLanguage) {\n    return;\n  }\n  language = newLanguage;\n  const listenersResults = fireLanguageChange(newLanguage);\n  await Promise.all(listenersResults);\n  RenderScheduler.reRenderAllUI5Elements({\n    languageAware: true\n  });\n  return RenderScheduler.whenFinished();\n};\n\n/**\n * Defines if the default language, that is inlined, should be used,\n * instead of fetching the language over the network.\n * <b>Note:</b> By default the language will be fetched.\n *\n * @param {Boolean} useDefaultLanguage\n */\nconst setUseDefaultLanguage = useDefaultLang => {\n  useDefaultLanguage = useDefaultLang;\n};\n\n/**\n * Returns if the default language, that is inlined, should be used.\n * @returns {Boolean}\n */\nconst getUseDefaultLanguage = () => {\n  if (useDefaultLanguage === undefined) {\n    setUseDefaultLanguage(getConfiguredUseDefaultLanguage());\n  }\n  return useDefaultLanguage;\n};\nexport { getLanguage, setLanguage, setUseDefaultLanguage, getUseDefaultLanguage };","map":{"version":3,"names":["getLanguage","getConfiguredLanguage","getUseDefaultLanguage","getConfiguredUseDefaultLanguage","fireLanguageChange","RenderScheduler","language","useDefaultLanguage","undefined","setLanguage","newLanguage","listenersResults","Promise","all","reRenderAllUI5Elements","languageAware","whenFinished","setUseDefaultLanguage","useDefaultLang"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/@ui5/webcomponents-base/dist/config/Language.js"],"sourcesContent":["import {\n\tgetLanguage as getConfiguredLanguage,\n\tgetUseDefaultLanguage as getConfiguredUseDefaultLanguage,\n} from \"../InitialConfiguration.js\";\nimport { fireLanguageChange } from \"../locale/languageChange.js\";\nimport RenderScheduler from \"../RenderScheduler.js\";\n\nlet language;\nlet useDefaultLanguage;\n\n/**\n * Returns the currently configured language, or the browser language as a fallback\n * @returns {String}\n */\nconst getLanguage = () => {\n\tif (language === undefined) {\n\t\tlanguage = getConfiguredLanguage();\n\t}\n\treturn language;\n};\n\n/**\n * Changes the current language, re-fetches all message bundles, updates all language-aware components\n * and returns a promise that resolves when all rendering is done\n *\n * @param newLanguage\n * @returns {Promise<void>}\n */\nconst setLanguage = async newLanguage => {\n\tif (language === newLanguage) {\n\t\treturn;\n\t}\n\n\tlanguage = newLanguage;\n\n\tconst listenersResults = fireLanguageChange(newLanguage);\n\tawait Promise.all(listenersResults);\n\tRenderScheduler.reRenderAllUI5Elements({ languageAware: true });\n\treturn RenderScheduler.whenFinished();\n};\n\n/**\n * Defines if the default language, that is inlined, should be used,\n * instead of fetching the language over the network.\n * <b>Note:</b> By default the language will be fetched.\n *\n * @param {Boolean} useDefaultLanguage\n */\nconst setUseDefaultLanguage = useDefaultLang => {\n\tuseDefaultLanguage = useDefaultLang;\n};\n\n/**\n * Returns if the default language, that is inlined, should be used.\n * @returns {Boolean}\n */\nconst getUseDefaultLanguage = () => {\n\tif (useDefaultLanguage === undefined) {\n\t\tsetUseDefaultLanguage(getConfiguredUseDefaultLanguage());\n\t}\n\n\treturn useDefaultLanguage;\n};\n\nexport {\n\tgetLanguage,\n\tsetLanguage,\n\tsetUseDefaultLanguage,\n\tgetUseDefaultLanguage,\n};\n"],"mappings":"AAAA,SACCA,WAAW,IAAIC,qBAAqB,EACpCC,qBAAqB,IAAIC,+BAA+B,QAClD,4BAA4B;AACnC,SAASC,kBAAkB,QAAQ,6BAA6B;AAChE,OAAOC,eAAe,MAAM,uBAAuB;AAEnD,IAAIC,QAAQ;AACZ,IAAIC,kBAAkB;;AAEtB;AACA;AACA;AACA;AACA,MAAMP,WAAW,GAAGA,CAAA,KAAM;EACzB,IAAIM,QAAQ,KAAKE,SAAS,EAAE;IAC3BF,QAAQ,GAAGL,qBAAqB,CAAC,CAAC;EACnC;EACA,OAAOK,QAAQ;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,GAAG,MAAMC,WAAW,IAAI;EACxC,IAAIJ,QAAQ,KAAKI,WAAW,EAAE;IAC7B;EACD;EAEAJ,QAAQ,GAAGI,WAAW;EAEtB,MAAMC,gBAAgB,GAAGP,kBAAkB,CAACM,WAAW,CAAC;EACxD,MAAME,OAAO,CAACC,GAAG,CAACF,gBAAgB,CAAC;EACnCN,eAAe,CAACS,sBAAsB,CAAC;IAAEC,aAAa,EAAE;EAAK,CAAC,CAAC;EAC/D,OAAOV,eAAe,CAACW,YAAY,CAAC,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAGC,cAAc,IAAI;EAC/CX,kBAAkB,GAAGW,cAAc;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMhB,qBAAqB,GAAGA,CAAA,KAAM;EACnC,IAAIK,kBAAkB,KAAKC,SAAS,EAAE;IACrCS,qBAAqB,CAACd,+BAA+B,CAAC,CAAC,CAAC;EACzD;EAEA,OAAOI,kBAAkB;AAC1B,CAAC;AAED,SACCP,WAAW,EACXS,WAAW,EACXQ,qBAAqB,EACrBf,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}