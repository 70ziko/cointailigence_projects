{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst previousStylePropertyCache = new WeakMap();\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS properties. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = directive(styleInfo => part => {\n  if (!(part instanceof AttributePart) || part instanceof PropertyPart || part.committer.name !== 'style' || part.committer.parts.length > 1) {\n    throw new Error('The `styleMap` directive must be used in the style attribute ' + 'and must be the only part in the attribute.');\n  }\n  const {\n    committer\n  } = part;\n  const {\n    style\n  } = committer.element;\n  let previousStyleProperties = previousStylePropertyCache.get(part);\n  if (previousStyleProperties === undefined) {\n    // Write static styles once\n    style.cssText = committer.strings.join(' ');\n    previousStylePropertyCache.set(part, previousStyleProperties = new Set());\n  }\n  // Remove old properties that no longer exist in styleInfo\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousStyleProperties.forEach(name => {\n    if (!(name in styleInfo)) {\n      previousStyleProperties.delete(name);\n      if (name.indexOf('-') === -1) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        style[name] = null;\n      } else {\n        style.removeProperty(name);\n      }\n    }\n  });\n  // Add or update properties\n  for (const name in styleInfo) {\n    previousStyleProperties.add(name);\n    if (name.indexOf('-') === -1) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      style[name] = styleInfo[name];\n    } else {\n      style.setProperty(name, styleInfo[name]);\n    }\n  }\n});","map":{"version":3,"names":["AttributePart","directive","PropertyPart","previousStylePropertyCache","WeakMap","styleMap","styleInfo","part","committer","name","parts","length","Error","style","element","previousStyleProperties","get","undefined","cssText","strings","join","set","Set","forEach","delete","indexOf","removeProperty","add","setProperty"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/lit-html/src/directives/style-map.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\nexport interface StyleInfo {\n  readonly [name: string]: string;\n}\n\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst previousStylePropertyCache = new WeakMap<AttributePart, Set<string>>();\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS properties. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = directive((styleInfo: StyleInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'style' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `styleMap` directive must be used in the style attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {style} = committer.element as HTMLElement;\n\n  let previousStyleProperties = previousStylePropertyCache.get(part);\n\n  if (previousStyleProperties === undefined) {\n    // Write static styles once\n    style.cssText = committer.strings.join(' ');\n    previousStylePropertyCache.set(part, previousStyleProperties = new Set());\n  }\n\n  // Remove old properties that no longer exist in styleInfo\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousStyleProperties.forEach((name) => {\n    if (!(name in styleInfo)) {\n      previousStyleProperties!.delete(name);\n      if (name.indexOf('-') === -1) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (style as any)[name] = null;\n      } else {\n        style.removeProperty(name);\n      }\n    }\n  });\n\n  // Add or update properties\n  for (const name in styleInfo) {\n    previousStyleProperties.add(name);\n    if (name.indexOf('-') === -1) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (style as any)[name] = styleInfo[name];\n    } else {\n      style.setProperty(name, styleInfo[name]);\n    }\n  }\n});\n"],"mappings":"AAAA;;;;;;;;;;;;;AAcA,SAAQA,aAAa,EAAEC,SAAS,EAAQC,YAAY,QAAO,gBAAgB;AAM3E;;;;AAIA,MAAMC,0BAA0B,GAAG,IAAIC,OAAO,EAA8B;AAE5E;;;;;;;;;;;;;;;;;AAiBA,OAAO,MAAMC,QAAQ,GAAGJ,SAAS,CAAEK,SAAoB,IAAMC,IAAU,IAAI;EACzE,IAAI,EAAEA,IAAI,YAAYP,aAAa,CAAC,IAAKO,IAAI,YAAYL,YAAa,IAClEK,IAAI,CAACC,SAAS,CAACC,IAAI,KAAK,OAAO,IAAIF,IAAI,CAACC,SAAS,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACtE,MAAM,IAAIC,KAAK,CACX,+DAA+D,GAC/D,6CAA6C,CAAC;;EAGpD,MAAM;IAACJ;EAAS,CAAC,GAAGD,IAAI;EACxB,MAAM;IAACM;EAAK,CAAC,GAAGL,SAAS,CAACM,OAAsB;EAEhD,IAAIC,uBAAuB,GAAGZ,0BAA0B,CAACa,GAAG,CAACT,IAAI,CAAC;EAElE,IAAIQ,uBAAuB,KAAKE,SAAS,EAAE;IACzC;IACAJ,KAAK,CAACK,OAAO,GAAGV,SAAS,CAACW,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;IAC3CjB,0BAA0B,CAACkB,GAAG,CAACd,IAAI,EAAEQ,uBAAuB,GAAG,IAAIO,GAAG,EAAE,CAAC;;EAG3E;EACA;EACA;EACAP,uBAAuB,CAACQ,OAAO,CAAEd,IAAI,IAAI;IACvC,IAAI,EAAEA,IAAI,IAAIH,SAAS,CAAC,EAAE;MACxBS,uBAAwB,CAACS,MAAM,CAACf,IAAI,CAAC;MACrC,IAAIA,IAAI,CAACgB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QAC5B;QACCZ,KAAa,CAACJ,IAAI,CAAC,GAAG,IAAI;OAC5B,MAAM;QACLI,KAAK,CAACa,cAAc,CAACjB,IAAI,CAAC;;;EAGhC,CAAC,CAAC;EAEF;EACA,KAAK,MAAMA,IAAI,IAAIH,SAAS,EAAE;IAC5BS,uBAAuB,CAACY,GAAG,CAAClB,IAAI,CAAC;IACjC,IAAIA,IAAI,CAACgB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC5B;MACCZ,KAAa,CAACJ,IAAI,CAAC,GAAGH,SAAS,CAACG,IAAI,CAAC;KACvC,MAAM;MACLI,KAAK,CAACe,WAAW,CAACnB,IAAI,EAAEH,SAAS,CAACG,IAAI,CAAC,CAAC;;;AAG9C,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}