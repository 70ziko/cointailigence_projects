{"ast":null,"code":"import { withWebComponent } from '@ui5/webcomponents-react/lib/withWebComponent';\nimport '@ui5/webcomponents/dist/Dialog';\n\n/**\n * The `Dialog` component is used to temporarily display some information in a size-limited window in front of the regular app screen. It is used to prompt the user for an action or a confirmation. The `Dialog` interrupts the current app processing as it is the only focused UI element and the main screen is dimmed/blocked. The dialog combines concepts known from other technologies where the windows have names such as dialog box, dialog window, pop-up, pop-up window, alert box, or message box.\n *\n * The `Dialog` is modal, which means that user action is required before returning to the parent window is possible. The content of the `Dialog` is fully customizable.\n *\n * <a href=\"https://sap.github.io/ui5-webcomponents/playground/components/Dialog\" target=\"_blank\">UI5 Web Components Playground</a>\n */\nvar Dialog = withWebComponent('ui5-dialog', ['headerText', 'initialFocus'], ['draggable', 'resizable', 'stretch', 'preventFocusRestore'], ['footer', 'header'], ['after-close', 'after-open', 'before-close', 'before-open']);\nDialog.displayName = 'Dialog';\nDialog.defaultProps = {\n  draggable: false,\n  resizable: false,\n  stretch: false,\n  preventFocusRestore: false\n};\nexport { Dialog };","map":{"version":3,"names":["Dialog","withWebComponent","displayName","defaultProps","draggable","resizable","stretch","preventFocusRestore"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/@ui5/webcomponents-react/src/webComponents/Dialog/index.tsx"],"sourcesContent":["import { withWebComponent, WithWebComponentPropTypes } from '@ui5/webcomponents-react/lib/withWebComponent';\nimport '@ui5/webcomponents/dist/Dialog';\nimport { FC, ReactNode } from 'react';\n\nexport interface DialogPropTypes extends WithWebComponentPropTypes {\n  /**\n   * Determines whether the `Dialog` is draggable. If this property is set to true, the Dialog will be draggable by its header.\n   *\n   * **Note:** The `Dialog` can be draggable only in desktop mode.\n   */\n  draggable?: boolean;\n  /**\n   * Defines the header text.\n   *\n   * **Note:** If `header` slot is provided, the `headerText` is ignored.\n   */\n  headerText?: string;\n  /**\n   * Configures the `Dialog` to be resizable. If this property is set to true, the Dialog will have a resize handle in its bottom right corner in LTR languages. In RTL languages, the resize handle will be placed in the bottom left corner.\n   *\n   * **Note:** The `Dialog` can be resizable only in desktop mode.\n   * **Note:** Upon resizing, externally defined height and width styling will be ignored.\n   */\n  resizable?: boolean;\n  /**\n   * Determines whether the `Dialog` should be stretched to fullscreen.\n   *\n   * **Note:** The `Dialog` will be stretched to approximately 90% of the viewport.\n   */\n  stretch?: boolean;\n  /**\n   * Defines the ID of the HTML Element, which will get the initial focus.\n   */\n  initialFocus?: string;\n  /**\n   * Defines if the focus should be returned to the previously focused element, when the popup closes.\n   */\n  preventFocusRestore?: boolean;\n  /**\n   * Defines the content of the Popup.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the footer HTML Element.\n   */\n  footer?: ReactNode | ReactNode[];\n  /**\n   * Defines the header HTML Element.\n   */\n  header?: ReactNode | ReactNode[];\n  /**\n   * Fired after the component is closed. This event does not bubble.\n   */\n  onAfterClose?: (event: CustomEvent) => void;\n  /**\n   * Fired after the component is opened. This event does not bubble.\n   */\n  onAfterOpen?: (event: CustomEvent) => void;\n  /**\n   * Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. This event does not bubble.\n   */\n  onBeforeClose?: (event: CustomEvent<{ escPressed: boolean }>) => void;\n  /**\n   * Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. This event does not bubble.\n   */\n  onBeforeOpen?: (event: CustomEvent) => void;\n}\n\n/**\n * The `Dialog` component is used to temporarily display some information in a size-limited window in front of the regular app screen. It is used to prompt the user for an action or a confirmation. The `Dialog` interrupts the current app processing as it is the only focused UI element and the main screen is dimmed/blocked. The dialog combines concepts known from other technologies where the windows have names such as dialog box, dialog window, pop-up, pop-up window, alert box, or message box.\n *\n * The `Dialog` is modal, which means that user action is required before returning to the parent window is possible. The content of the `Dialog` is fully customizable.\n *\n * <a href=\"https://sap.github.io/ui5-webcomponents/playground/components/Dialog\" target=\"_blank\">UI5 Web Components Playground</a>\n */\nconst Dialog: FC<DialogPropTypes> = withWebComponent<DialogPropTypes>(\n  'ui5-dialog',\n  ['headerText', 'initialFocus'],\n  ['draggable', 'resizable', 'stretch', 'preventFocusRestore'],\n  ['footer', 'header'],\n  ['after-close', 'after-open', 'before-close', 'before-open']\n);\n\nDialog.displayName = 'Dialog';\n\nDialog.defaultProps = {\n  draggable: false,\n  resizable: false,\n  stretch: false,\n  preventFocusRestore: false\n};\n\nexport { Dialog };\n"],"mappings":";;;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;IACMA,MAA2B,GAAGC,gBAAgB,CAClD,YADkD,EAElD,CAAC,YAAD,EAAe,cAAf,CAFkD,EAGlD,CAAC,WAAD,EAAc,WAAd,EAA2B,SAA3B,EAAsC,qBAAtC,CAHkD,EAIlD,CAAC,QAAD,EAAW,QAAX,CAJkD,EAKlD,CAAC,aAAD,EAAgB,YAAhB,EAA8B,cAA9B,EAA8C,aAA9C,CALkD;AAQpDD,MAAM,CAACE,WAAP,GAAqB,QAArB;AAEAF,MAAM,CAACG,YAAP,GAAsB;EACpBC,SAAS,EAAE,KADS;EAEpBC,SAAS,EAAE,KAFS;EAGpBC,OAAO,EAAE,KAHW;EAIpBC,mBAAmB,EAAE;AAJD,CAAtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}