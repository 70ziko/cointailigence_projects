{"ast":null,"code":"import { fetchJsonOnce, fetchTextOnce } from \"../util/FetchHelper.js\";\nimport { DEFAULT_THEME } from \"../generated/AssetParameters.js\";\nimport getFileExtension from \"../util/getFileExtension.js\";\nimport { getEffectiveAssetPath } from \"../util/EffectiveAssetPath.js\";\nconst themeURLs = new Map();\nconst themeStyles = new Map();\nconst registeredPackages = new Set();\nconst registeredThemes = new Set();\n\n/**\n * Used to provide CSS Vars for a specific theme for a specific package.\n * The CSS Vars can be passed directly as a string (containing them), as an object with a \"_\" property(containing them in the \"_\" property), or as a URL.\n * This URL must point to a JSON file, containing a \"_\" property.\n *\n * Example usage:\n *  1) Pass the CSS Vars as a string directly.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \":root{--var1: red;}\");\n *  2) Pass the CSS Vars as an object directly\n *  registerThemeProperties(\"my-package\", \"my_theme\", {\"_\": \":root{--var1: red;}\"});\n *  3) Pass a URL to a CSS file, containing the CSS Vars. Will be fetched on demand, not upon registration.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \"http://url/to/my/theme.css\");\n *  4) Pass a URL to a JSON file, containing the CSS Vars in its \"_\" property. Will be fetched on demand, not upon registration.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \"http://url/to/my/theme.json\");\n *\n * @public\n * @param packageName - the NPM package for which CSS Vars are registered\n * @param themeName - the theme which the CSS Vars implement\n * @param style - can be one of four options: a string, an object with a \"_\" property, URL to a CSS file, or URL to a JSON file with a \"_\" property\n */\nconst registerThemeProperties = (packageName, themeName, style) => {\n  if (style._) {\n    // JSON object like ({\"_\": \":root\"})\n    themeStyles.set(`${packageName}_${themeName}`, style._);\n  } else if (style.includes(\":root\") || style === \"\") {\n    // pure string, including empty string\n    themeStyles.set(`${packageName}_${themeName}`, style);\n  } else {\n    // url for fetching\n    themeURLs.set(`${packageName}_${themeName}`, style);\n  }\n  registeredPackages.add(packageName);\n  registeredThemes.add(themeName);\n};\nconst getThemeProperties = async (packageName, themeName) => {\n  const style = themeStyles.get(`${packageName}_${themeName}`);\n  if (style !== undefined) {\n    // it's valid for style to be an empty string\n    return style;\n  }\n  if (!registeredThemes.has(themeName)) {\n    const regThemesStr = [...registeredThemes.values()].join(\", \");\n    console.warn(`You have requested a non-registered theme - falling back to ${DEFAULT_THEME}. Registered themes are: ${regThemesStr}`); /* eslint-disable-line */\n    return themeStyles.get(`${packageName}_${DEFAULT_THEME}`);\n  }\n  const data = await fetchThemeProperties(packageName, themeName);\n  const themeProps = data._ || data;\n  themeStyles.set(`${packageName}_${themeName}`, themeProps);\n  return themeProps;\n};\nconst fetchThemeProperties = async (packageName, themeName) => {\n  const url = themeURLs.get(`${packageName}_${themeName}`);\n  if (!url) {\n    throw new Error(`You have to import the ${packageName}/dist/Assets.js module to switch to additional themes`);\n  }\n  return getFileExtension(url) === \".css\" ? fetchTextOnce(url) : fetchJsonOnce(getEffectiveAssetPath(url));\n};\nconst getRegisteredPackages = () => {\n  return registeredPackages;\n};\nconst isThemeRegistered = theme => {\n  return registeredThemes.has(theme);\n};\nexport { registerThemeProperties, getThemeProperties, getRegisteredPackages, isThemeRegistered };","map":{"version":3,"names":["fetchJsonOnce","fetchTextOnce","DEFAULT_THEME","getFileExtension","getEffectiveAssetPath","themeURLs","Map","themeStyles","registeredPackages","Set","registeredThemes","registerThemeProperties","packageName","themeName","style","_","set","includes","add","getThemeProperties","get","undefined","has","regThemesStr","values","join","console","warn","data","fetchThemeProperties","themeProps","url","Error","getRegisteredPackages","isThemeRegistered","theme"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/@ui5/webcomponents-base/dist/asset-registries/Themes.js"],"sourcesContent":["import { fetchJsonOnce, fetchTextOnce } from \"../util/FetchHelper.js\";\nimport { DEFAULT_THEME } from \"../generated/AssetParameters.js\";\nimport getFileExtension from \"../util/getFileExtension.js\";\nimport { getEffectiveAssetPath } from \"../util/EffectiveAssetPath.js\";\n\nconst themeURLs = new Map();\nconst themeStyles = new Map();\nconst registeredPackages = new Set();\nconst registeredThemes = new Set();\n\n/**\n * Used to provide CSS Vars for a specific theme for a specific package.\n * The CSS Vars can be passed directly as a string (containing them), as an object with a \"_\" property(containing them in the \"_\" property), or as a URL.\n * This URL must point to a JSON file, containing a \"_\" property.\n *\n * Example usage:\n *  1) Pass the CSS Vars as a string directly.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \":root{--var1: red;}\");\n *  2) Pass the CSS Vars as an object directly\n *  registerThemeProperties(\"my-package\", \"my_theme\", {\"_\": \":root{--var1: red;}\"});\n *  3) Pass a URL to a CSS file, containing the CSS Vars. Will be fetched on demand, not upon registration.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \"http://url/to/my/theme.css\");\n *  4) Pass a URL to a JSON file, containing the CSS Vars in its \"_\" property. Will be fetched on demand, not upon registration.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \"http://url/to/my/theme.json\");\n *\n * @public\n * @param packageName - the NPM package for which CSS Vars are registered\n * @param themeName - the theme which the CSS Vars implement\n * @param style - can be one of four options: a string, an object with a \"_\" property, URL to a CSS file, or URL to a JSON file with a \"_\" property\n */\nconst registerThemeProperties = (packageName, themeName, style) => {\n\tif (style._) {\n\t\t// JSON object like ({\"_\": \":root\"})\n\t\tthemeStyles.set(`${packageName}_${themeName}`, style._);\n\t} else if (style.includes(\":root\") || style === \"\") {\n\t\t// pure string, including empty string\n\t\tthemeStyles.set(`${packageName}_${themeName}`, style);\n\t} else {\n\t\t// url for fetching\n\t\tthemeURLs.set(`${packageName}_${themeName}`, style);\n\t}\n\tregisteredPackages.add(packageName);\n\tregisteredThemes.add(themeName);\n};\n\nconst getThemeProperties = async (packageName, themeName) => {\n\tconst style = themeStyles.get(`${packageName}_${themeName}`);\n\tif (style !== undefined) { // it's valid for style to be an empty string\n\t\treturn style;\n\t}\n\n\tif (!registeredThemes.has(themeName)) {\n\t\tconst regThemesStr = [...registeredThemes.values()].join(\", \");\n\t\tconsole.warn(`You have requested a non-registered theme - falling back to ${DEFAULT_THEME}. Registered themes are: ${regThemesStr}`); /* eslint-disable-line */\n\t\treturn themeStyles.get(`${packageName}_${DEFAULT_THEME}`);\n\t}\n\n\tconst data = await fetchThemeProperties(packageName, themeName);\n\tconst themeProps = data._ || data;\n\n\tthemeStyles.set(`${packageName}_${themeName}`, themeProps);\n\treturn themeProps;\n};\n\nconst fetchThemeProperties = async (packageName, themeName) => {\n\tconst url = themeURLs.get(`${packageName}_${themeName}`);\n\n\tif (!url) {\n\t\tthrow new Error(`You have to import the ${packageName}/dist/Assets.js module to switch to additional themes`);\n\t}\n\n\treturn getFileExtension(url) === \".css\" ? fetchTextOnce(url) : fetchJsonOnce(getEffectiveAssetPath(url));\n};\n\nconst getRegisteredPackages = () => {\n\treturn registeredPackages;\n};\n\nconst isThemeRegistered = theme => {\n\treturn registeredThemes.has(theme);\n};\n\nexport {\n\tregisterThemeProperties,\n\tgetThemeProperties,\n\tgetRegisteredPackages,\n\tisThemeRegistered,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}