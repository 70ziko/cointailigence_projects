{"ast":null,"code":"import { fetchJsonOnce } from \"../util/FetchHelper.js\";\nimport { attachLanguageChange } from \"../locale/languageChange.js\";\nimport getLocale from \"../locale/getLocale.js\";\nimport { getFeature } from \"../FeaturesRegistry.js\";\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from \"../generated/AssetParameters.js\";\nimport { getEffectiveAssetPath } from \"../util/EffectiveAssetPath.js\";\nconst resources = new Map();\nconst cldrData = {};\nconst cldrUrls = {};\n\n// externally configurable mapping function for resolving (localeId -> URL)\n// default implementation - ui5 CDN\nlet cldrMappingFn = locale => `https://ui5.sap.com/1.60.2/resources/sap/ui/core/cldr/${locale}.json`;\nconst M_ISO639_OLD_TO_NEW = {\n  \"iw\": \"he\",\n  \"ji\": \"yi\",\n  \"in\": \"id\",\n  \"sh\": \"sr\"\n};\nconst calcLocale = (language, region, script) => {\n  // normalize language and handle special cases\n  language = language && M_ISO639_OLD_TO_NEW[language] || language;\n  // Special case 1: in an SAP context, the inclusive language code \"no\" always means Norwegian Bokmal (\"nb\")\n  if (language === \"no\") {\n    language = \"nb\";\n  }\n  // Special case 2: for Chinese, derive a default region from the script (this behavior is inherited from Java)\n  if (language === \"zh\" && !region) {\n    if (script === \"Hans\") {\n      region = \"CN\";\n    } else if (script === \"Hant\") {\n      region = \"TW\";\n    }\n  }\n\n  // try language + region\n  let localeId = `${language}_${region}`;\n  if (!SUPPORTED_LOCALES.includes(localeId)) {\n    // fallback to language only\n    localeId = language;\n  }\n  if (!SUPPORTED_LOCALES.includes(localeId)) {\n    // fallback to english\n    localeId = DEFAULT_LOCALE;\n  }\n  return localeId;\n};\nconst resolveMissingMappings = () => {\n  if (!cldrMappingFn) {\n    return;\n  }\n  const missingLocales = SUPPORTED_LOCALES.filter(locale => !cldrData[locale] && !cldrUrls[locale]);\n  missingLocales.forEach(locale => {\n    cldrUrls[locale] = cldrMappingFn(locale);\n  });\n};\nconst registerModuleContent = (moduleName, content) => {\n  resources.set(moduleName, content);\n};\nconst getModuleContent = moduleName => {\n  const moduleContent = resources.get(moduleName);\n  if (moduleContent) {\n    return moduleContent;\n  }\n  const missingModule = moduleName.match(/sap\\/ui\\/core\\/cldr\\/(\\w+)\\.json/);\n  if (missingModule) {\n    throw new Error(`CLDR data for locale ${missingModule[1]} is not loaded!`);\n  }\n  throw new Error(`Unknown module ${moduleName}`);\n};\nconst fetchCldr = async (language, region, script) => {\n  resolveMissingMappings();\n  const localeId = calcLocale(language, region, script);\n  let cldrObj = cldrData[localeId];\n  const url = cldrUrls[localeId];\n  const OpenUI5Support = getFeature(\"OpenUI5Support\");\n  if (!cldrObj && OpenUI5Support) {\n    cldrObj = OpenUI5Support.getLocaleDataObject();\n  }\n  if (cldrObj) {\n    // inlined from build or fetched independently\n    registerModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrObj);\n  } else if (url) {\n    // fetch it\n    const cldrContent = await fetchJsonOnce(getEffectiveAssetPath(url));\n    registerModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrContent);\n  }\n};\nconst registerCldr = (locale, url) => {\n  cldrUrls[locale] = url;\n};\nconst setCldrData = (locale, data) => {\n  cldrData[locale] = data;\n};\nconst getCldrData = locale => {\n  return cldrData[locale];\n};\nconst _registerMappingFunction = mappingFn => {\n  cldrMappingFn = mappingFn;\n};\n\n// When the language changes dynamically (the user calls setLanguage),\n// re-fetch the required CDRD data.\nattachLanguageChange(() => {\n  const locale = getLocale();\n  return fetchCldr(locale.getLanguage(), locale.getRegion(), locale.getScript());\n});\nexport { fetchCldr, registerCldr, setCldrData, getCldrData, getModuleContent, _registerMappingFunction };","map":{"version":3,"names":["fetchJsonOnce","attachLanguageChange","getLocale","getFeature","DEFAULT_LOCALE","SUPPORTED_LOCALES","getEffectiveAssetPath","resources","Map","cldrData","cldrUrls","cldrMappingFn","locale","M_ISO639_OLD_TO_NEW","calcLocale","language","region","script","localeId","includes","resolveMissingMappings","missingLocales","filter","forEach","registerModuleContent","moduleName","content","set","getModuleContent","moduleContent","get","missingModule","match","Error","fetchCldr","cldrObj","url","OpenUI5Support","getLocaleDataObject","cldrContent","registerCldr","setCldrData","data","getCldrData","_registerMappingFunction","mappingFn","getLanguage","getRegion","getScript"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/@ui5/webcomponents-base/dist/asset-registries/LocaleData.js"],"sourcesContent":["import { fetchJsonOnce } from \"../util/FetchHelper.js\";\nimport { attachLanguageChange } from \"../locale/languageChange.js\";\nimport getLocale from \"../locale/getLocale.js\";\nimport { getFeature } from \"../FeaturesRegistry.js\";\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from \"../generated/AssetParameters.js\";\nimport { getEffectiveAssetPath } from \"../util/EffectiveAssetPath.js\";\n\nconst resources = new Map();\nconst cldrData = {};\nconst cldrUrls = {};\n\n// externally configurable mapping function for resolving (localeId -> URL)\n// default implementation - ui5 CDN\nlet cldrMappingFn = locale => `https://ui5.sap.com/1.60.2/resources/sap/ui/core/cldr/${locale}.json`;\n\nconst M_ISO639_OLD_TO_NEW = {\n\t\"iw\": \"he\",\n\t\"ji\": \"yi\",\n\t\"in\": \"id\",\n\t\"sh\": \"sr\",\n};\n\nconst calcLocale = (language, region, script) => {\n\t// normalize language and handle special cases\n\tlanguage = (language && M_ISO639_OLD_TO_NEW[language]) || language;\n\t// Special case 1: in an SAP context, the inclusive language code \"no\" always means Norwegian Bokmal (\"nb\")\n\tif (language === \"no\") {\n\t\tlanguage = \"nb\";\n\t}\n\t// Special case 2: for Chinese, derive a default region from the script (this behavior is inherited from Java)\n\tif (language === \"zh\" && !region) {\n\t\tif (script === \"Hans\") {\n\t\t\tregion = \"CN\";\n\t\t} else if (script === \"Hant\") {\n\t\t\tregion = \"TW\";\n\t\t}\n\t}\n\n\t// try language + region\n\tlet localeId = `${language}_${region}`;\n\tif (!SUPPORTED_LOCALES.includes(localeId)) {\n\t\t// fallback to language only\n\t\tlocaleId = language;\n\t}\n\tif (!SUPPORTED_LOCALES.includes(localeId)) {\n\t\t// fallback to english\n\t\tlocaleId = DEFAULT_LOCALE;\n\t}\n\n\treturn localeId;\n};\n\n\nconst resolveMissingMappings = () => {\n\tif (!cldrMappingFn) {\n\t\treturn;\n\t}\n\n\tconst missingLocales = SUPPORTED_LOCALES.filter(locale => !cldrData[locale] && !cldrUrls[locale]);\n\tmissingLocales.forEach(locale => {\n\t\tcldrUrls[locale] = cldrMappingFn(locale);\n\t});\n};\n\nconst registerModuleContent = (moduleName, content) => {\n\tresources.set(moduleName, content);\n};\n\nconst getModuleContent = moduleName => {\n\tconst moduleContent = resources.get(moduleName);\n\tif (moduleContent) {\n\t\treturn moduleContent;\n\t}\n\n\tconst missingModule = moduleName.match(/sap\\/ui\\/core\\/cldr\\/(\\w+)\\.json/);\n\tif (missingModule) {\n\t\tthrow new Error(`CLDR data for locale ${missingModule[1]} is not loaded!`);\n\t}\n\n\tthrow new Error(`Unknown module ${moduleName}`);\n};\n\nconst fetchCldr = async (language, region, script) => {\n\tresolveMissingMappings();\n\tconst localeId = calcLocale(language, region, script);\n\n\tlet cldrObj = cldrData[localeId];\n\tconst url = cldrUrls[localeId];\n\n\tconst OpenUI5Support = getFeature(\"OpenUI5Support\");\n\tif (!cldrObj && OpenUI5Support) {\n\t\tcldrObj = OpenUI5Support.getLocaleDataObject();\n\t}\n\n\tif (cldrObj) {\n\t\t// inlined from build or fetched independently\n\t\tregisterModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrObj);\n\t} else if (url) {\n\t\t// fetch it\n\t\tconst cldrContent = await fetchJsonOnce(getEffectiveAssetPath(url));\n\t\tregisterModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrContent);\n\t}\n};\n\nconst registerCldr = (locale, url) => {\n\tcldrUrls[locale] = url;\n};\n\nconst setCldrData = (locale, data) => {\n\tcldrData[locale] = data;\n};\n\nconst getCldrData = locale => {\n\treturn cldrData[locale];\n};\n\nconst _registerMappingFunction = mappingFn => {\n\tcldrMappingFn = mappingFn;\n};\n\n// When the language changes dynamically (the user calls setLanguage),\n// re-fetch the required CDRD data.\nattachLanguageChange(() => {\n\tconst locale = getLocale();\n\treturn fetchCldr(locale.getLanguage(), locale.getRegion(), locale.getScript());\n});\n\nexport {\n\tfetchCldr,\n\tregisterCldr,\n\tsetCldrData,\n\tgetCldrData,\n\tgetModuleContent,\n\t_registerMappingFunction,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}