{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport { createUseStyles } from 'react-jss';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';\nimport React, { forwardRef } from 'react';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nvar TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%'\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  }\n};\nvar useStyles = createUseStyles(TextStyles, {\n  name: 'Text'\n});\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\n\nvar Text = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n    renderWhitespace = props.renderWhitespace,\n    wrapping = props.wrapping,\n    className = props.className,\n    style = props.style,\n    tooltip = props.tooltip,\n    slot = props.slot;\n  var classes = useStyles();\n  var classNameString = StyleClassHelper.of(classes.text);\n  if (wrapping === false) {\n    classNameString.put(classes.noWrap);\n  }\n  if (renderWhitespace) {\n    classNameString.put(classes.renderWhitespace);\n  }\n  if (className) {\n    classNameString.put(className);\n  }\n  var passThroughProps = usePassThroughHtmlProps(props);\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    ref: ref,\n    style: style,\n    className: classNameString.toString(),\n    title: tooltip,\n    slot: slot\n  }, passThroughProps), children);\n});\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true\n};\nText.displayName = 'Text';\nexport { Text };","map":{"version":3,"names":["TextStyles","text","fontFamily","ThemingParameters","sapFontFamily","fontSize","sapFontSize","fontWeight","color","sapTextColor","display","boxSizing","whiteSpace","wordWrap","maxWidth","renderWhitespace","noWrap","textOverflow","overflow","useStyles","createUseStyles","name","Text","forwardRef","props","ref","children","wrapping","className","style","tooltip","slot","classes","classNameString","StyleClassHelper","of","put","passThroughProps","usePassThroughHtmlProps","React","createElement","_extends","toString","title","defaultProps","displayName"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/@ui5/webcomponents-react/src/components/Text/Text.jss.ts","/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/@ui5/webcomponents-react/src/components/Text/index.tsx"],"sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\n\nexport const TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%'\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  }\n};\n","import { createUseStyles } from 'react-jss';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';\nimport React, { FC, forwardRef, ReactNode, Ref } from 'react';\nimport { CommonProps } from '../../interfaces/CommonProps';\nimport { TextStyles } from './Text.jss';\n\nexport interface TextProps extends CommonProps {\n  /**\n   * Pass the text as direct child of Text\n   */\n  children: string | JSX.Element | ReactNode;\n  /**\n   * Defines how white-space inside <code>Text</code> is handled. If set to true, sequences of white space are preserved.\n   */\n  renderWhitespace?: boolean;\n  /**\n   * Defines whether the text wraps when there is not enough space.\n   */\n  wrapping?: boolean;\n}\n\nconst useStyles = createUseStyles(TextStyles, { name: 'Text' });\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\nconst Text: FC<TextProps> = forwardRef((props: TextProps, ref: Ref<HTMLSpanElement>) => {\n  const { children, renderWhitespace, wrapping, className, style, tooltip, slot } = props;\n  const classes = useStyles();\n  const classNameString = StyleClassHelper.of(classes.text);\n  if (wrapping === false) {\n    classNameString.put(classes.noWrap);\n  }\n  if (renderWhitespace) {\n    classNameString.put(classes.renderWhitespace);\n  }\n  if (className) {\n    classNameString.put(className);\n  }\n\n  const passThroughProps = usePassThroughHtmlProps(props);\n\n  return (\n    <span\n      ref={ref}\n      style={style}\n      className={classNameString.toString()}\n      title={tooltip}\n      slot={slot}\n      {...passThroughProps}\n    >\n      {children}\n    </span>\n  );\n});\n\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true\n};\n\nText.displayName = 'Text';\n\nexport { Text };\n"],"mappings":";;;;;;AAEO,IAAMA,UAAU,GAAG;EACxB;EACAC,IAAI,EAAE;IACJC,UAAU,EAAEC,iBAAiB,CAACC,aAD1B;IAEJC,QAAQ,EAAEF,iBAAiB,CAACG,WAFxB;IAGJC,UAAU,EAAE,QAHR;IAIJC,KAAK,EAAEL,iBAAiB,CAACM,YAJrB;IAKJC,OAAO,EAAE,cALL;IAMJC,SAAS,EAAE,YANP;IAOJC,UAAU,EAAE,UAPR;IAQJC,QAAQ,EAAE,YARN;IASJC,QAAQ,EAAE;EATN,CAFkB;EAaxBC,gBAAgB,EAAE;IAChBH,UAAU,EAAE;EADI,CAbM;EAgBxBI,MAAM,EAAE;IACNC,YAAY,EAAE,UADR;IAENL,UAAU,EAAE,QAFN;IAGNC,QAAQ,EAAE,QAHJ;IAINK,QAAQ,EAAE,QAJJ;IAKN,sBAAsB;MACpBN,UAAU,EAAE;IADQ;EALhB;AAhBgB,CAAnB;ACoBP,IAAMO,SAAS,GAAGC,eAAe,CAACpB,UAAD,EAAa;EAAEqB,IAAI,EAAE;AAAR,CAAb,CAAjC;AACA;AACA;AACA;AACA;;IACMC,IAAmB,gBAAGC,UAAU,CAAC,UAACC,KAAD,EAAmBC,GAAnB,EAAiD;EAAA,IAC9EC,QAD8E,GACJF,KADI,CAC9EE,QAD8E;IACpEX,gBADoE,GACJS,KADI,CACpET,gBADoE;IAClDY,QADkD,GACJH,KADI,CAClDG,QADkD;IACxCC,SADwC,GACJJ,KADI,CACxCI,SADwC;IAC7BC,KAD6B,GACJL,KADI,CAC7BK,KAD6B;IACtBC,OADsB,GACJN,KADI,CACtBM,OADsB;IACbC,IADa,GACJP,KADI,CACbO,IADa;EAEtF,IAAMC,OAAO,GAAGb,SAAS,EAAzB;EACA,IAAMc,eAAe,GAAGC,gBAAgB,CAACC,EAAjB,CAAoBH,OAAO,CAAC/B,IAA5B,CAAxB;EACA,IAAI0B,QAAQ,KAAK,KAAjB,EAAwB;IACtBM,eAAe,CAACG,GAAhB,CAAoBJ,OAAO,CAAChB,MAA5B;EACD;EACD,IAAID,gBAAJ,EAAsB;IACpBkB,eAAe,CAACG,GAAhB,CAAoBJ,OAAO,CAACjB,gBAA5B;EACD;EACD,IAAIa,SAAJ,EAAe;IACbK,eAAe,CAACG,GAAhB,CAAoBR,SAApB;EACD;EAED,IAAMS,gBAAgB,GAAGC,uBAAuB,CAACd,KAAD,CAAhD;EAEA,oBACEe,KAAA,CAAAC,aAAA,SAAAC,QAAA;IACEhB,GAAG,EAAEA,GADP;IAEEI,KAAK,EAAEA,KAFT;IAGED,SAAS,EAAEK,eAAe,CAACS,QAAhB,EAHb;IAIEC,KAAK,EAAEb,OAJT;IAKEC,IAAI,EAAEA;EALR,GAMMM,gBANN,GAQGX,QARH,CADF;AAYD,CA5BqC;AA8BtCJ,IAAI,CAACsB,YAAL,GAAoB;EAClB7B,gBAAgB,EAAE,KADA;EAElBY,QAAQ,EAAE;AAFQ,CAApB;AAKAL,IAAI,CAACuB,WAAL,GAAmB,MAAnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}