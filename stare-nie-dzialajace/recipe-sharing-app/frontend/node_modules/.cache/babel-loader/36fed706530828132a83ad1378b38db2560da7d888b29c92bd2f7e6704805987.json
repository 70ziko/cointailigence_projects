{"ast":null,"code":"import merge from \"./thirdparty/merge.js\";\nimport boot from \"./boot.js\";\nimport UI5ElementMetadata from \"./UI5ElementMetadata.js\";\nimport EventProvider from \"./EventProvider.js\";\nimport executeTemplate from \"./renderer/executeTemplate.js\";\nimport StaticAreaItem from \"./StaticAreaItem.js\";\nimport RenderScheduler from \"./RenderScheduler.js\";\nimport { registerTag, isTagRegistered, recordTagRegistrationFailure } from \"./CustomElementsRegistry.js\";\nimport DOMObserver from \"./compatibility/DOMObserver.js\";\nimport { skipOriginalEvent } from \"./config/NoConflict.js\";\nimport { getRTL } from \"./config/RTL.js\";\nimport getConstructableStyle from \"./theming/getConstructableStyle.js\";\nimport createComponentStyleTag from \"./theming/createComponentStyleTag.js\";\nimport getEffectiveStyle from \"./theming/getEffectiveStyle.js\";\nimport Integer from \"./types/Integer.js\";\nimport Float from \"./types/Float.js\";\nimport { kebabToCamelCase, camelToKebabCase } from \"./util/StringHelper.js\";\nimport isValidPropertyName from \"./util/isValidPropertyName.js\";\nimport isSlot from \"./util/isSlot.js\";\nimport arraysAreEqual from \"./util/arraysAreEqual.js\";\nimport { markAsRtlAware } from \"./locale/RTLAwareRegistry.js\";\nlet autoId = 0;\nconst elementTimeouts = new Map();\nconst uniqueDependenciesCache = new Map();\nconst GLOBAL_CONTENT_DENSITY_CSS_VAR = \"--_ui5_content_density\";\nconst GLOBAL_DIR_CSS_VAR = \"--_ui5_dir\";\n\n/**\n * Triggers re-rendering of a UI5Element instance due to state change.\n *\n * @param  changeInfo An object with information about the change that caused invalidation.\n * @private\n */\nfunction _invalidate(changeInfo) {\n  // Invalidation should be suppressed: 1) before the component is rendered for the first time 2) and during the execution of onBeforeRendering\n  // This is necessary not only as an optimization, but also to avoid infinite loops on invalidation between children and parents (when invalidateOnChildChange is used)\n  if (this._suppressInvalidation) {\n    return;\n  }\n\n  // Call the onInvalidation hook\n  this.onInvalidation(changeInfo);\n  this._changedState.push(changeInfo);\n  RenderScheduler.renderDeferred(this);\n  this._eventProvider.fireEvent(\"change\", {\n    ...changeInfo,\n    target: this\n  });\n}\n\n/**\n * Base class for all UI5 Web Components\n *\n * @class\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.base.UI5Element\n * @extends HTMLElement\n * @public\n */\nclass UI5Element extends HTMLElement {\n  constructor() {\n    super();\n    this._changedState = []; // Filled on each invalidation, cleared on re-render (used for debugging)\n    this._suppressInvalidation = true; // A flag telling whether all invalidations should be ignored. Initialized with \"true\" because a UI5Element can not be invalidated until it is rendered for the first time\n    this._inDOM = false; // A flag telling whether the UI5Element is currently in the DOM tree of the document or not\n    this._fullyConnected = false; // A flag telling whether the UI5Element's onEnterDOM hook was called (since it's possible to have the element removed from DOM before that)\n    this._childChangeListeners = new Map(); // used to store lazy listeners per slot for the child change event of every child inside that slot\n    this._slotChangeListeners = new Map(); // used to store lazy listeners per slot for the slotchange event of all slot children inside that slot\n    this._eventProvider = new EventProvider(); // used by parent components for listening to changes to child components\n    let deferredResolve;\n    this._domRefReadyPromise = new Promise(resolve => {\n      deferredResolve = resolve;\n    });\n    this._domRefReadyPromise._deferredResolve = deferredResolve;\n    this._initializeState();\n    this._upgradeAllProperties();\n    this._initializeContainers();\n  }\n\n  /**\n   * Returns a unique ID for this UI5 Element\n   *\n   * @deprecated - This property is not guaranteed in future releases\n   * @protected\n   */\n  get _id() {\n    if (!this.__id) {\n      this.__id = `ui5wc_${++autoId}`;\n    }\n    return this.__id;\n  }\n\n  /**\n   * @private\n   */\n  _initializeContainers() {\n    const needsShadowDOM = this.constructor._needsShadowDOM();\n    const needsStaticArea = this.constructor._needsStaticArea();\n\n    // Init Shadow Root\n    if (needsShadowDOM) {\n      this.attachShadow({\n        mode: \"open\"\n      });\n    }\n\n    // Init StaticAreaItem only if needed\n    if (needsStaticArea) {\n      this.staticAreaItem = new StaticAreaItem(this);\n    }\n  }\n\n  /**\n   * Do not call this method from derivatives of UI5Element, use \"onEnterDOM\" only\n   * @private\n   */\n  async connectedCallback() {\n    this.setAttribute(this.constructor.getMetadata().getPureTag(), \"\");\n    const needsShadowDOM = this.constructor._needsShadowDOM();\n    const slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n    this._inDOM = true;\n    if (slotsAreManaged) {\n      // always register the observer before yielding control to the main thread (await)\n      this._startObservingDOMChildren();\n      await this._processChildren();\n    }\n    if (needsShadowDOM && !this.shadowRoot) {\n      // Workaround for Firefox74 bug\n      await Promise.resolve();\n    }\n    if (!this._inDOM) {\n      // Component removed from DOM while _processChildren was running\n      return;\n    }\n    RenderScheduler.register(this);\n    RenderScheduler.renderImmediately(this);\n    this._domRefReadyPromise._deferredResolve();\n    this._fullyConnected = true;\n    if (typeof this.onEnterDOM === \"function\") {\n      this.onEnterDOM();\n    }\n  }\n\n  /**\n   * Do not call this method from derivatives of UI5Element, use \"onExitDOM\" only\n   * @private\n   */\n  disconnectedCallback() {\n    const needsShadowDOM = this.constructor._needsShadowDOM();\n    const needsStaticArea = this.constructor._needsStaticArea();\n    const slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n    this._inDOM = false;\n    if (slotsAreManaged) {\n      this._stopObservingDOMChildren();\n    }\n    if (needsShadowDOM) {\n      RenderScheduler.deregister(this);\n      if (this._fullyConnected) {\n        if (typeof this.onExitDOM === \"function\") {\n          this.onExitDOM();\n        }\n        this._fullyConnected = false;\n      }\n    }\n    if (needsStaticArea) {\n      this.staticAreaItem._removeFragmentFromStaticArea();\n    }\n    RenderScheduler.cancelRender(this);\n  }\n\n  /**\n   * @private\n   */\n  _startObservingDOMChildren() {\n    const shouldObserveChildren = this.constructor.getMetadata().hasSlots();\n    if (!shouldObserveChildren) {\n      return;\n    }\n    const canSlotText = this.constructor.getMetadata().canSlotText();\n    const mutationObserverOptions = {\n      childList: true,\n      subtree: canSlotText,\n      characterData: canSlotText\n    };\n    DOMObserver.observeDOMNode(this, this._processChildren.bind(this), mutationObserverOptions);\n  }\n\n  /**\n   * @private\n   */\n  _stopObservingDOMChildren() {\n    DOMObserver.unobserveDOMNode(this);\n  }\n\n  /**\n   * Note: this method is also manually called by \"compatibility/patchNodeValue.js\"\n   * @private\n   */\n  async _processChildren() {\n    const hasSlots = this.constructor.getMetadata().hasSlots();\n    if (hasSlots) {\n      await this._updateSlots();\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _updateSlots() {\n    const slotsMap = this.constructor.getMetadata().getSlots();\n    const canSlotText = this.constructor.getMetadata().canSlotText();\n    const domChildren = Array.from(canSlotText ? this.childNodes : this.children);\n    const slotsCachedContentMap = new Map(); // Store here the content of each slot before the mutation occurred\n    const propertyNameToSlotMap = new Map(); // Used for reverse lookup to determine to which slot the property name corresponds\n\n    // Init the _state object based on the supported slots and store the previous values\n    for (const [slotName, slotData] of Object.entries(slotsMap)) {\n      // eslint-disable-line\n      const propertyName = slotData.propertyName || slotName;\n      propertyNameToSlotMap.set(propertyName, slotName);\n      slotsCachedContentMap.set(propertyName, [...this._state[propertyName]]);\n      this._clearSlot(slotName, slotData);\n    }\n    const autoIncrementMap = new Map();\n    const slottedChildrenMap = new Map();\n    const allChildrenUpgraded = domChildren.map(async (child, idx) => {\n      // Determine the type of the child (mainly by the slot attribute)\n      const slotName = this.constructor._getSlotName(child);\n      const slotData = slotsMap[slotName];\n\n      // Check if the slotName is supported\n      if (slotData === undefined) {\n        const validValues = Object.keys(slotsMap).join(\", \");\n        console.warn(`Unknown slotName: ${slotName}, ignoring`, child, `Valid values are: ${validValues}`); // eslint-disable-line\n        return;\n      }\n\n      // For children that need individual slots, calculate them\n      if (slotData.individualSlots) {\n        const nextIndex = (autoIncrementMap.get(slotName) || 0) + 1;\n        autoIncrementMap.set(slotName, nextIndex);\n        child._individualSlot = `${slotName}-${nextIndex}`;\n      }\n\n      // Await for not-yet-defined custom elements\n      if (child instanceof HTMLElement) {\n        const localName = child.localName;\n        const isCustomElement = localName.includes(\"-\");\n        if (isCustomElement) {\n          const isDefined = window.customElements.get(localName);\n          if (!isDefined) {\n            const whenDefinedPromise = window.customElements.whenDefined(localName); // Class registered, but instances not upgraded yet\n            let timeoutPromise = elementTimeouts.get(localName);\n            if (!timeoutPromise) {\n              timeoutPromise = new Promise(resolve => setTimeout(resolve, 1000));\n              elementTimeouts.set(localName, timeoutPromise);\n            }\n            await Promise.race([whenDefinedPromise, timeoutPromise]);\n          }\n          window.customElements.upgrade(child);\n        }\n      }\n      child = this.constructor.getMetadata().constructor.validateSlotValue(child, slotData);\n\n      // Listen for any invalidation on the child if invalidateOnChildChange is true or an object (ignore when false or not set)\n      if (child.isUI5Element && slotData.invalidateOnChildChange) {\n        child._attachChange(this._getChildChangeListener(slotName));\n      }\n\n      // Listen for the slotchange event if the child is a slot itself\n      if (isSlot(child)) {\n        this._attachSlotChange(child, slotName);\n      }\n      const propertyName = slotData.propertyName || slotName;\n      if (slottedChildrenMap.has(propertyName)) {\n        slottedChildrenMap.get(propertyName).push({\n          child,\n          idx\n        });\n      } else {\n        slottedChildrenMap.set(propertyName, [{\n          child,\n          idx\n        }]);\n      }\n    });\n    await Promise.all(allChildrenUpgraded);\n\n    // Distribute the child in the _state object, keeping the Light DOM order,\n    // not the order elements are defined.\n    slottedChildrenMap.forEach((children, propertyName) => {\n      this._state[propertyName] = children.sort((a, b) => a.idx - b.idx).map(_ => _.child);\n    });\n\n    // Compare the content of each slot with the cached values and invalidate for the ones that changed\n    let invalidated = false;\n    for (const [slotName, slotData] of Object.entries(slotsMap)) {\n      // eslint-disable-line\n      const propertyName = slotData.propertyName || slotName;\n      if (!arraysAreEqual(slotsCachedContentMap.get(propertyName), this._state[propertyName])) {\n        _invalidate.call(this, {\n          type: \"slot\",\n          name: propertyNameToSlotMap.get(propertyName),\n          reason: \"children\"\n        });\n        invalidated = true;\n      }\n    }\n\n    // If none of the slots had an invalidation due to changes to immediate children,\n    // the change is considered to be text content of the default slot\n    if (!invalidated) {\n      _invalidate.call(this, {\n        type: \"slot\",\n        name: \"default\",\n        reason: \"textcontent\"\n      });\n    }\n  }\n\n  /**\n   * Removes all children from the slot and detaches listeners, if any\n   * @private\n   */\n  _clearSlot(slotName, slotData) {\n    const propertyName = slotData.propertyName || slotName;\n    const children = this._state[propertyName];\n    children.forEach(child => {\n      if (child && child.isUI5Element) {\n        child._detachChange(this._getChildChangeListener(slotName));\n      }\n      if (isSlot(child)) {\n        this._detachSlotChange(child, slotName);\n      }\n    });\n    this._state[propertyName] = [];\n  }\n\n  /**\n   * Attach a callback that will be executed whenever the component is invalidated\n   *\n   * @param callback\n   * @protected\n   */\n  _attachChange(callback) {\n    this._eventProvider.attachEvent(\"change\", callback);\n  }\n\n  /**\n   * Detach the callback that is executed whenever the component is invalidated\n   *\n   * @param callback\n   * @protected\n   */\n  _detachChange(callback) {\n    this._eventProvider.detachEvent(\"change\", callback);\n  }\n\n  /**\n   * Callback that is executed whenever a monitored child changes its state\n   *\n   * @param slotName the slot in which a child was invalidated\n   * @param childChangeInfo the changeInfo object for the child in the given slot\n   * @private\n   */\n  _onChildChange(slotName, childChangeInfo) {\n    if (!this.constructor.getMetadata().shouldInvalidateOnChildChange(slotName, childChangeInfo.type, childChangeInfo.name)) {\n      return;\n    }\n\n    // The component should be invalidated as this type of change on the child is listened for\n    // However, no matter what changed on the child (property/slot), the invalidation is registered as \"type=slot\" for the component itself\n    _invalidate.call(this, {\n      type: \"slot\",\n      name: slotName,\n      reason: \"childchange\",\n      child: childChangeInfo.target\n    });\n  }\n\n  /**\n   * Do not override this method in derivatives of UI5Element\n   * @private\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    const properties = this.constructor.getMetadata().getProperties();\n    const realName = name.replace(/^ui5-/, \"\");\n    const nameInCamelCase = kebabToCamelCase(realName);\n    if (properties.hasOwnProperty(nameInCamelCase)) {\n      // eslint-disable-line\n      const propertyTypeClass = properties[nameInCamelCase].type;\n      if (propertyTypeClass === Boolean) {\n        newValue = newValue !== null;\n      }\n      if (propertyTypeClass === Integer) {\n        newValue = parseInt(newValue);\n      }\n      if (propertyTypeClass === Float) {\n        newValue = parseFloat(newValue);\n      }\n      this[nameInCamelCase] = newValue;\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateAttribute(name, newValue) {\n    if (!this.constructor.getMetadata().hasAttribute(name)) {\n      return;\n    }\n    if (typeof newValue === \"object\") {\n      return;\n    }\n    const attrName = camelToKebabCase(name);\n    const attrValue = this.getAttribute(attrName);\n    if (typeof newValue === \"boolean\") {\n      if (newValue === true && attrValue === null) {\n        this.setAttribute(attrName, \"\");\n      } else if (newValue === false && attrValue !== null) {\n        this.removeAttribute(attrName);\n      }\n    } else if (attrValue !== newValue) {\n      this.setAttribute(attrName, newValue);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _upgradeProperty(prop) {\n    if (this.hasOwnProperty(prop)) {\n      // eslint-disable-line\n      const value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n\n  /**\n   * @private\n   */\n  _upgradeAllProperties() {\n    const allProps = this.constructor.getMetadata().getPropertiesList();\n    allProps.forEach(this._upgradeProperty, this);\n  }\n\n  /**\n   * @private\n   */\n  _initializeState() {\n    const defaultState = this.constructor._getDefaultState();\n    this._state = Object.assign({}, defaultState);\n  }\n\n  /**\n   * Returns a singleton event listener for the \"change\" event of a child in a given slot\n   *\n   * @param slotName the name of the slot, where the child is\n   * @returns {any}\n   * @private\n   */\n  _getChildChangeListener(slotName) {\n    if (!this._childChangeListeners.has(slotName)) {\n      this._childChangeListeners.set(slotName, this._onChildChange.bind(this, slotName));\n    }\n    return this._childChangeListeners.get(slotName);\n  }\n\n  /**\n   * Returns a singleton slotchange event listener that invalidates the component due to changes in the given slot\n   *\n   * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n   * @returns {any}\n   * @private\n   */\n  _getSlotChangeListener(slotName) {\n    if (!this._slotChangeListeners.has(slotName)) {\n      this._slotChangeListeners.set(slotName, this._onSlotChange.bind(this, slotName));\n    }\n    return this._slotChangeListeners.get(slotName);\n  }\n\n  /**\n   * @private\n   */\n  _attachSlotChange(child, slotName) {\n    child.addEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n  }\n\n  /**\n   * @private\n   */\n  _detachSlotChange(child, slotName) {\n    child.removeEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n  }\n\n  /**\n   * Whenever a slot element is slotted inside a UI5 Web Component, its slotchange event invalidates the component\n   *\n   * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n   * @private\n   */\n  _onSlotChange(slotName) {\n    _invalidate.call(this, {\n      type: \"slot\",\n      name: slotName,\n      reason: \"slotchange\"\n    });\n  }\n\n  /**\n   * A callback that is executed each time an already rendered component is invalidated (scheduled for re-rendering)\n   *\n   * @param  changeInfo An object with information about the change that caused invalidation.\n   * The object can have the following properties:\n   *  - type: (property|slot) tells what caused the invalidation\n   *   1) property: a property value was changed either directly or as a result of changing the corresponding attribute\n   *   2) slot: a slotted node(nodes) changed in one of several ways (see \"reason\")\n   *\n   *  - name: the name of the property or slot that caused the invalidation\n   *\n   *  - reason: (children|textcontent|childchange|slotchange) relevant only for type=\"slot\" only and tells exactly what changed in the slot\n   *   1) children: immediate children (HTML elements or text nodes) were added, removed or reordered in the slot\n   *   2) textcontent: text nodes in the slot changed value (or nested text nodes were added or changed value). Can only trigger for slots of \"type: Node\"\n   *   3) slotchange: a slot element, slotted inside that slot had its \"slotchange\" event listener called. This practically means that transitively slotted children changed.\n   *      Can only trigger if the child of a slot is a slot element itself.\n   *   4) childchange: indicates that a UI5Element child in that slot was invalidated and in turn invalidated the component.\n   *      Can only trigger for slots with \"invalidateOnChildChange\" metadata descriptor\n   *\n   *  - newValue: the new value of the property (for type=\"property\" only)\n   *\n   *  - oldValue: the old value of the property (for type=\"property\" only)\n   *\n   *  - child the child that was changed (for type=\"slot\" and reason=\"childchange\" only)\n   *\n   * @public\n   */\n  onInvalidation(changeInfo) {}\n\n  /**\n   * Do not call this method directly, only intended to be called by RenderScheduler.js\n   * @protected\n   */\n  _render() {\n    const hasIndividualSlots = this.constructor.getMetadata().hasIndividualSlots();\n\n    // suppress invalidation to prevent state changes scheduling another rendering\n    this._suppressInvalidation = true;\n    if (typeof this.onBeforeRendering === \"function\") {\n      this.onBeforeRendering();\n    }\n\n    // Intended for framework usage only. Currently ItemNavigation updates tab indexes after the component has updated its state but before the template is rendered\n    if (this._onComponentStateFinalized) {\n      this._onComponentStateFinalized();\n    }\n\n    // resume normal invalidation handling\n    this._suppressInvalidation = false;\n\n    // Update the shadow root with the render result\n    /*\n    if (this._changedState.length) {\n    \tlet element = this.localName;\n    \tif (this.id) {\n    \t\telement = `${element}#${this.id}`;\n    \t}\n    \tconsole.log(\"Re-rendering:\", element, this._changedState.map(x => { // eslint-disable-line\n    \t\tlet res = `${x.type}`;\n    \t\tif (x.reason) {\n    \t\t\tres = `${res}(${x.reason})`;\n    \t\t}\n    \t\tres = `${res}: ${x.name}`;\n    \t\tif (x.type === \"property\") {\n    \t\t\tres = `${res} ${x.oldValue} => ${x.newValue}`;\n    \t\t}\n    \t\t\treturn res;\n    \t}));\n    }\n    */\n    this._changedState = [];\n\n    // Update shadow root and static area item\n    this._updateShadowRoot();\n    if (this._shouldUpdateFragment()) {\n      this.staticAreaItem._updateFragment(this);\n      this.staticAreaItemDomRef = this.staticAreaItem.staticAreaItemDomRef.shadowRoot;\n    }\n\n    // Safari requires that children get the slot attribute only after the slot tags have been rendered in the shadow DOM\n    if (hasIndividualSlots) {\n      this._assignIndividualSlotsToChildren();\n    }\n\n    // Call the onAfterRendering hook\n    if (typeof this.onAfterRendering === \"function\") {\n      this.onAfterRendering();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateShadowRoot() {\n    if (!this.constructor._needsShadowDOM()) {\n      return;\n    }\n    let styleToPrepend;\n    const renderResult = executeTemplate(this.constructor.template, this);\n\n    // IE11, Edge\n    if (window.ShadyDOM) {\n      createComponentStyleTag(this.constructor);\n    }\n\n    // Chrome\n    if (document.adoptedStyleSheets) {\n      this.shadowRoot.adoptedStyleSheets = getConstructableStyle(this.constructor);\n    }\n\n    // FF, Safari\n    if (!document.adoptedStyleSheets && !window.ShadyDOM) {\n      styleToPrepend = getEffectiveStyle(this.constructor);\n    }\n    this.constructor.render(renderResult, this.shadowRoot, styleToPrepend, {\n      eventContext: this\n    });\n  }\n\n  /**\n   * @private\n   */\n  _assignIndividualSlotsToChildren() {\n    const domChildren = Array.from(this.children);\n    domChildren.forEach(child => {\n      if (child._individualSlot) {\n        child.setAttribute(\"slot\", child._individualSlot);\n      }\n    });\n  }\n\n  /**\n   * @private\n   */\n  _waitForDomRef() {\n    return this._domRefReadyPromise;\n  }\n\n  /**\n   * Returns the DOM Element inside the Shadow Root that corresponds to the opening tag in the UI5 Web Component's template\n   * Use this method instead of \"this.shadowRoot\" to read the Shadow DOM, if ever necessary\n   * @public\n   */\n  getDomRef() {\n    if (!this.shadowRoot || this.shadowRoot.children.length === 0) {\n      return;\n    }\n    return this.shadowRoot.children.length === 1 ? this.shadowRoot.children[0] : this.shadowRoot.children[1];\n  }\n\n  /**\n   * Returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n   * This is the element that will receive the focus by default.\n   * @public\n   */\n  getFocusDomRef() {\n    const domRef = this.getDomRef();\n    if (domRef) {\n      const focusRef = domRef.querySelector(\"[data-sap-focus-ref]\");\n      return focusRef || domRef;\n    }\n  }\n\n  /**\n   * Waits for dom ref and then returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n   * This is the element that will receive the focus by default.\n   * @public\n   */\n  async getFocusDomRefAsync() {\n    await this._waitForDomRef();\n    return this.getFocusDomRef();\n  }\n\n  /**\n   * Use this method in order to get a reference to an element in the shadow root of the web component or the static area item of the component\n   * @public\n   * @method\n   * @param {String} refName Defines the name of the stable DOM ref\n   */\n  getStableDomRef(refName) {\n    const staticAreaResult = this.staticAreaItemDomRef && this.staticAreaItemDomRef.querySelector(`[data-ui5-stable=${refName}]`);\n    return staticAreaResult || this.getDomRef().querySelector(`[data-ui5-stable=${refName}]`);\n  }\n\n  /**\n   * Set the focus to the element, returned by \"getFocusDomRef()\" (marked by \"data-sap-focus-ref\")\n   * @public\n   */\n  async focus() {\n    await this._waitForDomRef();\n    const focusDomRef = this.getFocusDomRef();\n    if (focusDomRef && typeof focusDomRef.focus === \"function\") {\n      focusDomRef.focus();\n    }\n  }\n\n  /**\n   *\n   * @public\n   * @param name - name of the event\n   * @param data - additional data for the event\n   * @param cancelable - true, if the user can call preventDefault on the event object\n   * @param bubbles - true, if the event bubbles\n   * @returns {boolean} false, if the event was cancelled (preventDefault called), true otherwise\n   */\n  fireEvent(name, data, cancelable = false, bubbles = true) {\n    const eventResult = this._fireEvent(name, data, cancelable, bubbles);\n    const camelCaseEventName = kebabToCamelCase(name);\n    if (camelCaseEventName !== name) {\n      return eventResult && this._fireEvent(camelCaseEventName, data, cancelable);\n    }\n    return eventResult;\n  }\n  _fireEvent(name, data, cancelable = false, bubbles = true) {\n    let compatEventResult = true; // Initialized to true, because if the event is not fired at all, it should be considered \"not-prevented\"\n\n    const noConflictEvent = new CustomEvent(`ui5-${name}`, {\n      detail: data,\n      composed: false,\n      bubbles,\n      cancelable\n    });\n\n    // This will be false if the compat event is prevented\n    compatEventResult = this.dispatchEvent(noConflictEvent);\n    if (skipOriginalEvent(name)) {\n      return compatEventResult;\n    }\n    const customEvent = new CustomEvent(name, {\n      detail: data,\n      composed: false,\n      bubbles,\n      cancelable\n    });\n\n    // This will be false if the normal event is prevented\n    const normalEventResult = this.dispatchEvent(customEvent);\n\n    // Return false if any of the two events was prevented (its result was false).\n    return normalEventResult && compatEventResult;\n  }\n\n  /**\n   * Returns the actual children, associated with a slot.\n   * Useful when there are transitive slots in nested component scenarios and you don't want to get a list of the slots, but rather of their content.\n   * @public\n   */\n  getSlottedNodes(slotName) {\n    const reducer = (acc, curr) => {\n      if (!isSlot(curr)) {\n        return acc.concat([curr]);\n      }\n      return acc.concat(curr.assignedNodes({\n        flatten: true\n      }).filter(item => item instanceof HTMLElement));\n    };\n    return this[slotName].reduce(reducer, []);\n  }\n  get isCompact() {\n    return getComputedStyle(this).getPropertyValue(GLOBAL_CONTENT_DENSITY_CSS_VAR) === \"compact\";\n  }\n\n  /**\n   * Determines whether the component should be rendered in RTL mode or not.\n   * Returns: \"rtl\", \"ltr\" or undefined\n   *\n   * @public\n   * @returns {String|undefined}\n   */\n  get effectiveDir() {\n    markAsRtlAware(this.constructor); // if a UI5 Element calls this method, it's considered to be rtl-aware\n\n    const doc = window.document;\n    const dirValues = [\"ltr\", \"rtl\"]; // exclude \"auto\" and \"\" from all calculations\n    const locallyAppliedDir = getComputedStyle(this).getPropertyValue(GLOBAL_DIR_CSS_VAR);\n\n    // In that order, inspect the CSS Var (for modern browsers), the element itself, html and body (for IE fallback)\n    if (dirValues.includes(locallyAppliedDir)) {\n      return locallyAppliedDir;\n    }\n    if (dirValues.includes(this.dir)) {\n      return this.dir;\n    }\n    if (dirValues.includes(doc.documentElement.dir)) {\n      return doc.documentElement.dir;\n    }\n    if (dirValues.includes(doc.body.dir)) {\n      return doc.body.dir;\n    }\n\n    // Finally, check the configuration for explicitly set RTL or language-implied RTL\n    return getRTL() ? \"rtl\" : undefined;\n  }\n  updateStaticAreaItemContentDensity() {\n    if (this.staticAreaItem) {\n      this.staticAreaItem._updateContentDensity(this.isCompact);\n    }\n  }\n\n  /**\n   * Used to duck-type UI5 elements without using instanceof\n   * @returns {boolean}\n   * @public\n   */\n  get isUI5Element() {\n    return true;\n  }\n\n  /**\n   * Do not override this method in derivatives of UI5Element, use metadata properties instead\n   * @private\n   */\n  static get observedAttributes() {\n    return this.getMetadata().getAttributesList();\n  }\n\n  /**\n   * @private\n   */\n  static _getSlotName(child) {\n    // Text nodes can only go to the default slot\n    if (!(child instanceof HTMLElement)) {\n      return \"default\";\n    }\n\n    // Discover the slot based on the real slot name (f.e. footer => footer, or content-32 => content)\n    const slot = child.getAttribute(\"slot\");\n    if (slot) {\n      const match = slot.match(/^(.+?)-\\d+$/);\n      return match ? match[1] : slot;\n    }\n\n    // Use default slot as a fallback\n    return \"default\";\n  }\n\n  /**\n   * @private\n   */\n  static _needsShadowDOM() {\n    return !!this.template;\n  }\n  _shouldUpdateFragment() {\n    return this.constructor._needsStaticArea() && this.staticAreaItem.isRendered();\n  }\n\n  /**\n   * @private\n   */\n  static _needsStaticArea() {\n    return typeof this.staticAreaTemplate === \"function\";\n  }\n\n  /**\n   * @public\n   */\n  getStaticAreaItemDomRef() {\n    return this.staticAreaItem.getDomRef();\n  }\n\n  /**\n   * @private\n   */\n  static _getDefaultState() {\n    if (Object.prototype.hasOwnProperty.call(this, \"_defaultState\")) {\n      return this._defaultState;\n    }\n    const MetadataClass = this.getMetadata();\n    const defaultState = {};\n    const slotsAreManaged = MetadataClass.slotsAreManaged();\n\n    // Initialize properties\n    const props = MetadataClass.getProperties();\n    for (const propName in props) {\n      // eslint-disable-line\n      const propType = props[propName].type;\n      const propDefaultValue = props[propName].defaultValue;\n      if (propType === Boolean) {\n        defaultState[propName] = false;\n        if (propDefaultValue !== undefined) {\n          console.warn(\"The 'defaultValue' metadata key is ignored for all booleans properties, they would be initialized with 'false' by default\"); // eslint-disable-line\n        }\n      } else if (props[propName].multiple) {\n        defaultState[propName] = [];\n      } else if (propType === Object) {\n        defaultState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : {};\n      } else if (propType === String) {\n        defaultState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : \"\";\n      } else {\n        defaultState[propName] = propDefaultValue;\n      }\n    }\n\n    // Initialize slots\n    if (slotsAreManaged) {\n      const slots = MetadataClass.getSlots();\n      for (const [slotName, slotData] of Object.entries(slots)) {\n        // eslint-disable-line\n        const propertyName = slotData.propertyName || slotName;\n        defaultState[propertyName] = [];\n      }\n    }\n    this._defaultState = defaultState;\n    return defaultState;\n  }\n\n  /**\n   * @private\n   */\n  static _generateAccessors() {\n    const proto = this.prototype;\n    const slotsAreManaged = this.getMetadata().slotsAreManaged();\n\n    // Properties\n    const properties = this.getMetadata().getProperties();\n    for (const [prop, propData] of Object.entries(properties)) {\n      // eslint-disable-line\n      if (!isValidPropertyName(prop)) {\n        console.warn(`\"${prop}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n      }\n\n      if (propData.type === Boolean && propData.defaultValue) {\n        throw new Error(`Cannot set a default value for property \"${prop}\". All booleans are false by default.`);\n      }\n      if (propData.type === Array) {\n        throw new Error(`Wrong type for property \"${prop}\". Properties cannot be of type Array - use \"multiple: true\" and set \"type\" to the single value type, such as \"String\", \"Object\", etc...`);\n      }\n      if (propData.type === Object && propData.defaultValue) {\n        throw new Error(`Cannot set a default value for property \"${prop}\". All properties of type \"Object\" are empty objects by default.`);\n      }\n      if (propData.multiple && propData.defaultValue) {\n        throw new Error(`Cannot set a default value for property \"${prop}\". All multiple properties are empty arrays by default.`);\n      }\n      Object.defineProperty(proto, prop, {\n        get() {\n          if (this._state[prop] !== undefined) {\n            return this._state[prop];\n          }\n          const propDefaultValue = propData.defaultValue;\n          if (propData.type === Boolean) {\n            return false;\n          } else if (propData.type === String) {\n            // eslint-disable-line\n            return propDefaultValue;\n          } else if (propData.multiple) {\n            // eslint-disable-line\n            return [];\n          } else {\n            return propDefaultValue;\n          }\n        },\n        set(value) {\n          value = this.constructor.getMetadata().constructor.validatePropertyValue(value, propData);\n          const oldState = this._state[prop];\n          if (oldState !== value) {\n            this._state[prop] = value;\n            _invalidate.call(this, {\n              type: \"property\",\n              name: prop,\n              newValue: value,\n              oldValue: oldState\n            });\n            this._updateAttribute(prop, value);\n          }\n        }\n      });\n    }\n\n    // Slots\n    if (slotsAreManaged) {\n      const slots = this.getMetadata().getSlots();\n      for (const [slotName, slotData] of Object.entries(slots)) {\n        // eslint-disable-line\n        if (!isValidPropertyName(slotName)) {\n          console.warn(`\"${slotName}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n        }\n\n        const propertyName = slotData.propertyName || slotName;\n        Object.defineProperty(proto, propertyName, {\n          get() {\n            if (this._state[propertyName] !== undefined) {\n              return this._state[propertyName];\n            }\n            return [];\n          },\n          set() {\n            throw new Error(\"Cannot set slot content directly, use the DOM APIs (appendChild, removeChild, etc...)\");\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns the metadata object for this UI5 Web Component Class\n   * @protected\n   */\n  static get metadata() {\n    return {};\n  }\n\n  /**\n   * Returns the CSS for this UI5 Web Component Class\n   * @protected\n   */\n  static get styles() {\n    return \"\";\n  }\n\n  /**\n   * Returns the Static Area CSS for this UI5 Web Component Class\n   * @protected\n   */\n  static get staticAreaStyles() {\n    return \"\";\n  }\n\n  /**\n   * Returns an array with the dependencies for this UI5 Web Component, which could be:\n   *  - composed components (used in its shadow root or static area item)\n   *  - slotted components that the component may need to communicate with\n   *\n   * @protected\n   */\n  static get dependencies() {\n    return [];\n  }\n\n  /**\n   * Returns a list of the unique dependencies for this UI5 Web Component\n   *\n   * @public\n   */\n  static getUniqueDependencies() {\n    if (!uniqueDependenciesCache.has(this)) {\n      const filtered = this.dependencies.filter((dep, index, deps) => deps.indexOf(dep) === index);\n      uniqueDependenciesCache.set(this, filtered);\n    }\n    return uniqueDependenciesCache.get(this);\n  }\n\n  /**\n   * Returns a promise that resolves whenever all dependencies for this UI5 Web Component have resolved\n   *\n   * @returns {Promise<any[]>}\n   */\n  static whenDependenciesDefined() {\n    return Promise.all(this.getUniqueDependencies().map(dep => dep.define()));\n  }\n\n  /**\n   * Hook that will be called upon custom element definition\n   *\n   * @protected\n   * @returns {Promise<void>}\n   */\n  static async onDefine() {\n    return Promise.resolve();\n  }\n\n  /**\n   * Registers a UI5 Web Component in the browser window object\n   * @public\n   * @returns {Promise<UI5Element>}\n   */\n  static async define() {\n    await boot();\n    await Promise.all([this.whenDependenciesDefined(), this.onDefine()]);\n    const tag = this.getMetadata().getTag();\n    const altTag = this.getMetadata().getAltTag();\n    const definedLocally = isTagRegistered(tag);\n    const definedGlobally = customElements.get(tag);\n    if (definedGlobally && !definedLocally) {\n      recordTagRegistrationFailure(tag);\n    } else if (!definedGlobally) {\n      this._generateAccessors();\n      registerTag(tag);\n      window.customElements.define(tag, this);\n      if (altTag && !customElements.get(altTag)) {\n        class oldClassName extends this {}\n        registerTag(altTag);\n        window.customElements.define(altTag, oldClassName);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Returns an instance of UI5ElementMetadata.js representing this UI5 Web Component's full metadata (its and its parents')\n   * Note: not to be confused with the \"get metadata()\" method, which returns an object for this class's metadata only\n   * @public\n   * @returns {UI5ElementMetadata}\n   */\n  static getMetadata() {\n    if (this.hasOwnProperty(\"_metadata\")) {\n      // eslint-disable-line\n      return this._metadata;\n    }\n    const metadataObjects = [this.metadata];\n    let klass = this; // eslint-disable-line\n    while (klass !== UI5Element) {\n      klass = Object.getPrototypeOf(klass);\n      metadataObjects.unshift(klass.metadata);\n    }\n    const mergedMetadata = merge({}, ...metadataObjects);\n    this._metadata = new UI5ElementMetadata(mergedMetadata);\n    return this._metadata;\n  }\n}\nexport default UI5Element;","map":{"version":3,"names":["merge","boot","UI5ElementMetadata","EventProvider","executeTemplate","StaticAreaItem","RenderScheduler","registerTag","isTagRegistered","recordTagRegistrationFailure","DOMObserver","skipOriginalEvent","getRTL","getConstructableStyle","createComponentStyleTag","getEffectiveStyle","Integer","Float","kebabToCamelCase","camelToKebabCase","isValidPropertyName","isSlot","arraysAreEqual","markAsRtlAware","autoId","elementTimeouts","Map","uniqueDependenciesCache","GLOBAL_CONTENT_DENSITY_CSS_VAR","GLOBAL_DIR_CSS_VAR","_invalidate","changeInfo","_suppressInvalidation","onInvalidation","_changedState","push","renderDeferred","_eventProvider","fireEvent","target","UI5Element","HTMLElement","constructor","_inDOM","_fullyConnected","_childChangeListeners","_slotChangeListeners","deferredResolve","_domRefReadyPromise","Promise","resolve","_deferredResolve","_initializeState","_upgradeAllProperties","_initializeContainers","_id","__id","needsShadowDOM","_needsShadowDOM","needsStaticArea","_needsStaticArea","attachShadow","mode","staticAreaItem","connectedCallback","setAttribute","getMetadata","getPureTag","slotsAreManaged","_startObservingDOMChildren","_processChildren","shadowRoot","register","renderImmediately","onEnterDOM","disconnectedCallback","_stopObservingDOMChildren","deregister","onExitDOM","_removeFragmentFromStaticArea","cancelRender","shouldObserveChildren","hasSlots","canSlotText","mutationObserverOptions","childList","subtree","characterData","observeDOMNode","bind","unobserveDOMNode","_updateSlots","slotsMap","getSlots","domChildren","Array","from","childNodes","children","slotsCachedContentMap","propertyNameToSlotMap","slotName","slotData","Object","entries","propertyName","set","_state","_clearSlot","autoIncrementMap","slottedChildrenMap","allChildrenUpgraded","map","child","idx","_getSlotName","undefined","validValues","keys","join","console","warn","individualSlots","nextIndex","get","_individualSlot","localName","isCustomElement","includes","isDefined","window","customElements","whenDefinedPromise","whenDefined","timeoutPromise","setTimeout","race","upgrade","validateSlotValue","isUI5Element","invalidateOnChildChange","_attachChange","_getChildChangeListener","_attachSlotChange","has","all","forEach","sort","a","b","_","invalidated","call","type","name","reason","_detachChange","_detachSlotChange","callback","attachEvent","detachEvent","_onChildChange","childChangeInfo","shouldInvalidateOnChildChange","attributeChangedCallback","oldValue","newValue","properties","getProperties","realName","replace","nameInCamelCase","hasOwnProperty","propertyTypeClass","Boolean","parseInt","parseFloat","_updateAttribute","hasAttribute","attrName","attrValue","getAttribute","removeAttribute","_upgradeProperty","prop","value","allProps","getPropertiesList","defaultState","_getDefaultState","assign","_getSlotChangeListener","_onSlotChange","addEventListener","removeEventListener","_render","hasIndividualSlots","onBeforeRendering","_onComponentStateFinalized","_updateShadowRoot","_shouldUpdateFragment","_updateFragment","staticAreaItemDomRef","_assignIndividualSlotsToChildren","onAfterRendering","styleToPrepend","renderResult","template","ShadyDOM","document","adoptedStyleSheets","render","eventContext","_waitForDomRef","getDomRef","length","getFocusDomRef","domRef","focusRef","querySelector","getFocusDomRefAsync","getStableDomRef","refName","staticAreaResult","focus","focusDomRef","data","cancelable","bubbles","eventResult","_fireEvent","camelCaseEventName","compatEventResult","noConflictEvent","CustomEvent","detail","composed","dispatchEvent","customEvent","normalEventResult","getSlottedNodes","reducer","acc","curr","concat","assignedNodes","flatten","filter","item","reduce","isCompact","getComputedStyle","getPropertyValue","effectiveDir","doc","dirValues","locallyAppliedDir","dir","documentElement","body","updateStaticAreaItemContentDensity","_updateContentDensity","observedAttributes","getAttributesList","slot","match","isRendered","staticAreaTemplate","getStaticAreaItemDomRef","prototype","_defaultState","MetadataClass","props","propName","propType","propDefaultValue","defaultValue","multiple","String","slots","_generateAccessors","proto","propData","Error","defineProperty","validatePropertyValue","oldState","metadata","styles","staticAreaStyles","dependencies","getUniqueDependencies","filtered","dep","index","deps","indexOf","whenDependenciesDefined","define","onDefine","tag","getTag","altTag","getAltTag","definedLocally","definedGlobally","oldClassName","_metadata","metadataObjects","klass","getPrototypeOf","unshift","mergedMetadata"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/@ui5/webcomponents-base/dist/UI5Element.js"],"sourcesContent":["import merge from \"./thirdparty/merge.js\";\nimport boot from \"./boot.js\";\nimport UI5ElementMetadata from \"./UI5ElementMetadata.js\";\nimport EventProvider from \"./EventProvider.js\";\nimport executeTemplate from \"./renderer/executeTemplate.js\";\nimport StaticAreaItem from \"./StaticAreaItem.js\";\nimport RenderScheduler from \"./RenderScheduler.js\";\nimport { registerTag, isTagRegistered, recordTagRegistrationFailure } from \"./CustomElementsRegistry.js\";\nimport DOMObserver from \"./compatibility/DOMObserver.js\";\nimport { skipOriginalEvent } from \"./config/NoConflict.js\";\nimport { getRTL } from \"./config/RTL.js\";\nimport getConstructableStyle from \"./theming/getConstructableStyle.js\";\nimport createComponentStyleTag from \"./theming/createComponentStyleTag.js\";\nimport getEffectiveStyle from \"./theming/getEffectiveStyle.js\";\nimport Integer from \"./types/Integer.js\";\nimport Float from \"./types/Float.js\";\nimport { kebabToCamelCase, camelToKebabCase } from \"./util/StringHelper.js\";\nimport isValidPropertyName from \"./util/isValidPropertyName.js\";\nimport isSlot from \"./util/isSlot.js\";\nimport arraysAreEqual from \"./util/arraysAreEqual.js\";\nimport { markAsRtlAware } from \"./locale/RTLAwareRegistry.js\";\n\nlet autoId = 0;\n\nconst elementTimeouts = new Map();\nconst uniqueDependenciesCache = new Map();\n\nconst GLOBAL_CONTENT_DENSITY_CSS_VAR = \"--_ui5_content_density\";\nconst GLOBAL_DIR_CSS_VAR = \"--_ui5_dir\";\n\n/**\n * Triggers re-rendering of a UI5Element instance due to state change.\n *\n * @param  changeInfo An object with information about the change that caused invalidation.\n * @private\n */\nfunction _invalidate(changeInfo) {\n\t// Invalidation should be suppressed: 1) before the component is rendered for the first time 2) and during the execution of onBeforeRendering\n\t// This is necessary not only as an optimization, but also to avoid infinite loops on invalidation between children and parents (when invalidateOnChildChange is used)\n\tif (this._suppressInvalidation) {\n\t\treturn;\n\t}\n\n\t// Call the onInvalidation hook\n\tthis.onInvalidation(changeInfo);\n\n\tthis._changedState.push(changeInfo);\n\tRenderScheduler.renderDeferred(this);\n\tthis._eventProvider.fireEvent(\"change\", { ...changeInfo, target: this });\n}\n\n/**\n * Base class for all UI5 Web Components\n *\n * @class\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.base.UI5Element\n * @extends HTMLElement\n * @public\n */\nclass UI5Element extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._changedState = []; // Filled on each invalidation, cleared on re-render (used for debugging)\n\t\tthis._suppressInvalidation = true; // A flag telling whether all invalidations should be ignored. Initialized with \"true\" because a UI5Element can not be invalidated until it is rendered for the first time\n\t\tthis._inDOM = false; // A flag telling whether the UI5Element is currently in the DOM tree of the document or not\n\t\tthis._fullyConnected = false; // A flag telling whether the UI5Element's onEnterDOM hook was called (since it's possible to have the element removed from DOM before that)\n\t\tthis._childChangeListeners = new Map(); // used to store lazy listeners per slot for the child change event of every child inside that slot\n\t\tthis._slotChangeListeners = new Map(); // used to store lazy listeners per slot for the slotchange event of all slot children inside that slot\n\t\tthis._eventProvider = new EventProvider(); // used by parent components for listening to changes to child components\n\t\tlet deferredResolve;\n\t\tthis._domRefReadyPromise = new Promise(resolve => {\n\t\t\tdeferredResolve = resolve;\n\t\t});\n\t\tthis._domRefReadyPromise._deferredResolve = deferredResolve;\n\n\t\tthis._initializeState();\n\t\tthis._upgradeAllProperties();\n\t\tthis._initializeContainers();\n\t}\n\n\t/**\n\t * Returns a unique ID for this UI5 Element\n\t *\n\t * @deprecated - This property is not guaranteed in future releases\n\t * @protected\n\t */\n\tget _id() {\n\t\tif (!this.__id) {\n\t\t\tthis.__id = `ui5wc_${++autoId}`;\n\t\t}\n\n\t\treturn this.__id;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_initializeContainers() {\n\t\tconst needsShadowDOM = this.constructor._needsShadowDOM();\n\t\tconst needsStaticArea = this.constructor._needsStaticArea();\n\n\t\t// Init Shadow Root\n\t\tif (needsShadowDOM) {\n\t\t\tthis.attachShadow({ mode: \"open\" });\n\t\t}\n\n\t\t// Init StaticAreaItem only if needed\n\t\tif (needsStaticArea) {\n\t\t\tthis.staticAreaItem = new StaticAreaItem(this);\n\t\t}\n\t}\n\n\t/**\n\t * Do not call this method from derivatives of UI5Element, use \"onEnterDOM\" only\n\t * @private\n\t */\n\tasync connectedCallback() {\n\t\tthis.setAttribute(this.constructor.getMetadata().getPureTag(), \"\");\n\n\t\tconst needsShadowDOM = this.constructor._needsShadowDOM();\n\t\tconst slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n\n\t\tthis._inDOM = true;\n\n\t\tif (slotsAreManaged) {\n\t\t\t// always register the observer before yielding control to the main thread (await)\n\t\t\tthis._startObservingDOMChildren();\n\t\t\tawait this._processChildren();\n\t\t}\n\n\t\tif (needsShadowDOM && !this.shadowRoot) { // Workaround for Firefox74 bug\n\t\t\tawait Promise.resolve();\n\t\t}\n\n\t\tif (!this._inDOM) { // Component removed from DOM while _processChildren was running\n\t\t\treturn;\n\t\t}\n\n\t\tRenderScheduler.register(this);\n\t\tRenderScheduler.renderImmediately(this);\n\t\tthis._domRefReadyPromise._deferredResolve();\n\t\tthis._fullyConnected = true;\n\t\tif (typeof this.onEnterDOM === \"function\") {\n\t\t\tthis.onEnterDOM();\n\t\t}\n\t}\n\n\t/**\n\t * Do not call this method from derivatives of UI5Element, use \"onExitDOM\" only\n\t * @private\n\t */\n\tdisconnectedCallback() {\n\t\tconst needsShadowDOM = this.constructor._needsShadowDOM();\n\t\tconst needsStaticArea = this.constructor._needsStaticArea();\n\t\tconst slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n\n\t\tthis._inDOM = false;\n\n\t\tif (slotsAreManaged) {\n\t\t\tthis._stopObservingDOMChildren();\n\t\t}\n\n\t\tif (needsShadowDOM) {\n\t\t\tRenderScheduler.deregister(this);\n\t\t\tif (this._fullyConnected) {\n\t\t\t\tif (typeof this.onExitDOM === \"function\") {\n\t\t\t\t\tthis.onExitDOM();\n\t\t\t\t}\n\t\t\t\tthis._fullyConnected = false;\n\t\t\t}\n\t\t}\n\n\t\tif (needsStaticArea) {\n\t\t\tthis.staticAreaItem._removeFragmentFromStaticArea();\n\t\t}\n\n\t\tRenderScheduler.cancelRender(this);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_startObservingDOMChildren() {\n\t\tconst shouldObserveChildren = this.constructor.getMetadata().hasSlots();\n\t\tif (!shouldObserveChildren) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst canSlotText = this.constructor.getMetadata().canSlotText();\n\t\tconst mutationObserverOptions = {\n\t\t\tchildList: true,\n\t\t\tsubtree: canSlotText,\n\t\t\tcharacterData: canSlotText,\n\t\t};\n\t\tDOMObserver.observeDOMNode(this, this._processChildren.bind(this), mutationObserverOptions);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_stopObservingDOMChildren() {\n\t\tDOMObserver.unobserveDOMNode(this);\n\t}\n\n\t/**\n\t * Note: this method is also manually called by \"compatibility/patchNodeValue.js\"\n\t * @private\n\t */\n\tasync _processChildren() {\n\t\tconst hasSlots = this.constructor.getMetadata().hasSlots();\n\t\tif (hasSlots) {\n\t\t\tawait this._updateSlots();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tasync _updateSlots() {\n\t\tconst slotsMap = this.constructor.getMetadata().getSlots();\n\t\tconst canSlotText = this.constructor.getMetadata().canSlotText();\n\t\tconst domChildren = Array.from(canSlotText ? this.childNodes : this.children);\n\n\t\tconst slotsCachedContentMap = new Map(); // Store here the content of each slot before the mutation occurred\n\t\tconst propertyNameToSlotMap = new Map(); // Used for reverse lookup to determine to which slot the property name corresponds\n\n\t\t// Init the _state object based on the supported slots and store the previous values\n\t\tfor (const [slotName, slotData] of Object.entries(slotsMap)) { // eslint-disable-line\n\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\tpropertyNameToSlotMap.set(propertyName, slotName);\n\t\t\tslotsCachedContentMap.set(propertyName, [...this._state[propertyName]]);\n\t\t\tthis._clearSlot(slotName, slotData);\n\t\t}\n\n\t\tconst autoIncrementMap = new Map();\n\t\tconst slottedChildrenMap = new Map();\n\n\t\tconst allChildrenUpgraded = domChildren.map(async (child, idx) => {\n\t\t\t// Determine the type of the child (mainly by the slot attribute)\n\t\t\tconst slotName = this.constructor._getSlotName(child);\n\t\t\tconst slotData = slotsMap[slotName];\n\n\t\t\t// Check if the slotName is supported\n\t\t\tif (slotData === undefined) {\n\t\t\t\tconst validValues = Object.keys(slotsMap).join(\", \");\n\t\t\t\tconsole.warn(`Unknown slotName: ${slotName}, ignoring`, child, `Valid values are: ${validValues}`); // eslint-disable-line\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For children that need individual slots, calculate them\n\t\t\tif (slotData.individualSlots) {\n\t\t\t\tconst nextIndex = (autoIncrementMap.get(slotName) || 0) + 1;\n\t\t\t\tautoIncrementMap.set(slotName, nextIndex);\n\t\t\t\tchild._individualSlot = `${slotName}-${nextIndex}`;\n\t\t\t}\n\n\t\t\t// Await for not-yet-defined custom elements\n\t\t\tif (child instanceof HTMLElement) {\n\t\t\t\tconst localName = child.localName;\n\t\t\t\tconst isCustomElement = localName.includes(\"-\");\n\t\t\t\tif (isCustomElement) {\n\t\t\t\t\tconst isDefined = window.customElements.get(localName);\n\t\t\t\t\tif (!isDefined) {\n\t\t\t\t\t\tconst whenDefinedPromise = window.customElements.whenDefined(localName); // Class registered, but instances not upgraded yet\n\t\t\t\t\t\tlet timeoutPromise = elementTimeouts.get(localName);\n\t\t\t\t\t\tif (!timeoutPromise) {\n\t\t\t\t\t\t\ttimeoutPromise = new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t\t\t\t\telementTimeouts.set(localName, timeoutPromise);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait Promise.race([whenDefinedPromise, timeoutPromise]);\n\t\t\t\t\t}\n\t\t\t\t\twindow.customElements.upgrade(child);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchild = this.constructor.getMetadata().constructor.validateSlotValue(child, slotData);\n\n\t\t\t// Listen for any invalidation on the child if invalidateOnChildChange is true or an object (ignore when false or not set)\n\t\t\tif (child.isUI5Element && slotData.invalidateOnChildChange) {\n\t\t\t\tchild._attachChange(this._getChildChangeListener(slotName));\n\t\t\t}\n\n\t\t\t// Listen for the slotchange event if the child is a slot itself\n\t\t\tif (isSlot(child)) {\n\t\t\t\tthis._attachSlotChange(child, slotName);\n\t\t\t}\n\n\t\t\tconst propertyName = slotData.propertyName || slotName;\n\n\t\t\tif (slottedChildrenMap.has(propertyName)) {\n\t\t\t\tslottedChildrenMap.get(propertyName).push({ child, idx });\n\t\t\t} else {\n\t\t\t\tslottedChildrenMap.set(propertyName, [{ child, idx }]);\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(allChildrenUpgraded);\n\n\t\t// Distribute the child in the _state object, keeping the Light DOM order,\n\t\t// not the order elements are defined.\n\t\tslottedChildrenMap.forEach((children, propertyName) => {\n\t\t\tthis._state[propertyName] = children.sort((a, b) => a.idx - b.idx).map(_ => _.child);\n\t\t});\n\n\t\t// Compare the content of each slot with the cached values and invalidate for the ones that changed\n\t\tlet invalidated = false;\n\t\tfor (const [slotName, slotData] of Object.entries(slotsMap)) { // eslint-disable-line\n\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\tif (!arraysAreEqual(slotsCachedContentMap.get(propertyName), this._state[propertyName])) {\n\t\t\t\t_invalidate.call(this, {\n\t\t\t\t\ttype: \"slot\",\n\t\t\t\t\tname: propertyNameToSlotMap.get(propertyName),\n\t\t\t\t\treason: \"children\",\n\t\t\t\t});\n\t\t\t\tinvalidated = true;\n\t\t\t}\n\t\t}\n\n\t\t// If none of the slots had an invalidation due to changes to immediate children,\n\t\t// the change is considered to be text content of the default slot\n\t\tif (!invalidated) {\n\t\t\t_invalidate.call(this, {\n\t\t\t\ttype: \"slot\",\n\t\t\t\tname: \"default\",\n\t\t\t\treason: \"textcontent\",\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Removes all children from the slot and detaches listeners, if any\n\t * @private\n\t */\n\t_clearSlot(slotName, slotData) {\n\t\tconst propertyName = slotData.propertyName || slotName;\n\t\tconst children = this._state[propertyName];\n\n\t\tchildren.forEach(child => {\n\t\t\tif (child && child.isUI5Element) {\n\t\t\t\tchild._detachChange(this._getChildChangeListener(slotName));\n\t\t\t}\n\n\t\t\tif (isSlot(child)) {\n\t\t\t\tthis._detachSlotChange(child, slotName);\n\t\t\t}\n\t\t});\n\n\t\tthis._state[propertyName] = [];\n\t}\n\n\t/**\n\t * Attach a callback that will be executed whenever the component is invalidated\n\t *\n\t * @param callback\n\t * @protected\n\t */\n\t_attachChange(callback) {\n\t\tthis._eventProvider.attachEvent(\"change\", callback);\n\t}\n\n\t/**\n\t * Detach the callback that is executed whenever the component is invalidated\n\t *\n\t * @param callback\n\t * @protected\n\t */\n\t_detachChange(callback) {\n\t\tthis._eventProvider.detachEvent(\"change\", callback);\n\t}\n\n\t/**\n\t * Callback that is executed whenever a monitored child changes its state\n\t *\n\t * @param slotName the slot in which a child was invalidated\n\t * @param childChangeInfo the changeInfo object for the child in the given slot\n\t * @private\n\t */\n\t_onChildChange(slotName, childChangeInfo) {\n\t\tif (!this.constructor.getMetadata().shouldInvalidateOnChildChange(slotName, childChangeInfo.type, childChangeInfo.name)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The component should be invalidated as this type of change on the child is listened for\n\t\t// However, no matter what changed on the child (property/slot), the invalidation is registered as \"type=slot\" for the component itself\n\t\t_invalidate.call(this, {\n\t\t\ttype: \"slot\",\n\t\t\tname: slotName,\n\t\t\treason: \"childchange\",\n\t\t\tchild: childChangeInfo.target,\n\t\t});\n\t}\n\n\t/**\n\t * Do not override this method in derivatives of UI5Element\n\t * @private\n\t */\n\tattributeChangedCallback(name, oldValue, newValue) {\n\t\tconst properties = this.constructor.getMetadata().getProperties();\n\t\tconst realName = name.replace(/^ui5-/, \"\");\n\t\tconst nameInCamelCase = kebabToCamelCase(realName);\n\t\tif (properties.hasOwnProperty(nameInCamelCase)) { // eslint-disable-line\n\t\t\tconst propertyTypeClass = properties[nameInCamelCase].type;\n\t\t\tif (propertyTypeClass === Boolean) {\n\t\t\t\tnewValue = newValue !== null;\n\t\t\t}\n\t\t\tif (propertyTypeClass === Integer) {\n\t\t\t\tnewValue = parseInt(newValue);\n\t\t\t}\n\t\t\tif (propertyTypeClass === Float) {\n\t\t\t\tnewValue = parseFloat(newValue);\n\t\t\t}\n\t\t\tthis[nameInCamelCase] = newValue;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_updateAttribute(name, newValue) {\n\t\tif (!this.constructor.getMetadata().hasAttribute(name)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof newValue === \"object\") {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrName = camelToKebabCase(name);\n\t\tconst attrValue = this.getAttribute(attrName);\n\t\tif (typeof newValue === \"boolean\") {\n\t\t\tif (newValue === true && attrValue === null) {\n\t\t\t\tthis.setAttribute(attrName, \"\");\n\t\t\t} else if (newValue === false && attrValue !== null) {\n\t\t\t\tthis.removeAttribute(attrName);\n\t\t\t}\n\t\t} else if (attrValue !== newValue) {\n\t\t\tthis.setAttribute(attrName, newValue);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_upgradeProperty(prop) {\n\t\tif (this.hasOwnProperty(prop)) { // eslint-disable-line\n\t\t\tconst value = this[prop];\n\t\t\tdelete this[prop];\n\t\t\tthis[prop] = value;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_upgradeAllProperties() {\n\t\tconst allProps = this.constructor.getMetadata().getPropertiesList();\n\t\tallProps.forEach(this._upgradeProperty, this);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_initializeState() {\n\t\tconst defaultState = this.constructor._getDefaultState();\n\t\tthis._state = Object.assign({}, defaultState);\n\t}\n\n\t/**\n\t * Returns a singleton event listener for the \"change\" event of a child in a given slot\n\t *\n\t * @param slotName the name of the slot, where the child is\n\t * @returns {any}\n\t * @private\n\t */\n\t_getChildChangeListener(slotName) {\n\t\tif (!this._childChangeListeners.has(slotName)) {\n\t\t\tthis._childChangeListeners.set(slotName, this._onChildChange.bind(this, slotName));\n\t\t}\n\t\treturn this._childChangeListeners.get(slotName);\n\t}\n\n\t/**\n\t * Returns a singleton slotchange event listener that invalidates the component due to changes in the given slot\n\t *\n\t * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n\t * @returns {any}\n\t * @private\n\t */\n\t_getSlotChangeListener(slotName) {\n\t\tif (!this._slotChangeListeners.has(slotName)) {\n\t\t\tthis._slotChangeListeners.set(slotName, this._onSlotChange.bind(this, slotName));\n\t\t}\n\t\treturn this._slotChangeListeners.get(slotName);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_attachSlotChange(child, slotName) {\n\t\tchild.addEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_detachSlotChange(child, slotName) {\n\t\tchild.removeEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n\t}\n\n\t/**\n\t * Whenever a slot element is slotted inside a UI5 Web Component, its slotchange event invalidates the component\n\t *\n\t * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n\t * @private\n\t */\n\t_onSlotChange(slotName) {\n\t\t_invalidate.call(this, {\n\t\t\ttype: \"slot\",\n\t\t\tname: slotName,\n\t\t\treason: \"slotchange\",\n\t\t});\n\t}\n\n\t/**\n\t * A callback that is executed each time an already rendered component is invalidated (scheduled for re-rendering)\n\t *\n\t * @param  changeInfo An object with information about the change that caused invalidation.\n\t * The object can have the following properties:\n\t *  - type: (property|slot) tells what caused the invalidation\n\t *   1) property: a property value was changed either directly or as a result of changing the corresponding attribute\n\t *   2) slot: a slotted node(nodes) changed in one of several ways (see \"reason\")\n\t *\n\t *  - name: the name of the property or slot that caused the invalidation\n\t *\n\t *  - reason: (children|textcontent|childchange|slotchange) relevant only for type=\"slot\" only and tells exactly what changed in the slot\n\t *   1) children: immediate children (HTML elements or text nodes) were added, removed or reordered in the slot\n\t *   2) textcontent: text nodes in the slot changed value (or nested text nodes were added or changed value). Can only trigger for slots of \"type: Node\"\n\t *   3) slotchange: a slot element, slotted inside that slot had its \"slotchange\" event listener called. This practically means that transitively slotted children changed.\n\t *      Can only trigger if the child of a slot is a slot element itself.\n\t *   4) childchange: indicates that a UI5Element child in that slot was invalidated and in turn invalidated the component.\n\t *      Can only trigger for slots with \"invalidateOnChildChange\" metadata descriptor\n\t *\n\t *  - newValue: the new value of the property (for type=\"property\" only)\n\t *\n\t *  - oldValue: the old value of the property (for type=\"property\" only)\n\t *\n\t *  - child the child that was changed (for type=\"slot\" and reason=\"childchange\" only)\n\t *\n\t * @public\n\t */\n\tonInvalidation(changeInfo) {}\n\n\t/**\n\t * Do not call this method directly, only intended to be called by RenderScheduler.js\n\t * @protected\n\t */\n\t_render() {\n\t\tconst hasIndividualSlots = this.constructor.getMetadata().hasIndividualSlots();\n\n\t\t// suppress invalidation to prevent state changes scheduling another rendering\n\t\tthis._suppressInvalidation = true;\n\n\t\tif (typeof this.onBeforeRendering === \"function\") {\n\t\t\tthis.onBeforeRendering();\n\t\t}\n\n\t\t// Intended for framework usage only. Currently ItemNavigation updates tab indexes after the component has updated its state but before the template is rendered\n\t\tif (this._onComponentStateFinalized) {\n\t\t\tthis._onComponentStateFinalized();\n\t\t}\n\n\t\t// resume normal invalidation handling\n\t\tthis._suppressInvalidation = false;\n\n\t\t// Update the shadow root with the render result\n\t\t/*\n\t\tif (this._changedState.length) {\n\t\t\tlet element = this.localName;\n\t\t\tif (this.id) {\n\t\t\t\telement = `${element}#${this.id}`;\n\t\t\t}\n\t\t\tconsole.log(\"Re-rendering:\", element, this._changedState.map(x => { // eslint-disable-line\n\t\t\t\tlet res = `${x.type}`;\n\t\t\t\tif (x.reason) {\n\t\t\t\t\tres = `${res}(${x.reason})`;\n\t\t\t\t}\n\t\t\t\tres = `${res}: ${x.name}`;\n\t\t\t\tif (x.type === \"property\") {\n\t\t\t\t\tres = `${res} ${x.oldValue} => ${x.newValue}`;\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}));\n\t\t}\n\t\t*/\n\t\tthis._changedState = [];\n\n\t\t// Update shadow root and static area item\n\t\tthis._updateShadowRoot();\n\t\tif (this._shouldUpdateFragment()) {\n\t\t\tthis.staticAreaItem._updateFragment(this);\n\t\t\tthis.staticAreaItemDomRef = this.staticAreaItem.staticAreaItemDomRef.shadowRoot;\n\t\t}\n\n\t\t// Safari requires that children get the slot attribute only after the slot tags have been rendered in the shadow DOM\n\t\tif (hasIndividualSlots) {\n\t\t\tthis._assignIndividualSlotsToChildren();\n\t\t}\n\n\t\t// Call the onAfterRendering hook\n\t\tif (typeof this.onAfterRendering === \"function\") {\n\t\t\tthis.onAfterRendering();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_updateShadowRoot() {\n\t\tif (!this.constructor._needsShadowDOM()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet styleToPrepend;\n\t\tconst renderResult = executeTemplate(this.constructor.template, this);\n\n\t\t// IE11, Edge\n\t\tif (window.ShadyDOM) {\n\t\t\tcreateComponentStyleTag(this.constructor);\n\t\t}\n\n\t\t// Chrome\n\t\tif (document.adoptedStyleSheets) {\n\t\t\tthis.shadowRoot.adoptedStyleSheets = getConstructableStyle(this.constructor);\n\t\t}\n\n\t\t// FF, Safari\n\t\tif (!document.adoptedStyleSheets && !window.ShadyDOM) {\n\t\t\tstyleToPrepend = getEffectiveStyle(this.constructor);\n\t\t}\n\n\t\tthis.constructor.render(renderResult, this.shadowRoot, styleToPrepend, { eventContext: this });\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_assignIndividualSlotsToChildren() {\n\t\tconst domChildren = Array.from(this.children);\n\n\t\tdomChildren.forEach(child => {\n\t\t\tif (child._individualSlot) {\n\t\t\t\tchild.setAttribute(\"slot\", child._individualSlot);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_waitForDomRef() {\n\t\treturn this._domRefReadyPromise;\n\t}\n\n\t/**\n\t * Returns the DOM Element inside the Shadow Root that corresponds to the opening tag in the UI5 Web Component's template\n\t * Use this method instead of \"this.shadowRoot\" to read the Shadow DOM, if ever necessary\n\t * @public\n\t */\n\tgetDomRef() {\n\t\tif (!this.shadowRoot || this.shadowRoot.children.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.shadowRoot.children.length === 1\n\t\t\t? this.shadowRoot.children[0] : this.shadowRoot.children[1];\n\t}\n\n\t/**\n\t * Returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n\t * This is the element that will receive the focus by default.\n\t * @public\n\t */\n\tgetFocusDomRef() {\n\t\tconst domRef = this.getDomRef();\n\t\tif (domRef) {\n\t\t\tconst focusRef = domRef.querySelector(\"[data-sap-focus-ref]\");\n\t\t\treturn focusRef || domRef;\n\t\t}\n\t}\n\n\t/**\n\t * Waits for dom ref and then returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n\t * This is the element that will receive the focus by default.\n\t * @public\n\t */\n\tasync getFocusDomRefAsync() {\n\t\tawait this._waitForDomRef();\n\t\treturn this.getFocusDomRef();\n\t}\n\n\t/**\n\t * Use this method in order to get a reference to an element in the shadow root of the web component or the static area item of the component\n\t * @public\n\t * @method\n\t * @param {String} refName Defines the name of the stable DOM ref\n\t */\n\tgetStableDomRef(refName) {\n\t\tconst staticAreaResult = this.staticAreaItemDomRef && this.staticAreaItemDomRef.querySelector(`[data-ui5-stable=${refName}]`);\n\n\t\treturn staticAreaResult\n\t\t|| this.getDomRef().querySelector(`[data-ui5-stable=${refName}]`);\n\t}\n\n\t/**\n\t * Set the focus to the element, returned by \"getFocusDomRef()\" (marked by \"data-sap-focus-ref\")\n\t * @public\n\t */\n\tasync focus() {\n\t\tawait this._waitForDomRef();\n\n\t\tconst focusDomRef = this.getFocusDomRef();\n\n\t\tif (focusDomRef && typeof focusDomRef.focus === \"function\") {\n\t\t\tfocusDomRef.focus();\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @public\n\t * @param name - name of the event\n\t * @param data - additional data for the event\n\t * @param cancelable - true, if the user can call preventDefault on the event object\n\t * @param bubbles - true, if the event bubbles\n\t * @returns {boolean} false, if the event was cancelled (preventDefault called), true otherwise\n\t */\n\tfireEvent(name, data, cancelable = false, bubbles = true) {\n\t\tconst eventResult = this._fireEvent(name, data, cancelable, bubbles);\n\t\tconst camelCaseEventName = kebabToCamelCase(name);\n\n\t\tif (camelCaseEventName !== name) {\n\t\t\treturn eventResult && this._fireEvent(camelCaseEventName, data, cancelable);\n\t\t}\n\n\t\treturn eventResult;\n\t}\n\n\t_fireEvent(name, data, cancelable = false, bubbles = true) {\n\t\tlet compatEventResult = true; // Initialized to true, because if the event is not fired at all, it should be considered \"not-prevented\"\n\n\t\tconst noConflictEvent = new CustomEvent(`ui5-${name}`, {\n\t\t\tdetail: data,\n\t\t\tcomposed: false,\n\t\t\tbubbles,\n\t\t\tcancelable,\n\t\t});\n\n\t\t// This will be false if the compat event is prevented\n\t\tcompatEventResult = this.dispatchEvent(noConflictEvent);\n\n\t\tif (skipOriginalEvent(name)) {\n\t\t\treturn compatEventResult;\n\t\t}\n\n\t\tconst customEvent = new CustomEvent(name, {\n\t\t\tdetail: data,\n\t\t\tcomposed: false,\n\t\t\tbubbles,\n\t\t\tcancelable,\n\t\t});\n\n\t\t// This will be false if the normal event is prevented\n\t\tconst normalEventResult = this.dispatchEvent(customEvent);\n\n\t\t// Return false if any of the two events was prevented (its result was false).\n\t\treturn normalEventResult && compatEventResult;\n\t}\n\n\t/**\n\t * Returns the actual children, associated with a slot.\n\t * Useful when there are transitive slots in nested component scenarios and you don't want to get a list of the slots, but rather of their content.\n\t * @public\n\t */\n\tgetSlottedNodes(slotName) {\n\t\tconst reducer = (acc, curr) => {\n\t\t\tif (!isSlot(curr)) {\n\t\t\t\treturn acc.concat([curr]);\n\t\t\t}\n\t\t\treturn acc.concat(curr.assignedNodes({ flatten: true }).filter(item => item instanceof HTMLElement));\n\t\t};\n\n\t\treturn this[slotName].reduce(reducer, []);\n\t}\n\n\tget isCompact() {\n\t\treturn getComputedStyle(this).getPropertyValue(GLOBAL_CONTENT_DENSITY_CSS_VAR) === \"compact\";\n\t}\n\n\t/**\n\t * Determines whether the component should be rendered in RTL mode or not.\n\t * Returns: \"rtl\", \"ltr\" or undefined\n\t *\n\t * @public\n\t * @returns {String|undefined}\n\t */\n\tget effectiveDir() {\n\t\tmarkAsRtlAware(this.constructor); // if a UI5 Element calls this method, it's considered to be rtl-aware\n\n\t\tconst doc = window.document;\n\t\tconst dirValues = [\"ltr\", \"rtl\"]; // exclude \"auto\" and \"\" from all calculations\n\t\tconst locallyAppliedDir = getComputedStyle(this).getPropertyValue(GLOBAL_DIR_CSS_VAR);\n\n\t\t// In that order, inspect the CSS Var (for modern browsers), the element itself, html and body (for IE fallback)\n\t\tif (dirValues.includes(locallyAppliedDir)) {\n\t\t\treturn locallyAppliedDir;\n\t\t}\n\t\tif (dirValues.includes(this.dir)) {\n\t\t\treturn this.dir;\n\t\t}\n\t\tif (dirValues.includes(doc.documentElement.dir)) {\n\t\t\treturn doc.documentElement.dir;\n\t\t}\n\t\tif (dirValues.includes(doc.body.dir)) {\n\t\t\treturn doc.body.dir;\n\t\t}\n\n\t\t// Finally, check the configuration for explicitly set RTL or language-implied RTL\n\t\treturn getRTL() ? \"rtl\" : undefined;\n\t}\n\n\tupdateStaticAreaItemContentDensity() {\n\t\tif (this.staticAreaItem) {\n\t\t\tthis.staticAreaItem._updateContentDensity(this.isCompact);\n\t\t}\n\t}\n\n\t/**\n\t * Used to duck-type UI5 elements without using instanceof\n\t * @returns {boolean}\n\t * @public\n\t */\n\tget isUI5Element() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Do not override this method in derivatives of UI5Element, use metadata properties instead\n\t * @private\n\t */\n\tstatic get observedAttributes() {\n\t\treturn this.getMetadata().getAttributesList();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _getSlotName(child) {\n\t\t// Text nodes can only go to the default slot\n\t\tif (!(child instanceof HTMLElement)) {\n\t\t\treturn \"default\";\n\t\t}\n\n\t\t// Discover the slot based on the real slot name (f.e. footer => footer, or content-32 => content)\n\t\tconst slot = child.getAttribute(\"slot\");\n\t\tif (slot) {\n\t\t\tconst match = slot.match(/^(.+?)-\\d+$/);\n\t\t\treturn match ? match[1] : slot;\n\t\t}\n\n\t\t// Use default slot as a fallback\n\t\treturn \"default\";\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _needsShadowDOM() {\n\t\treturn !!this.template;\n\t}\n\n\t_shouldUpdateFragment() {\n\t\treturn this.constructor._needsStaticArea() && this.staticAreaItem.isRendered();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _needsStaticArea() {\n\t\treturn typeof this.staticAreaTemplate === \"function\";\n\t}\n\n\t/**\n\t * @public\n\t */\n\tgetStaticAreaItemDomRef() {\n\t\treturn this.staticAreaItem.getDomRef();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _getDefaultState() {\n\t\tif (Object.prototype.hasOwnProperty.call(this, \"_defaultState\")) {\n\t\t\treturn this._defaultState;\n\t\t}\n\n\t\tconst MetadataClass = this.getMetadata();\n\t\tconst defaultState = {};\n\t\tconst slotsAreManaged = MetadataClass.slotsAreManaged();\n\n\t\t// Initialize properties\n\t\tconst props = MetadataClass.getProperties();\n\t\tfor (const propName in props) { // eslint-disable-line\n\t\t\tconst propType = props[propName].type;\n\t\t\tconst propDefaultValue = props[propName].defaultValue;\n\n\t\t\tif (propType === Boolean) {\n\t\t\t\tdefaultState[propName] = false;\n\n\t\t\t\tif (propDefaultValue !== undefined) {\n\t\t\t\t\tconsole.warn(\"The 'defaultValue' metadata key is ignored for all booleans properties, they would be initialized with 'false' by default\"); // eslint-disable-line\n\t\t\t\t}\n\t\t\t} else if (props[propName].multiple) {\n\t\t\t\tdefaultState[propName] = [];\n\t\t\t} else if (propType === Object) {\n\t\t\t\tdefaultState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : {};\n\t\t\t} else if (propType === String) {\n\t\t\t\tdefaultState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : \"\";\n\t\t\t} else {\n\t\t\t\tdefaultState[propName] = propDefaultValue;\n\t\t\t}\n\t\t}\n\n\t\t// Initialize slots\n\t\tif (slotsAreManaged) {\n\t\t\tconst slots = MetadataClass.getSlots();\n\t\t\tfor (const [slotName, slotData] of Object.entries(slots)) { // eslint-disable-line\n\t\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\t\tdefaultState[propertyName] = [];\n\t\t\t}\n\t\t}\n\n\t\tthis._defaultState = defaultState;\n\t\treturn defaultState;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _generateAccessors() {\n\t\tconst proto = this.prototype;\n\t\tconst slotsAreManaged = this.getMetadata().slotsAreManaged();\n\n\t\t// Properties\n\t\tconst properties = this.getMetadata().getProperties();\n\t\tfor (const [prop, propData] of Object.entries(properties)) { // eslint-disable-line\n\t\t\tif (!isValidPropertyName(prop)) {\n\t\t\t\tconsole.warn(`\"${prop}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n\t\t\t}\n\n\t\t\tif (propData.type === Boolean && propData.defaultValue) {\n\t\t\t\tthrow new Error(`Cannot set a default value for property \"${prop}\". All booleans are false by default.`);\n\t\t\t}\n\n\t\t\tif (propData.type === Array) {\n\t\t\t\tthrow new Error(`Wrong type for property \"${prop}\". Properties cannot be of type Array - use \"multiple: true\" and set \"type\" to the single value type, such as \"String\", \"Object\", etc...`);\n\t\t\t}\n\n\t\t\tif (propData.type === Object && propData.defaultValue) {\n\t\t\t\tthrow new Error(`Cannot set a default value for property \"${prop}\". All properties of type \"Object\" are empty objects by default.`);\n\t\t\t}\n\n\t\t\tif (propData.multiple && propData.defaultValue) {\n\t\t\t\tthrow new Error(`Cannot set a default value for property \"${prop}\". All multiple properties are empty arrays by default.`);\n\t\t\t}\n\n\t\t\tObject.defineProperty(proto, prop, {\n\t\t\t\tget() {\n\t\t\t\t\tif (this._state[prop] !== undefined) {\n\t\t\t\t\t\treturn this._state[prop];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst propDefaultValue = propData.defaultValue;\n\n\t\t\t\t\tif (propData.type === Boolean) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (propData.type === String) {  // eslint-disable-line\n\t\t\t\t\t\treturn propDefaultValue;\n\t\t\t\t\t} else if (propData.multiple) { // eslint-disable-line\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn propDefaultValue;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tset(value) {\n\t\t\t\t\tvalue = this.constructor.getMetadata().constructor.validatePropertyValue(value, propData);\n\n\t\t\t\t\tconst oldState = this._state[prop];\n\n\t\t\t\t\tif (oldState !== value) {\n\t\t\t\t\t\tthis._state[prop] = value;\n\t\t\t\t\t\t_invalidate.call(this, {\n\t\t\t\t\t\t\ttype: \"property\",\n\t\t\t\t\t\t\tname: prop,\n\t\t\t\t\t\t\tnewValue: value,\n\t\t\t\t\t\t\toldValue: oldState,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis._updateAttribute(prop, value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\t// Slots\n\t\tif (slotsAreManaged) {\n\t\t\tconst slots = this.getMetadata().getSlots();\n\t\t\tfor (const [slotName, slotData] of Object.entries(slots)) { // eslint-disable-line\n\t\t\t\tif (!isValidPropertyName(slotName)) {\n\t\t\t\t\tconsole.warn(`\"${slotName}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n\t\t\t\t}\n\n\t\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\t\tObject.defineProperty(proto, propertyName, {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tif (this._state[propertyName] !== undefined) {\n\t\t\t\t\t\t\treturn this._state[propertyName];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t},\n\t\t\t\t\tset() {\n\t\t\t\t\t\tthrow new Error(\"Cannot set slot content directly, use the DOM APIs (appendChild, removeChild, etc...)\");\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the metadata object for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic get metadata() {\n\t\treturn {};\n\t}\n\n\t/**\n\t * Returns the CSS for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic get styles() {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns the Static Area CSS for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic get staticAreaStyles() {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns an array with the dependencies for this UI5 Web Component, which could be:\n\t *  - composed components (used in its shadow root or static area item)\n\t *  - slotted components that the component may need to communicate with\n\t *\n\t * @protected\n\t */\n\tstatic get dependencies() {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns a list of the unique dependencies for this UI5 Web Component\n\t *\n\t * @public\n\t */\n\tstatic getUniqueDependencies() {\n\t\tif (!uniqueDependenciesCache.has(this)) {\n\t\t\tconst filtered = this.dependencies.filter((dep, index, deps) => deps.indexOf(dep) === index);\n\t\t\tuniqueDependenciesCache.set(this, filtered);\n\t\t}\n\n\t\treturn uniqueDependenciesCache.get(this);\n\t}\n\n\t/**\n\t * Returns a promise that resolves whenever all dependencies for this UI5 Web Component have resolved\n\t *\n\t * @returns {Promise<any[]>}\n\t */\n\tstatic whenDependenciesDefined() {\n\t\treturn Promise.all(this.getUniqueDependencies().map(dep => dep.define()));\n\t}\n\n\t/**\n\t * Hook that will be called upon custom element definition\n\t *\n\t * @protected\n\t * @returns {Promise<void>}\n\t */\n\tstatic async onDefine() {\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Registers a UI5 Web Component in the browser window object\n\t * @public\n\t * @returns {Promise<UI5Element>}\n\t */\n\tstatic async define() {\n\t\tawait boot();\n\n\t\tawait Promise.all([\n\t\t\tthis.whenDependenciesDefined(),\n\t\t\tthis.onDefine(),\n\t\t]);\n\n\t\tconst tag = this.getMetadata().getTag();\n\t\tconst altTag = this.getMetadata().getAltTag();\n\n\t\tconst definedLocally = isTagRegistered(tag);\n\t\tconst definedGlobally = customElements.get(tag);\n\n\t\tif (definedGlobally && !definedLocally) {\n\t\t\trecordTagRegistrationFailure(tag);\n\t\t} else if (!definedGlobally) {\n\t\t\tthis._generateAccessors();\n\t\t\tregisterTag(tag);\n\t\t\twindow.customElements.define(tag, this);\n\n\t\t\tif (altTag && !customElements.get(altTag)) {\n\t\t\t\tclass oldClassName extends this {}\n\t\t\t\tregisterTag(altTag);\n\t\t\t\twindow.customElements.define(altTag, oldClassName);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an instance of UI5ElementMetadata.js representing this UI5 Web Component's full metadata (its and its parents')\n\t * Note: not to be confused with the \"get metadata()\" method, which returns an object for this class's metadata only\n\t * @public\n\t * @returns {UI5ElementMetadata}\n\t */\n\tstatic getMetadata() {\n\t\tif (this.hasOwnProperty(\"_metadata\")) { // eslint-disable-line\n\t\t\treturn this._metadata;\n\t\t}\n\n\t\tconst metadataObjects = [this.metadata];\n\t\tlet klass = this; // eslint-disable-line\n\t\twhile (klass !== UI5Element) {\n\t\t\tklass = Object.getPrototypeOf(klass);\n\t\t\tmetadataObjects.unshift(klass.metadata);\n\t\t}\n\t\tconst mergedMetadata = merge({}, ...metadataObjects);\n\n\t\tthis._metadata = new UI5ElementMetadata(mergedMetadata);\n\t\treturn this._metadata;\n\t}\n}\n\nexport default UI5Element;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}