{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n// IE11 doesn't support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n  constructor(element) {\n    this.classes = new Set();\n    this.changed = false;\n    this.element = element;\n    const classList = (element.getAttribute('class') || '').split(/\\s+/);\n    for (const cls of classList) {\n      this.classes.add(cls);\n    }\n  }\n  add(cls) {\n    this.classes.add(cls);\n    this.changed = true;\n  }\n  remove(cls) {\n    this.classes.delete(cls);\n    this.changed = true;\n  }\n  commit() {\n    if (this.changed) {\n      let classString = '';\n      this.classes.forEach(cls => classString += cls + ' ');\n      this.element.setAttribute('class', classString);\n    }\n  }\n}\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element's `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive(classInfo => part => {\n  if (!(part instanceof AttributePart) || part instanceof PropertyPart || part.committer.name !== 'class' || part.committer.parts.length > 1) {\n    throw new Error('The `classMap` directive must be used in the `class` attribute ' + 'and must be the only part in the attribute.');\n  }\n  const {\n    committer\n  } = part;\n  const {\n    element\n  } = committer;\n  let previousClasses = previousClassesCache.get(part);\n  if (previousClasses === undefined) {\n    // Write static classes once\n    // Use setAttribute() because className isn't a string on SVG elements\n    element.setAttribute('class', committer.strings.join(' '));\n    previousClassesCache.set(part, previousClasses = new Set());\n  }\n  const classList = element.classList || new ClassList(element);\n  // Remove old classes that no longer apply\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousClasses.forEach(name => {\n    if (!(name in classInfo)) {\n      classList.remove(name);\n      previousClasses.delete(name);\n    }\n  });\n  // Add or remove classes based on their classMap value\n  for (const name in classInfo) {\n    const value = classInfo[name];\n    if (value != previousClasses.has(name)) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      if (value) {\n        classList.add(name);\n        previousClasses.add(name);\n      } else {\n        classList.remove(name);\n        previousClasses.delete(name);\n      }\n    }\n  }\n  if (typeof classList.commit === 'function') {\n    classList.commit();\n  }\n});","map":{"version":3,"names":["AttributePart","directive","PropertyPart","ClassList","constructor","element","classes","Set","changed","classList","getAttribute","split","cls","add","remove","delete","commit","classString","forEach","setAttribute","previousClassesCache","WeakMap","classMap","classInfo","part","committer","name","parts","length","Error","previousClasses","get","undefined","strings","join","set","value","has"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/lit-html/src/directives/class-map.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\n// IE11 doesn't support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n  element: Element;\n  classes: Set<string> = new Set();\n  changed = false;\n\n  constructor(element: Element) {\n    this.element = element;\n    const classList = (element.getAttribute('class') || '').split(/\\s+/);\n    for (const cls of classList) {\n      this.classes.add(cls);\n    }\n  }\n  add(cls: string) {\n    this.classes.add(cls);\n    this.changed = true;\n  }\n\n  remove(cls: string) {\n    this.classes.delete(cls);\n    this.changed = true;\n  }\n\n  commit() {\n    if (this.changed) {\n      let classString = '';\n      this.classes.forEach((cls) => classString += cls + ' ');\n      this.element.setAttribute('class', classString);\n    }\n  }\n}\n\nexport interface ClassInfo {\n  readonly [name: string]: string|boolean|number;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap<Part, Set<string>>();\n\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element's `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo: ClassInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'class' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `classMap` directive must be used in the `class` attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {element} = committer;\n\n  let previousClasses = previousClassesCache.get(part);\n  if (previousClasses === undefined) {\n    // Write static classes once\n    // Use setAttribute() because className isn't a string on SVG elements\n    element.setAttribute('class', committer.strings.join(' '));\n    previousClassesCache.set(part, previousClasses = new Set());\n  }\n\n  const classList =\n      (element.classList || new ClassList(element)) as DOMTokenList | ClassList;\n\n  // Remove old classes that no longer apply\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousClasses.forEach((name) => {\n    if (!(name in classInfo)) {\n      classList.remove(name);\n      previousClasses!.delete(name);\n    }\n  });\n\n  // Add or remove classes based on their classMap value\n  for (const name in classInfo) {\n    const value = classInfo[name];\n    if (value != previousClasses.has(name)) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      if (value) {\n        classList.add(name);\n        previousClasses.add(name);\n      } else {\n        classList.remove(name);\n        previousClasses.delete(name);\n      }\n    }\n  }\n  if (typeof (classList as ClassList).commit === 'function') {\n    (classList as ClassList).commit();\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}