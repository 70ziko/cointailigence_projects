{"ast":null,"code":"import RenderQueue from \"./RenderQueue.js\";\nimport { getAllRegisteredTags } from \"./CustomElementsRegistry.js\";\nimport { isRtlAware } from \"./locale/RTLAwareRegistry.js\";\nconst registeredElements = new Set();\n\n// Queue for invalidated web components\nconst invalidatedWebComponents = new RenderQueue();\nlet renderTaskPromise, renderTaskPromiseResolve;\nlet mutationObserverTimer;\nlet queuePromise;\n\n/**\n * Class that manages the rendering/re-rendering of web components\n * This is always asynchronous\n */\nclass RenderScheduler {\n  constructor() {\n    throw new Error(\"Static class\");\n  }\n\n  /**\n   * Schedules a render task (if not already scheduled) to render the component\n   *\n   * @param webComponent\n   * @returns {Promise}\n   */\n  static async renderDeferred(webComponent) {\n    // Enqueue the web component\n    invalidatedWebComponents.add(webComponent);\n\n    // Schedule a rendering task\n    await RenderScheduler.scheduleRenderTask();\n  }\n\n  /**\n   * Renders a component synchronously\n   *\n   * @param webComponent\n   */\n  static renderImmediately(webComponent) {\n    webComponent._render();\n  }\n\n  /**\n   * Cancels the rendering of a component, added to the queue with renderDeferred\n   *\n   * @param webComponent\n   */\n  static cancelRender(webComponent) {\n    invalidatedWebComponents.remove(webComponent);\n  }\n\n  /**\n   * Schedules a rendering task, if not scheduled already\n   */\n  static async scheduleRenderTask() {\n    if (!queuePromise) {\n      queuePromise = new Promise(resolve => {\n        window.requestAnimationFrame(() => {\n          // Render all components in the queue\n\n          // console.log(`--------------------RENDER TASK START------------------------------`); // eslint-disable-line\n          invalidatedWebComponents.process(component => component._render());\n          // console.log(`--------------------RENDER TASK END------------------------------`); // eslint-disable-line\n\n          // Resolve the promise so that callers of renderDeferred can continue\n          queuePromise = null;\n          resolve();\n\n          // Wait for Mutation observer before the render task is considered finished\n          if (!mutationObserverTimer) {\n            mutationObserverTimer = setTimeout(() => {\n              mutationObserverTimer = undefined;\n              if (invalidatedWebComponents.isEmpty()) {\n                RenderScheduler._resolveTaskPromise();\n              }\n            }, 200);\n          }\n        });\n      });\n    }\n    await queuePromise;\n  }\n\n  /**\n   * return a promise that will be resolved once all invalidated web components are rendered\n   */\n  static whenDOMUpdated() {\n    if (renderTaskPromise) {\n      return renderTaskPromise;\n    }\n    renderTaskPromise = new Promise(resolve => {\n      renderTaskPromiseResolve = resolve;\n      window.requestAnimationFrame(() => {\n        if (invalidatedWebComponents.isEmpty()) {\n          renderTaskPromise = undefined;\n          resolve();\n        }\n      });\n    });\n    return renderTaskPromise;\n  }\n  static whenAllCustomElementsAreDefined() {\n    const definedPromises = getAllRegisteredTags().map(tag => customElements.whenDefined(tag));\n    return Promise.all(definedPromises);\n  }\n  static async whenFinished() {\n    await RenderScheduler.whenAllCustomElementsAreDefined();\n    await RenderScheduler.whenDOMUpdated();\n  }\n  static _resolveTaskPromise() {\n    if (!invalidatedWebComponents.isEmpty()) {\n      // More updates are pending. Resolve will be called again\n      return;\n    }\n    if (renderTaskPromiseResolve) {\n      renderTaskPromiseResolve.call(this);\n      renderTaskPromiseResolve = undefined;\n      renderTaskPromise = undefined;\n    }\n  }\n  static register(element) {\n    registeredElements.add(element);\n  }\n  static deregister(element) {\n    registeredElements.delete(element);\n  }\n\n  /**\n   * Re-renders all UI5 Elements on the page, with the option to specify filters to rerender only some components.\n   *\n   * Usage:\n   * reRenderAllUI5Elements() -> rerenders all components\n   * reRenderAllUI5Elements({tag: \"ui5-button\"}) -> re-renders only instances of ui5-button\n   * reRenderAllUI5Elements({rtlAware: true}) -> re-renders only rtlAware components\n   * reRenderAllUI5Elements({languageAware: true}) -> re-renders only languageAware components\n   * reRenderAllUI5Elements({rtlAware: true, languageAware: true}) -> re-renders components that are rtlAware or languageAware\n   * etc...\n   *\n   * @public\n   * @param {Object|undefined} filters - Object with keys that can be \"rtlAware\" or \"languageAware\"\n   */\n  static reRenderAllUI5Elements(filters) {\n    registeredElements.forEach(element => {\n      const tag = element.constructor.getMetadata().getTag();\n      const rtlAware = isRtlAware(element.constructor);\n      const languageAware = element.constructor.getMetadata().isLanguageAware();\n      if (!filters || filters.tag === tag || filters.rtlAware && rtlAware || filters.languageAware && languageAware) {\n        RenderScheduler.renderDeferred(element);\n      }\n    });\n  }\n}\nexport default RenderScheduler;","map":{"version":3,"names":["RenderQueue","getAllRegisteredTags","isRtlAware","registeredElements","Set","invalidatedWebComponents","renderTaskPromise","renderTaskPromiseResolve","mutationObserverTimer","queuePromise","RenderScheduler","constructor","Error","renderDeferred","webComponent","add","scheduleRenderTask","renderImmediately","_render","cancelRender","remove","Promise","resolve","window","requestAnimationFrame","process","component","setTimeout","undefined","isEmpty","_resolveTaskPromise","whenDOMUpdated","whenAllCustomElementsAreDefined","definedPromises","map","tag","customElements","whenDefined","all","whenFinished","call","register","element","deregister","delete","reRenderAllUI5Elements","filters","forEach","getMetadata","getTag","rtlAware","languageAware","isLanguageAware"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/@ui5/webcomponents-base/dist/RenderScheduler.js"],"sourcesContent":["import RenderQueue from \"./RenderQueue.js\";\nimport { getAllRegisteredTags } from \"./CustomElementsRegistry.js\";\nimport { isRtlAware } from \"./locale/RTLAwareRegistry.js\";\n\nconst registeredElements = new Set();\n\n// Queue for invalidated web components\nconst invalidatedWebComponents = new RenderQueue();\n\nlet renderTaskPromise,\n\trenderTaskPromiseResolve;\n\nlet mutationObserverTimer;\n\nlet queuePromise;\n\n/**\n * Class that manages the rendering/re-rendering of web components\n * This is always asynchronous\n */\nclass RenderScheduler {\n\tconstructor() {\n\t\tthrow new Error(\"Static class\");\n\t}\n\n\t/**\n\t * Schedules a render task (if not already scheduled) to render the component\n\t *\n\t * @param webComponent\n\t * @returns {Promise}\n\t */\n\tstatic async renderDeferred(webComponent) {\n\t\t// Enqueue the web component\n\t\tinvalidatedWebComponents.add(webComponent);\n\n\t\t// Schedule a rendering task\n\t\tawait RenderScheduler.scheduleRenderTask();\n\t}\n\n\t/**\n\t * Renders a component synchronously\n\t *\n\t * @param webComponent\n\t */\n\tstatic renderImmediately(webComponent) {\n\t\twebComponent._render();\n\t}\n\n\t/**\n\t * Cancels the rendering of a component, added to the queue with renderDeferred\n\t *\n\t * @param webComponent\n\t */\n\tstatic cancelRender(webComponent) {\n\t\tinvalidatedWebComponents.remove(webComponent);\n\t}\n\n\t/**\n\t * Schedules a rendering task, if not scheduled already\n\t */\n\tstatic async scheduleRenderTask() {\n\t\tif (!queuePromise) {\n\t\t\tqueuePromise = new Promise(resolve => {\n\t\t\t\twindow.requestAnimationFrame(() => {\n\t\t\t\t\t// Render all components in the queue\n\n\t\t\t\t\t// console.log(`--------------------RENDER TASK START------------------------------`); // eslint-disable-line\n\t\t\t\t\tinvalidatedWebComponents.process(component => component._render());\n\t\t\t\t\t// console.log(`--------------------RENDER TASK END------------------------------`); // eslint-disable-line\n\n\t\t\t\t\t// Resolve the promise so that callers of renderDeferred can continue\n\t\t\t\t\tqueuePromise = null;\n\t\t\t\t\tresolve();\n\n\t\t\t\t\t// Wait for Mutation observer before the render task is considered finished\n\t\t\t\t\tif (!mutationObserverTimer) {\n\t\t\t\t\t\tmutationObserverTimer = setTimeout(() => {\n\t\t\t\t\t\t\tmutationObserverTimer = undefined;\n\t\t\t\t\t\t\tif (invalidatedWebComponents.isEmpty()) {\n\t\t\t\t\t\t\t\tRenderScheduler._resolveTaskPromise();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 200);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tawait queuePromise;\n\t}\n\n\t/**\n\t * return a promise that will be resolved once all invalidated web components are rendered\n\t */\n\tstatic whenDOMUpdated() {\n\t\tif (renderTaskPromise) {\n\t\t\treturn renderTaskPromise;\n\t\t}\n\n\t\trenderTaskPromise = new Promise(resolve => {\n\t\t\trenderTaskPromiseResolve = resolve;\n\t\t\twindow.requestAnimationFrame(() => {\n\t\t\t\tif (invalidatedWebComponents.isEmpty()) {\n\t\t\t\t\trenderTaskPromise = undefined;\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn renderTaskPromise;\n\t}\n\n\tstatic whenAllCustomElementsAreDefined() {\n\t\tconst definedPromises = getAllRegisteredTags().map(tag => customElements.whenDefined(tag));\n\t\treturn Promise.all(definedPromises);\n\t}\n\n\tstatic async whenFinished() {\n\t\tawait RenderScheduler.whenAllCustomElementsAreDefined();\n\t\tawait RenderScheduler.whenDOMUpdated();\n\t}\n\n\tstatic _resolveTaskPromise() {\n\t\tif (!invalidatedWebComponents.isEmpty()) {\n\t\t\t// More updates are pending. Resolve will be called again\n\t\t\treturn;\n\t\t}\n\n\t\tif (renderTaskPromiseResolve) {\n\t\t\trenderTaskPromiseResolve.call(this);\n\t\t\trenderTaskPromiseResolve = undefined;\n\t\t\trenderTaskPromise = undefined;\n\t\t}\n\t}\n\n\tstatic register(element) {\n\t\tregisteredElements.add(element);\n\t}\n\n\tstatic deregister(element) {\n\t\tregisteredElements.delete(element);\n\t}\n\n\t/**\n\t * Re-renders all UI5 Elements on the page, with the option to specify filters to rerender only some components.\n\t *\n\t * Usage:\n\t * reRenderAllUI5Elements() -> rerenders all components\n\t * reRenderAllUI5Elements({tag: \"ui5-button\"}) -> re-renders only instances of ui5-button\n\t * reRenderAllUI5Elements({rtlAware: true}) -> re-renders only rtlAware components\n\t * reRenderAllUI5Elements({languageAware: true}) -> re-renders only languageAware components\n\t * reRenderAllUI5Elements({rtlAware: true, languageAware: true}) -> re-renders components that are rtlAware or languageAware\n\t * etc...\n\t *\n\t * @public\n\t * @param {Object|undefined} filters - Object with keys that can be \"rtlAware\" or \"languageAware\"\n\t */\n\tstatic reRenderAllUI5Elements(filters) {\n\t\tregisteredElements.forEach(element => {\n\t\t\tconst tag = element.constructor.getMetadata().getTag();\n\t\t\tconst rtlAware = isRtlAware(element.constructor);\n\t\t\tconst languageAware = element.constructor.getMetadata().isLanguageAware();\n\t\t\tif (!filters || (filters.tag === tag) || (filters.rtlAware && rtlAware) || (filters.languageAware && languageAware)) {\n\t\t\t\tRenderScheduler.renderDeferred(element);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default RenderScheduler;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}