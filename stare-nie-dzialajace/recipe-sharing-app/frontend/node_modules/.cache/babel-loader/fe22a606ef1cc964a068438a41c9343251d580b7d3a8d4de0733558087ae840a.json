{"ast":null,"code":"import findNodeOwner from \"./findNodeOwner.js\";\nconst getEffectiveAriaLabelText = el => {\n  if (!el.ariaLabelledby) {\n    if (el.ariaLabel) {\n      return el.ariaLabel;\n    }\n    return undefined;\n  }\n  return getAriaLabelledByTexts(el);\n};\n\n/**\n *\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related texts\n * @param {HTMLElement} ownerDocument (Optional) Defines the HTMLElement(might document or custom element) where the you want to search for the texts.\n * @param {String} readyIds (Optional) Defines a string of elements ids. The text of these elements will be returned. If used you should provide either el or ownerDocument\n */\nconst getAriaLabelledByTexts = (el, ownerDocument, readyIds = \"\") => {\n  const ids = readyIds && readyIds.split(\" \") || el.ariaLabelledby.split(\" \");\n  const owner = ownerDocument || findNodeOwner(el);\n  let result = \"\";\n  ids.forEach((elementId, index) => {\n    const element = owner.querySelector(`[id='${elementId}']`);\n    result += `${element ? element.textContent : \"\"}`;\n    if (index < ids.length - 1) {\n      result += \" \";\n    }\n  });\n  return result;\n};\nexport { getEffectiveAriaLabelText, getAriaLabelledByTexts };","map":{"version":3,"names":["findNodeOwner","getEffectiveAriaLabelText","el","ariaLabelledby","ariaLabel","undefined","getAriaLabelledByTexts","ownerDocument","readyIds","ids","split","owner","result","forEach","elementId","index","element","querySelector","textContent","length"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/@ui5/webcomponents-base/dist/util/AriaLabelHelper.js"],"sourcesContent":["import findNodeOwner from \"./findNodeOwner.js\";\n\nconst getEffectiveAriaLabelText = el => {\n\tif (!el.ariaLabelledby) {\n\t\tif (el.ariaLabel) {\n\t\t\treturn el.ariaLabel;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\treturn getAriaLabelledByTexts(el);\n};\n\n/**\n *\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related texts\n * @param {HTMLElement} ownerDocument (Optional) Defines the HTMLElement(might document or custom element) where the you want to search for the texts.\n * @param {String} readyIds (Optional) Defines a string of elements ids. The text of these elements will be returned. If used you should provide either el or ownerDocument\n */\nconst getAriaLabelledByTexts = (el, ownerDocument, readyIds = \"\") => {\n\tconst ids = (readyIds && readyIds.split(\" \")) || el.ariaLabelledby.split(\" \");\n\tconst owner = ownerDocument || findNodeOwner(el);\n\tlet result = \"\";\n\n\tids.forEach((elementId, index) => {\n\t\tconst element = owner.querySelector(`[id='${elementId}']`);\n\t\tresult += `${element ? element.textContent : \"\"}`;\n\n\t\tif (index < ids.length - 1) {\n\t\t\tresult += \" \";\n\t\t}\n\t});\n\n\treturn result;\n};\n\nexport {\n\tgetEffectiveAriaLabelText,\n\tgetAriaLabelledByTexts,\n};\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,oBAAoB;AAE9C,MAAMC,yBAAyB,GAAGC,EAAE,IAAI;EACvC,IAAI,CAACA,EAAE,CAACC,cAAc,EAAE;IACvB,IAAID,EAAE,CAACE,SAAS,EAAE;MACjB,OAAOF,EAAE,CAACE,SAAS;IACpB;IAEA,OAAOC,SAAS;EACjB;EAEA,OAAOC,sBAAsB,CAACJ,EAAE,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,sBAAsB,GAAGA,CAACJ,EAAE,EAAEK,aAAa,EAAEC,QAAQ,GAAG,EAAE,KAAK;EACpE,MAAMC,GAAG,GAAID,QAAQ,IAAIA,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC,IAAKR,EAAE,CAACC,cAAc,CAACO,KAAK,CAAC,GAAG,CAAC;EAC7E,MAAMC,KAAK,GAAGJ,aAAa,IAAIP,aAAa,CAACE,EAAE,CAAC;EAChD,IAAIU,MAAM,GAAG,EAAE;EAEfH,GAAG,CAACI,OAAO,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;IACjC,MAAMC,OAAO,GAAGL,KAAK,CAACM,aAAa,CAAE,QAAOH,SAAU,IAAG,CAAC;IAC1DF,MAAM,IAAK,GAAEI,OAAO,GAAGA,OAAO,CAACE,WAAW,GAAG,EAAG,EAAC;IAEjD,IAAIH,KAAK,GAAGN,GAAG,CAACU,MAAM,GAAG,CAAC,EAAE;MAC3BP,MAAM,IAAI,GAAG;IACd;EACD,CAAC,CAAC;EAEF,OAAOA,MAAM;AACd,CAAC;AAED,SACCX,yBAAyB,EACzBK,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}