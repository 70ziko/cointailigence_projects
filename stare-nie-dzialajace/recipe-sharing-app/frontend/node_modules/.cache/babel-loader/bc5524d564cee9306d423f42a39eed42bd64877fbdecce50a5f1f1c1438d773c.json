{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(value => part => {\n  if (!(part instanceof NodePart)) {\n    throw new Error('unsafeHTML can only be used in text bindings');\n  }\n  const previousValue = previousValues.get(part);\n  if (previousValue !== undefined && isPrimitive(value) && value === previousValue.value && part.value === previousValue.fragment) {\n    return;\n  }\n  const template = document.createElement('template');\n  template.innerHTML = value; // innerHTML casts to string internally\n  const fragment = document.importNode(template.content, true);\n  part.setValue(fragment);\n  previousValues.set(part, {\n    value,\n    fragment\n  });\n});","map":{"version":3,"names":["isPrimitive","directive","NodePart","previousValues","WeakMap","unsafeHTML","value","part","Error","previousValue","get","undefined","fragment","template","document","createElement","innerHTML","importNode","content","setValue","set"],"sources":["/home/paris/projekty/haergi/feng/workspace/recipe-sharing-app/frontend/node_modules/lit-html/src/directives/unsafe-html.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isPrimitive} from '../lib/parts.js';\nimport {directive, NodePart, Part} from '../lit-html.js';\n\ninterface PreviousValue {\n  readonly value: unknown;\n  readonly fragment: DocumentFragment;\n}\n\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap<NodePart, PreviousValue>();\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value: unknown) => (part: Part): void => {\n  if (!(part instanceof NodePart)) {\n    throw new Error('unsafeHTML can only be used in text bindings');\n  }\n\n  const previousValue = previousValues.get(part);\n\n  if (previousValue !== undefined && isPrimitive(value) &&\n      value === previousValue.value && part.value === previousValue.fragment) {\n    return;\n  }\n\n  const template = document.createElement('template');\n  template.innerHTML = value as string;  // innerHTML casts to string internally\n  const fragment = document.importNode(template.content, true);\n  part.setValue(fragment);\n  previousValues.set(part, {value, fragment});\n});\n"],"mappings":"AAAA;;;;;;;;;;;;;AAcA,SAAQA,WAAW,QAAO,iBAAiB;AAC3C,SAAQC,SAAS,EAAEC,QAAQ,QAAa,gBAAgB;AAOxD;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,IAAIC,OAAO,EAA2B;AAE7D;;;;;;;AAOA,OAAO,MAAMC,UAAU,GAAGJ,SAAS,CAAEK,KAAc,IAAMC,IAAU,IAAU;EAC3E,IAAI,EAAEA,IAAI,YAAYL,QAAQ,CAAC,EAAE;IAC/B,MAAM,IAAIM,KAAK,CAAC,8CAA8C,CAAC;;EAGjE,MAAMC,aAAa,GAAGN,cAAc,CAACO,GAAG,CAACH,IAAI,CAAC;EAE9C,IAAIE,aAAa,KAAKE,SAAS,IAAIX,WAAW,CAACM,KAAK,CAAC,IACjDA,KAAK,KAAKG,aAAa,CAACH,KAAK,IAAIC,IAAI,CAACD,KAAK,KAAKG,aAAa,CAACG,QAAQ,EAAE;IAC1E;;EAGF,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;EACnDF,QAAQ,CAACG,SAAS,GAAGV,KAAe,CAAC,CAAE;EACvC,MAAMM,QAAQ,GAAGE,QAAQ,CAACG,UAAU,CAACJ,QAAQ,CAACK,OAAO,EAAE,IAAI,CAAC;EAC5DX,IAAI,CAACY,QAAQ,CAACP,QAAQ,CAAC;EACvBT,cAAc,CAACiB,GAAG,CAACb,IAAI,EAAE;IAACD,KAAK;IAAEM;EAAQ,CAAC,CAAC;AAC7C,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}