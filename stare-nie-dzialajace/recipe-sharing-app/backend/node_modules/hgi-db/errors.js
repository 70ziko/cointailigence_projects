const typeckecker = require('typechecker');
const types = require('./types')

module.exports.dbNotConnectedError = (lowdb) => {
    if (!lowdb.data) {
        console.log('[hgi-db] error: Lowdb not connected')
        throw new Error('Lowdb not connected.')
    }
}

module.exports.fieldDoesntExistError = (fields, field) => {
    if (!fields[field]) {
        console.log(`[hgi-db] error: field ${field} doesn't exist`)
        throw new Error(`field ${field} doesn't exist`)
    }
}

module.exports.incorrectFieldTypesError = (fields, json) => {
    Object.keys(json).forEach((field) => {
        const providedValue = json[field]
        const requiredType = fields[field].type
        const parsedType = requiredType.replaceAll('?', '')

        //check if required type is an accepted type
        if (!types.hasOwnProperty(parsedType)) {
            console.log(`[hgi-db] error: ${parsedType} is not an accepted type`)
            throw new Error(`${parsedType} is not an accepted type`)
        }

        //check if value is and can be null or undefined
        if (typeckecker.isNullish(providedValue)) {
            if (!requiredType.includes("?")) {
                console.log(`[hgi-db] error: field ${field} cannot be null or undefined`)
                throw new Error(`Field ${field} cannot be null or undefined`)
            }
            return
        }

        //check if value is correct type with typechecker
        if (types[parsedType](providedValue)) return

        const providedType = typeckecker.getType(providedValue)
        console.log(`[hgi-db] error: ${field} must be ${requiredType}, is ${providedType}`)
        throw new Error(`${field} must be ${requiredType}, is ${providedType}`)
    })
}

module.exports.keyDoesntExistError = (lowdb, key) => {
    if (!lowdb.data.hasOwnProperty(key)) {
        console.log(`[hgi-db] error: key ${key} doesn't exist`)
        throw new Error(`key ${key} doesn't exist`)
    }
}

module.exports.keyExistsError = (lowdb, key) => {
    if (lowdb.data.hasOwnProperty(key)) {
        console.log(`[hgi-db] error: key ${key} already exists`)
        throw new Error(`key ${key} already exists`)
    }
}