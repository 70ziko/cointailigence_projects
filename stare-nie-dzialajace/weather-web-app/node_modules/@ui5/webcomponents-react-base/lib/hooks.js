import { useRef, useMemo, useEffect, useState } from 'react';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _toArray from '@babel/runtime/helpers/toArray';
import { getI18nBundle, fetchI18nBundle } from '@ui5/webcomponents-base/dist/i18nBundle';
import { Device } from '@ui5/webcomponents-react-base/lib/Device';

var useConsolidatedRef = function useConsolidatedRef(ref) {
  var localRef = useRef(null);
  var consolidatedRef = useMemo(function () {
    if (!ref || typeof ref === 'function') {
      return localRef;
    }

    return ref;
  }, [ref]);
  useEffect(function () {
    if (typeof ref === 'function') {
      // @ts-ignore
      ref(consolidatedRef.current);
    }
  }, [consolidatedRef.current]);
  return consolidatedRef;
};

var resolveTranslations = function resolveTranslations(bundle, texts) {
  return texts.map(function (text) {
    if (Array.isArray(text)) {
      var _text = _toArray(text),
          key = _text[0],
          replacements = _text.slice(1);

      return bundle.getText(key, replacements);
    }

    return bundle.getText(text);
  });
};

var useI18nText = function useI18nText(bundleName) {
  for (var _len = arguments.length, texts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    texts[_key - 1] = arguments[_key];
  }

  var i18nBundle = getI18nBundle(bundleName);

  var _useState = useState(resolveTranslations(i18nBundle, texts)),
      _useState2 = _slicedToArray(_useState, 2),
      translations = _useState2[0],
      setTranslations = _useState2[1];

  useEffect(function () {
    var fetchAndLoadBundle = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return fetchI18nBundle(bundleName);

              case 2:
                setTranslations(function (prev) {
                  var next = resolveTranslations(i18nBundle, texts);

                  if (prev.length === next.length && prev.every(function (translation, index) {
                    return next[index] === translation;
                  })) {
                    return prev;
                  }

                  return next;
                });

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function fetchAndLoadBundle() {
        return _ref.apply(this, arguments);
      };
    }();

    fetchAndLoadBundle();
  }, [fetchI18nBundle, bundleName, texts]);
  return translations;
};

var PROP_WHITELIST = /^(aria-|data-|id$|on[A-Z])/;
var usePassThroughHtmlProps = function usePassThroughHtmlProps(props) {
  var propBlackList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var componentPropBlacklist = new Set(propBlackList);
  var returnVal = {};

  for (var name in props) {
    if (PROP_WHITELIST.test(name) && !componentPropBlacklist.has(name)) {
      returnVal[name] = props[name];
    }
  }

  return returnVal;
};

var useViewportRange = function useViewportRange(rangeSet) {
  var _useState = useState(Device.media.getCurrentRange(rangeSet, window.innerWidth).name),
      _useState2 = _slicedToArray(_useState, 2),
      currentRange = _useState2[0],
      setCurrentRange = _useState2[1];

  var isMounted = useRef(true);
  useEffect(function () {
    var handler = function handler(_ref) {
      var range = _ref.name;

      if (isMounted.current === true) {
        setCurrentRange(range);
      }
    };

    Device.media.attachHandler(handler, null, 'StdExt');
    return function () {
      isMounted.current = false;
      Device.resize.detachHandler(handler, null);
    };
  }, [setCurrentRange, isMounted]);
  return currentRange;
};

export { useConsolidatedRef, useI18nText, usePassThroughHtmlProps, useViewportRange };
//# sourceMappingURL=hooks.js.map
