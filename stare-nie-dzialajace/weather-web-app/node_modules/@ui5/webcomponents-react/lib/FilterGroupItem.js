import _extends from '@babel/runtime/helpers/extends';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { BusyIndicator } from '@ui5/webcomponents-react/lib/BusyIndicator';
import { BusyIndicatorSize } from '@ui5/webcomponents-react/lib/BusyIndicatorSize';
import { FlexBox } from '@ui5/webcomponents-react/lib/FlexBox';
import { Label } from '@ui5/webcomponents-react/lib/Label';
import React, { forwardRef } from 'react';

var styles = {
  filterItem: {
    width: 'var(--_ui5_input_width)',
    marginRight: '1rem',
    marginBottom: '1rem'
  },
  filterItemDialog: {
    flexGrow: 1,
    overflow: 'hidden'
  },
  innerFilterItemContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'start'
  },
  innerFilterItemContainerDialog: {
    display: 'grid',
    gridTemplateColumns: '20% calc(80% - 1rem)',
    '@media(max-width:700px)': {
      gridTemplateColumns: '100%'
    },
    gridTemplateRows: 'auto',
    gridRowGap: '0px',
    gridColumnGap: '1rem',
    '& :first-child': {
      maxWidth: '100%',
      placeSelf: 'center end',
      '@media(max-width:700px)': {
        placeSelf: 'center start'
      }
    },
    '& :last-child': {
      placeSelf: 'center auto',
      width: '100%'
    }
  },
  loadingContainer: {
    display: 'flex',
    width: '100%',
    height: '1.625rem',
    justifyContent: 'center'
  }
};

var useStyles = createComponentStyles(styles, {
  name: 'FilterGroupItem'
});
var emptyObject = {};
var FilterGroupItem = /*#__PURE__*/forwardRef(function (props, ref) {
  var classes = useStyles();
  var groupName = props.groupName,
      considerGroupName = props.considerGroupName,
      label = props.label,
      labelTooltip = props.labelTooltip,
      required = props.required,
      visible = props.visible,
      visibleInFilterBar = props.visibleInFilterBar,
      children = props.children,
      style = props.style,
      loading = props.loading,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      inFB = props.inFB;
  var passThroughProps = usePassThroughHtmlProps(props);
  var styleClasses = StyleClassHelper.of(inFB ? classes.filterItem : classes.filterItemDialog);

  if (className) {
    styleClasses.put(className);
  }

  if (!required && (!visible || inFB && !visibleInFilterBar)) return null;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    title: tooltip,
    slot: slot
  }, passThroughProps, {
    className: styleClasses.valueOf(),
    style: inFB ? style : emptyObject
  }), /*#__PURE__*/React.createElement("div", {
    className: inFB ? classes.innerFilterItemContainer : classes.innerFilterItemContainerDialog
  }, /*#__PURE__*/React.createElement(FlexBox, null, /*#__PURE__*/React.createElement(Label, {
    tooltip: labelTooltip !== null && labelTooltip !== void 0 ? labelTooltip : label,
    required: required
  }, "".concat(considerGroupName && groupName !== 'default' ? "".concat(groupName, ": ") : '', "\n          ").concat(label))), loading ? /*#__PURE__*/React.createElement(BusyIndicator, {
    className: classes.loadingContainer,
    active: true,
    size: BusyIndicatorSize.Small
  }) : children));
});
FilterGroupItem.displayName = 'FilterGroupItem';
FilterGroupItem.defaultProps = {
  groupName: 'default',
  visible: true,
  required: false,
  label: ''
};

export { FilterGroupItem };
//# sourceMappingURL=FilterGroupItem.js.map
