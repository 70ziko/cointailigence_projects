import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _wrapRegExp from '@babel/runtime/helpers/wrapRegExp';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { useViewportRange } from '@ui5/webcomponents-react-base/lib/useViewportRange';
import { GridPosition } from '@ui5/webcomponents-react/lib/GridPosition';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import React, { forwardRef, useCallback, Children } from 'react';

var styles = {
  grid: {
    display: 'grid',
    gridTemplateColumns: "repeat(12, 1fr)"
  },
  gridSpan1: {
    gridColumn: 'span 1'
  },
  gridSpan2: {
    gridColumn: 'span 2'
  },
  gridSpan3: {
    gridColumn: 'span 3'
  },
  gridSpan4: {
    gridColumn: 'span 4'
  },
  gridSpan5: {
    gridColumn: 'span 5'
  },
  gridSpan6: {
    gridColumn: 'span 6'
  },
  gridSpan7: {
    gridColumn: 'span 7'
  },
  gridSpan8: {
    gridColumn: 'span 8'
  },
  gridSpan9: {
    gridColumn: 'span 9'
  },
  gridSpan10: {
    gridColumn: 'span 10'
  },
  gridSpan11: {
    gridColumn: 'span 11'
  },
  gridSpan12: {
    gridColumn: 'span 12'
  },
  positionCenter: {
    marginLeft: 'auto',
    marginRight: 'auto'
  },
  positionRight: {
    marginLeft: 'auto',
    marginRight: 0
  }
};

var INDENT_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([0-9]|1[0-2]))? ?(L([0-9]|1[0-2]))? ?(M([0-9]|1[0-2]))? ?(S([0-9]|1[0-2]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var SPAN_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([1-9]|1[0-2]))? ?(L([1-9]|1[0-2]))? ?(M([1-9]|1[0-2]))? ?(S([1-9]|1[0-2]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var DefaultSpanMap = new Map();
DefaultSpanMap.set('Phone', 1);
DefaultSpanMap.set('Tablet', 2);
DefaultSpanMap.set('Desktop', 4);
DefaultSpanMap.set('LargeDesktop', 4);
var DefaultIndentMap = new Map();
DefaultIndentMap.set('Phone', 0);
DefaultIndentMap.set('Tablet', 0);
DefaultIndentMap.set('Desktop', 0);
DefaultIndentMap.set('LargeDesktop', 0);

var getSpanFromString = function getSpanFromString(span, currentRange) {
  var _spanConfig$groups$cu;

  var spanConfig = SPAN_PATTERN.exec(span);
  return (_spanConfig$groups$cu = spanConfig === null || spanConfig === void 0 ? void 0 : spanConfig.groups[currentRange]) !== null && _spanConfig$groups$cu !== void 0 ? _spanConfig$groups$cu : DefaultSpanMap.get(currentRange);
};

var getIndentFromString = function getIndentFromString(indent, currentRange) {
  var _indentConfig$groups$;

  var indentConfig = INDENT_PATTERN.exec(indent);
  return (_indentConfig$groups$ = indentConfig === null || indentConfig === void 0 ? void 0 : indentConfig.groups[currentRange]) !== null && _indentConfig$groups$ !== void 0 ? _indentConfig$groups$ : DefaultIndentMap.get(currentRange);
};

var useStyles = createComponentStyles(styles, {
  name: 'Grid'
});
var Grid = /*#__PURE__*/forwardRef(function (props, ref) {
  var position = props.position,
      children = props.children,
      _props$hSpacing = props.hSpacing,
      hSpacing = _props$hSpacing === void 0 ? '1rem' : _props$hSpacing,
      _props$vSpacing = props.vSpacing,
      vSpacing = _props$vSpacing === void 0 ? '1rem' : _props$vSpacing,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      _props$defaultIndent = props.defaultIndent,
      defaultIndent = _props$defaultIndent === void 0 ? 'XL0 L0 M0 S0' : _props$defaultIndent,
      _props$defaultSpan = props.defaultSpan,
      defaultSpan = _props$defaultSpan === void 0 ? 'XL3 L3 M6 S12' : _props$defaultSpan;
  var classes = useStyles();
  var currentRange = useViewportRange('StdExt');
  var gridClasses = StyleClassHelper.of(classes.grid);

  if (GridPosition.Center === position) {
    gridClasses.put(classes.positionCenter);
  }

  if (GridPosition.Right === position) {
    gridClasses.put(classes.positionRight);
  }

  if (className) {
    gridClasses.put(className);
  }

  var renderGridElements = useCallback(function (child) {
    var _child$props$dataLay, _child$props$dataLay2;

    if (!child) return null;
    var childSpan = getSpanFromString((_child$props$dataLay = child.props['data-layout-span']) !== null && _child$props$dataLay !== void 0 ? _child$props$dataLay : defaultSpan, currentRange);
    var childClass = classes["gridSpan".concat(childSpan)];
    var childrenWithGridLayout = [/*#__PURE__*/React.createElement("div", {
      className: childClass
    }, child)];
    var indentSpan = getIndentFromString((_child$props$dataLay2 = child.props['data-layout-indent']) !== null && _child$props$dataLay2 !== void 0 ? _child$props$dataLay2 : defaultIndent, currentRange);

    if (indentSpan && indentSpan > 0) {
      childrenWithGridLayout.unshift( /*#__PURE__*/React.createElement("span", {
        className: classes["gridSpan".concat(indentSpan)]
      }));
    }

    return childrenWithGridLayout;
  }, [currentRange, defaultSpan, defaultIndent, classes]);
  var passThroughProps = usePassThroughHtmlProps(props);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: gridClasses.valueOf(),
    style: _objectSpread({
      gridRowGap: vSpacing,
      gridColumnGap: hSpacing
    }, style),
    title: tooltip,
    slot: slot
  }, passThroughProps), Children.map(children, renderGridElements));
});
Grid.displayName = 'Grid';

export { Grid };
//# sourceMappingURL=Grid.js.map
