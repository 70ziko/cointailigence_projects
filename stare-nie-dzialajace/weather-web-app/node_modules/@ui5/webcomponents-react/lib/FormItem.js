import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { FlexBox } from '@ui5/webcomponents-react/lib/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/lib/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/lib/FlexBoxDirection';
import { Label } from '@ui5/webcomponents-react/lib/Label';
import React, { isValidElement, cloneElement } from 'react';

var useStyles = createComponentStyles({
  label: {
    gridColumnEnd: 'span var(--ui5wcr_form_label_span)',
    justifySelf: 'var(--ui5wcr_form_label_text_align)',
    textAlign: 'var(--ui5wcr_form_label_text_align)'
  },
  content: {
    gridColumnEnd: 'span var(--ui5wcr_form_content_span)'
  }
}, {
  name: 'FormItem'
});

var renderLabel = function renderLabel(label, classes, styles) {
  if (typeof label === 'string') {
    return /*#__PURE__*/React.createElement(Label, {
      className: classes.label,
      style: styles,
      wrap: true
    }, label ? "".concat(label, ":") : '');
  }

  if ( /*#__PURE__*/isValidElement(label)) {
    var _props$wrap, _props$className;

    return /*#__PURE__*/cloneElement(label, {
      wrap: (_props$wrap = label.props.wrap) !== null && _props$wrap !== void 0 ? _props$wrap : true,
      className: "".concat(classes.label, " ").concat((_props$className = label.props.className) !== null && _props$className !== void 0 ? _props$className : ''),
      style: _objectSpread({
        gridColumnStart: styles.gridColumnStart,
        gridRowStart: styles.gridRowStart
      }, label.props.style || {})
    }, label.props.children ? // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    "".concat(label.props.children, ":") : '');
  }

  return null;
};

var FormItem = function FormItem(props) {
  var _ref = props,
      label = _ref.label,
      children = _ref.children,
      columnIndex = _ref.columnIndex,
      rowIndex = _ref.rowIndex,
      labelSpan = _ref.labelSpan;
  var classes = useStyles();
  var gridColumnStart = (columnIndex !== null && columnIndex !== void 0 ? columnIndex : 0) * 12 + 1;
  var gridRowStart = rowIndex !== null && rowIndex !== void 0 ? rowIndex : 0;
  var contentGridColumnStart = columnIndex != null ? labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan !== null && labelSpan !== void 0 ? labelSpan : 0) : undefined;

  if (labelSpan === 12) {
    return /*#__PURE__*/React.createElement(FlexBox, {
      direction: FlexBoxDirection.Column,
      alignItems: FlexBoxAlignItems.Start,
      style: {
        gridColumnStart: gridColumnStart,
        gridRowStart: gridRowStart,
        gridColumnEnd: 'span 12',
        placeItems: 'flex-start'
      }
    }, renderLabel(label, classes, {}), children);
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, renderLabel(label, classes, {
    gridColumnStart: gridColumnStart,
    gridRowStart: gridRowStart
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.content,
    style: {
      gridColumnStart: contentGridColumnStart,
      gridRowStart: labelSpan === 12 ? gridRowStart + 1 : gridRowStart
    }
  }, children));
};

FormItem.displayName = 'FormItem';

export { FormItem };
//# sourceMappingURL=FormItem.js.map
