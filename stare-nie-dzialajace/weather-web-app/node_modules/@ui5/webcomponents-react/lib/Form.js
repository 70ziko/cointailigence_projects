import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { Device } from '@ui5/webcomponents-react-base/lib/Device';
import { useConsolidatedRef, usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/hooks';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { Title } from '@ui5/webcomponents-react/lib/Title';
import { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';
import React, { forwardRef, useState, useRef, useEffect, useMemo, Children, cloneElement } from 'react';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var styles = {
  form: {
    display: 'grid',
    alignItems: 'center',
    rowGap: '0.25rem',
    columnGap: '0.5rem',
    gridTemplateColumns: "repeat(12, 1fr)",
    '--ui5wcr_form_full_span': 'span 12',
    '--ui5wcr_form_label_text_align': 'end',
    '&[data-columns="1"]': {},
    '&[data-columns="2"]': {
      gridTemplateColumns: "repeat(24, 1fr)",
      '--ui5wcr_form_full_span': 'span 24'
    },
    '&[data-columns="3"]': {
      gridTemplateColumns: "repeat(36, 1fr)",
      '--ui5wcr_form_full_span': 'span 36'
    },
    '&[data-columns="4"]': {
      gridTemplateColumns: "repeat(48, 1fr)",
      '--ui5wcr_form_full_span': 'span 48'
    },
    '&[data-columns="5"]': {
      gridTemplateColumns: "repeat(60, 1fr)",
      '--ui5wcr_form_full_span': 'span 60'
    },
    '&[data-columns="6"]': {
      gridTemplateColumns: "repeat(72, 1fr)",
      '--ui5wcr_form_full_span': 'span 72'
    },
    '&[data-columns="7"]': {
      gridTemplateColumns: "repeat(84, 1fr)",
      '--ui5wcr_form_full_span': 'span 84'
    },
    '&[data-columns="8"]': {
      gridTemplateColumns: "repeat(96, 1fr)",
      '--ui5wcr_form_full_span': 'span 96'
    },
    '&[data-columns="9"]': {
      gridTemplateColumns: "repeat(108, 1fr)",
      '--ui5wcr_form_full_span': 'span 108'
    },
    '&[data-columns="10"]': {
      gridTemplateColumns: "repeat(120, 1fr)",
      '--ui5wcr_form_full_span': 'span 120'
    },
    '&[data-columns="11"]': {
      gridTemplateColumns: "repeat(132, 1fr)",
      '--ui5wcr_form_full_span': 'span 132'
    },
    '&[data-columns="12"]': {
      gridTemplateColumns: "repeat(144, 1fr)",
      '--ui5wcr_form_full_span': 'span 144'
    }
  },
  formTitle: {
    borderBottom: "1px solid ".concat(ThemingParameters.sapGroup_TitleBorderColor),
    marginBottom: '1.75rem',
    gridColumn: 'var(--ui5wcr_form_full_span)'
  }
};

var useStyles = createComponentStyles(styles, {
  name: 'Form'
});
var Form = /*#__PURE__*/forwardRef(function (props, ref) {
  var title = props.title,
      children = props.children,
      className = props.className,
      slot = props.slot,
      style = props.style,
      tooltip = props.tooltip,
      _props$columnsS = props.columnsS,
      columnsS = _props$columnsS === void 0 ? 1 : _props$columnsS,
      _props$columnsM = props.columnsM,
      columnsM = _props$columnsM === void 0 ? 1 : _props$columnsM,
      _props$columnsL = props.columnsL,
      columnsL = _props$columnsL === void 0 ? 1 : _props$columnsL,
      _props$columnsXL = props.columnsXL,
      columnsXL = _props$columnsXL === void 0 ? 2 : _props$columnsXL,
      _props$labelSpanS = props.labelSpanS,
      labelSpanS = _props$labelSpanS === void 0 ? 12 : _props$labelSpanS,
      _props$labelSpanM = props.labelSpanM,
      labelSpanM = _props$labelSpanM === void 0 ? 2 : _props$labelSpanM,
      _props$labelSpanL = props.labelSpanL,
      labelSpanL = _props$labelSpanL === void 0 ? 4 : _props$labelSpanL,
      _props$labelSpanXL = props.labelSpanXL,
      labelSpanXL = _props$labelSpanXL === void 0 ? 4 : _props$labelSpanXL;
  var columnsMap = new Map();
  columnsMap.set('Phone', columnsS);
  columnsMap.set('Tablet', columnsM);
  columnsMap.set('Desktop', columnsL);
  columnsMap.set('LargeDesktop', columnsXL);
  var labelSpanMap = new Map();
  labelSpanMap.set('Phone', labelSpanS);
  labelSpanMap.set('Tablet', labelSpanM);
  labelSpanMap.set('Desktop', labelSpanL);
  labelSpanMap.set('LargeDesktop', labelSpanXL);
  var formRef = useConsolidatedRef(ref); // use the window range set as first best guess

  var _useState = useState(Device.media.getCurrentRange('StdExt', window.innerWidth).name),
      _useState2 = _slicedToArray(_useState, 2),
      currentRange = _useState2[0],
      setCurrentRange = _useState2[1];

  var lastRange = useRef(currentRange);
  useEffect(function () {
    var observer = new ResizeObserver(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          form = _ref2[0];

      var newRange = Device.media.getCurrentRange('StdExt', form.contentRect.width).name;

      if (lastRange.current !== newRange) {
        lastRange.current = newRange;
        setCurrentRange(newRange);
      }
    });

    if (formRef.current) {
      observer.observe(formRef.current);
    }

    return function () {
      observer.disconnect();
    };
  }, [formRef, setCurrentRange, lastRange]);
  var classes = useStyles();
  var currentNumberOfColumns = columnsMap.get(currentRange);
  var currentLabelSpan = labelSpanMap.get(currentRange);

  var _useMemo = useMemo(function () {
    var _props$title;

    var computedFormGroups = [];

    if (Children.count(children) === 1 && !title && ((_props$title = children.props.title) === null || _props$title === void 0 ? void 0 : _props$title.length) > 0) {
      return [/*#__PURE__*/cloneElement(children, {
        title: null
      }), children.props.title];
    }

    var currentColumnCount = currentNumberOfColumns;

    if (currentColumnCount === 1) {
      return [children, title];
    }

    var rows = [];
    var childrenArray = Children.toArray(children);
    var estimatedNumberOfGroupRows = childrenArray.length / currentColumnCount;

    for (var i = 0; i < estimatedNumberOfGroupRows; i++) {
      rows[i] = childrenArray.slice(i * currentColumnCount, i * currentColumnCount + currentColumnCount);
    }

    var maxRowsPerRow = [];
    rows.forEach(function (rowGroup, rowIndex) {
      var numberOfRowsOfEachForm = rowGroup.map(function (row) {
        var _row$props, _row$props$title;

        if (row.type.displayName === 'FormItem') {
          return 1;
        }

        return Children.count(row.props.children) + (((_row$props = row.props) === null || _row$props === void 0 ? void 0 : (_row$props$title = _row$props.title) === null || _row$props$title === void 0 ? void 0 : _row$props$title.length) > 0 ? 1 : 0);
      });
      maxRowsPerRow[rowIndex] = Math.max.apply(Math, _toConsumableArray(numberOfRowsOfEachForm));
    });
    var totalRowCount = 2;
    rows.forEach(function (column, rowIndex) {
      var rowsForThisRow = maxRowsPerRow[rowIndex];
      column.forEach(function (cell, columnIndex) {
        var _cell$props$title, _cell$props;

        computedFormGroups.push( /*#__PURE__*/React.createElement(Title, {
          level: TitleLevel.H5,
          style: {
            paddingBottom: '0.75rem',
            gridColumnEnd: 'span 12',
            gridColumnStart: columnIndex * 12 + 1,
            gridRowStart: totalRowCount
          },
          key: "title-col-".concat(columnIndex, "-row-").concat(totalRowCount)
        }, (_cell$props$title = cell === null || cell === void 0 ? void 0 : (_cell$props = cell.props) === null || _cell$props === void 0 ? void 0 : _cell$props.title) !== null && _cell$props$title !== void 0 ? _cell$props$title : ''));

        for (var _i = 0; _i < rowsForThisRow; _i++) {
          var itemToRender = cell.type.displayName === 'FormGroup' ? Children.toArray(cell.props.children)[_i] : cell.type.displayName === 'FormItem' && _i === 0 ? cell : null;

          if (itemToRender) {
            computedFormGroups.push( /*#__PURE__*/cloneElement(itemToRender, {
              key: "col-".concat(columnIndex, "-row-").concat(totalRowCount + _i),
              columnIndex: columnIndex,
              rowIndex: totalRowCount + _i + 1,
              labelSpan: currentLabelSpan
            }));
          }
        }
      });
      totalRowCount += rowsForThisRow;

      if (rowsForThisRow === 1) {
        totalRowCount += 1;
      }
    });
    return [computedFormGroups, title];
  }, [children, currentRange, title, currentNumberOfColumns, currentLabelSpan]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      formGroups = _useMemo2[0],
      updatedTitle = _useMemo2[1];

  var passThroughProps = usePassThroughHtmlProps(props);
  var formClassNames = StyleClassHelper.of(classes.form).putIfPresent(className);
  var gridStyles = {};
  gridStyles['--ui5wcr_form_content_span'] = 12 - currentLabelSpan;
  gridStyles['--ui5wcr_form_label_span'] = currentLabelSpan; // special case for phones or label span 12

  if (gridStyles['--ui5wcr_form_content_span'] <= 0) {
    gridStyles['--ui5wcr_form_content_span'] = 12;
    gridStyles['--ui5wcr_form_label_text_align'] = 'start';
  }

  return /*#__PURE__*/React.createElement("div", _extends({
    ref: formRef,
    slot: slot,
    className: formClassNames.valueOf(),
    title: tooltip,
    style: _objectSpread(_objectSpread({}, gridStyles), style || {}),
    "data-columns": currentNumberOfColumns
  }, passThroughProps), updatedTitle && /*#__PURE__*/React.createElement(Title, {
    level: TitleLevel.H3,
    className: classes.formTitle
  }, updatedTitle), formGroups);
});
Form.displayName = 'Form';

export { Form };
//# sourceMappingURL=Form.js.map
