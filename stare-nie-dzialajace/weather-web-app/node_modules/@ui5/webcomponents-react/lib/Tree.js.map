{"version":3,"file":"Tree.js","sources":["../src/webComponents/Tree/index.tsx"],"sourcesContent":["import { ListMode } from '@ui5/webcomponents-react/lib/ListMode';\nimport { withWebComponent, WithWebComponentPropTypes } from '@ui5/webcomponents-react/lib/withWebComponent';\nimport '@ui5/webcomponents/dist/Tree';\nimport { FC, ReactNode } from 'react';\n\nexport interface TreePropTypes extends WithWebComponentPropTypes {\n  /**\n   * Defines the <code>ui5-tree</code> footer text.\n   */\n  footerText?: string;\n  /**\n   * Defines the <code>ui5-tree</code> header text. <br><br> <b>Note:</b> If the <code>header</code> slot is set, this property is ignored.\n   */\n  headerText?: string;\n  /**\n   * Defines the mode of the <code>ui5-tree</code>. Since the tree uses a <code>ui5-list</code> to display its structure, the tree modes are exactly the same as the list modes, and are all applicable. <br><br> <b>Note:</b> Available options are <code>None</code>, <code>SingleSelect</code>, <code>SingleSelectBegin</code>, <code>SingleSelectEnd</code>, <code>MultiSelect</code>, and <code>Delete</code>.\n   */\n  mode?: ListMode;\n  /**\n   * Defines the text that is displayed when the <code>ui5-tree</code> contains no items.\n   */\n  noDataText?: string;\n  /**\n   * Defines the items of the <code>ui5-tree</code>. Tree items may have other tree items as children. <br><br> <b>Note:</b> Use <code>ui5-tree-item</code> for the intended design.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the <code>ui5-tree</code> header. <br><br> <b>Note:</b> When the <code>header</code> slot is set, the <code>headerText</code> property is ignored.\n   */\n  header?: ReactNode | ReactNode[];\n  /**\n   * Fired when a tree item is activated.\n   */\n  onItemClick?: (event: CustomEvent<{ item: ReactNode }>) => void;\n  /**\n   * Fired when the Delete button of any tree item is pressed. <br><br> <b>Note:</b> A Delete button is displayed on each item, when the <code>ui5-tree</code> <code>mode</code> property is set to <code>Delete</code>.\n   */\n  onItemDelete?: (event: CustomEvent<{ item: ReactNode }>) => void;\n  /**\n   * Fired when a tree item is expanded or collapsed. <i>Note:</i> You can call <code>preventDefault()</code> on the event object to suppress the event, if needed. This may be handy for example if you want to dynamically load tree items upon the user expanding a node. Even if you prevented the event's default behavior, you can always manually call <code>toggle()</code> on a tree item.\n   */\n  onItemToggle?: (event: CustomEvent<{ item: ReactNode }>) => void;\n  /**\n   * Fired when selection is changed by user interaction in <code>SingleSelect</code>, <code>SingleSelectBegin</code>, <code>SingleSelectEnd</code> and <code>MultiSelect</code> modes.\n   */\n  onSelectionChange?: (event: CustomEvent<{ selectedItems: unknown[]; previouslySelectedItems: unknown[] }>) => void;\n}\n\n/**\n * <a href=\"https://sap.github.io/ui5-webcomponents/playground/components/Tree\" target=\"_blank\">UI5 Web Components Playground</a>\n */\nconst Tree: FC<TreePropTypes> = withWebComponent<TreePropTypes>(\n  'ui5-tree',\n  ['footerText', 'headerText', 'mode', 'noDataText'],\n  [],\n  ['header'],\n  ['item-click', 'item-delete', 'item-toggle', 'selection-change']\n);\n\nTree.displayName = 'Tree';\n\nTree.defaultProps = {\n  mode: ListMode.None\n};\n\nexport { Tree };\n"],"names":["Tree","withWebComponent","displayName","defaultProps","mode","ListMode","None"],"mappings":";;;;AAgDA;;;IAGMA,IAAuB,GAAGC,gBAAgB,CAC9C,UAD8C,EAE9C,CAAC,YAAD,EAAe,YAAf,EAA6B,MAA7B,EAAqC,YAArC,CAF8C,EAG9C,EAH8C,EAI9C,CAAC,QAAD,CAJ8C,EAK9C,CAAC,YAAD,EAAe,aAAf,EAA8B,aAA9B,EAA6C,kBAA7C,CAL8C;AAQhDD,IAAI,CAACE,WAAL,GAAmB,MAAnB;AAEAF,IAAI,CAACG,YAAL,GAAoB;AAClBC,EAAAA,IAAI,EAAEC,QAAQ,CAACC;AADG,CAApB;;;;"}