import { getRTL } from '@ui5/webcomponents-base/dist/config/RTL';
import { getTheme } from '@ui5/webcomponents-base/dist/config/Theme';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { cssVariablesStyles } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import { ContentDensity } from '@ui5/webcomponents-react/lib/ContentDensity';
import React, { useMemo, useEffect } from 'react';
import { ThemeProvider as ThemeProvider$1 } from 'react-jss';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { GlobalStyleClasses } from '@ui5/webcomponents-react/lib/GlobalStyleClasses';

var GlobalStyleClassesStyles = {
  '@global': _defineProperty({}, ".".concat(GlobalStyleClasses.sapScrollBar), {
    '&::-webkit-scrollbar': {
      backgroundColor: ThemingParameters.sapScrollBar_TrackColor,
      '&:horizontal': {
        height: ThemingParameters.sapScrollBar_Dimension
      },
      '&:vertical': {
        width: ThemingParameters.sapScrollBar_Dimension
      }
    },
    '&::-webkit-scrollbar-thumb': {
      backgroundColor: ThemingParameters.sapScrollBar_FaceColor,
      borderRadius: '0.25rem',
      '&:hover': {
        backgroundColor: ThemingParameters.sapScrollBar_Hover_FaceColor
      },
      '&:horizontal': {
        height: ThemingParameters.sapScrollBar_Dimension
      },
      '&:vertical': {
        width: ThemingParameters.sapScrollBar_Dimension
      }
    },
    '&::-webkit-scrollbar-corner': {
      backgroundColor: ThemingParameters.sapScrollBar_TrackColor
    }
  })
};

var useStyles = createComponentStyles(GlobalStyleClassesStyles);

var cssVarsPonyfillNeeded = function cssVarsPonyfillNeeded() {
  return !!window.CSSVarsPonyfill;
};

// inject the size variables first before the ThemeProvider Component is mounted, otherwise there will be some flickering
if (!document.querySelector('style[data-ui5-webcomponents-react-sizes]')) {
  var variables = document.createElement('style');
  variables.setAttribute('data-ui5-webcomponents-react-sizes', '');
  variables.innerHTML = cssVariablesStyles;
  document.head.appendChild(variables);
}

var ThemeProvider = function ThemeProvider(props) {
  var children = props.children;
  var isCompactSize = document.body.classList.contains('ui5-content-density-compact');
  useStyles();
  var theme = getTheme();
  var themeContext = useMemo(function () {
    return {
      theme: theme,
      contentDensity: isCompactSize ? ContentDensity.Compact : ContentDensity.Cozy,
      parameters: ThemingParameters,
      rtl: getRTL()
    };
  }, [theme, isCompactSize]);
  useEffect(function () {
    if (cssVarsPonyfillNeeded()) {
      window.CSSVarsPonyfill.cssVars({
        rootElement: document.head,
        include: 'style[data-ui5-webcomponents-react-sizes],style[data-jss]',
        watch: true,
        silent: true
      });
    }
  }, []);
  return /*#__PURE__*/React.createElement(ThemeProvider$1, {
    theme: themeContext
  }, children);
};

ThemeProvider.displayName = 'ThemeProvider';

export { ThemeProvider };
//# sourceMappingURL=ThemeProvider.js.map
