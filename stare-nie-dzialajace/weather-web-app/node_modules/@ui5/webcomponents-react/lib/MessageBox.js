import _extends from '@babel/runtime/helpers/extends';
import _toArray from '@babel/runtime/helpers/toArray';
import '@ui5/webcomponents-icons/dist/icons/hint';
import '@ui5/webcomponents-icons/dist/icons/message-error';
import '@ui5/webcomponents-icons/dist/icons/message-information';
import '@ui5/webcomponents-icons/dist/icons/message-success';
import '@ui5/webcomponents-icons/dist/icons/message-warning';
import '@ui5/webcomponents-icons/dist/icons/question-mark';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { useI18nText, useConsolidatedRef, usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/hooks';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { CONFIRMATION, ERROR, INFORMATION, SUCCESS, WARNING, HIGHLIGHT, ABORT, CANCEL, CLOSE, DELETE, IGNORE, NO, OK, RETRY, YES } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Button } from '@ui5/webcomponents-react/lib/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/lib/ButtonDesign';
import { Dialog } from '@ui5/webcomponents-react/lib/Dialog';
import { Icon } from '@ui5/webcomponents-react/lib/Icon';
import { MessageBoxActions } from '@ui5/webcomponents-react/lib/MessageBoxActions';
import { MessageBoxTypes } from '@ui5/webcomponents-react/lib/MessageBoxTypes';
import { Text } from '@ui5/webcomponents-react/lib/Text';
import { Title } from '@ui5/webcomponents-react/lib/Title';
import { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';
import React, { forwardRef, useMemo, isValidElement, useCallback, useEffect } from 'react';
import { CssSizeVariables } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var stopPropagation = function stopPropagation(e) {
  e.stopPropagation();
  e.stopImmediatePropagation();
};

var style = {
  messageBox: {
    '--sapContent_Shadow0': 'none'
  },
  header: {
    display: 'flex',
    height: CssSizeVariables.sapWcrBarHeight,
    textAlign: 'center',
    width: '100%',
    alignItems: 'center',
    padding: '0.25rem 1rem',
    boxSizing: 'border-box',
    borderBottom: "1px solid var(--messageBoxBorderColor)",
    color: ThemingParameters.sapContent_LabelColor,
    fontSize: '1rem',
    '& ui5-icon:first-child': {
      padding: '0 0.25rem',
      width: '1rem',
      height: '1rem'
    },
    '&[data-type="Error"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapErrorBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapErrorBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapNegativeElementColor
    },
    '&[data-type="Warning"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapWarningBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapWarningBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapCriticalElementColor
    },
    '&[data-type="Success"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapSuccessBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapSuccessBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapPositiveElementColor
    },
    '&[data-type="Confirm"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapNeutralBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapNeutralBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapNeutralElementColor
    },
    '&[data-type="Information"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapNeutralBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapNeutralBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapNeutralElementColor
    },
    '&[data-type="Highlight"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapInformationBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapInformationBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapInformativeElementColor
    }
  },
  content: {
    padding: '1rem'
  },
  footer: {
    height: CssSizeVariables.sapWcrBarHeight,
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: '0 0.5rem',
    '& > *': {
      margin: '0 0.25rem'
    },
    '& > ui5-button': {
      display: 'flex',
      minWidth: '4rem'
    }
  }
};

var actionTextMap = new Map();
actionTextMap.set(MessageBoxActions.ABORT, 0);
actionTextMap.set(MessageBoxActions.CANCEL, 1);
actionTextMap.set(MessageBoxActions.CLOSE, 2);
actionTextMap.set(MessageBoxActions.DELETE, 3);
actionTextMap.set(MessageBoxActions.IGNORE, 4);
actionTextMap.set(MessageBoxActions.NO, 5);
actionTextMap.set(MessageBoxActions.OK, 6);
actionTextMap.set(MessageBoxActions.RETRY, 7);
actionTextMap.set(MessageBoxActions.YES, 8);
var useStyles = createComponentStyles(style, {
  name: 'MessageBox'
});
var MessageBox = /*#__PURE__*/forwardRef(function (props, ref) {
  var open = props.open,
      type = props.type,
      children = props.children,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot,
      title = props.title,
      icon = props.icon,
      actions = props.actions,
      onClose = props.onClose;
  var classes = useStyles();
  var iconToRender = useMemo(function () {
    if ( /*#__PURE__*/isValidElement(icon)) return icon;

    switch (type) {
      case MessageBoxTypes.CONFIRM:
        return /*#__PURE__*/React.createElement(Icon, {
          name: "question-mark"
        });

      case MessageBoxTypes.ERROR:
        return /*#__PURE__*/React.createElement(Icon, {
          name: "message-error"
        });

      case MessageBoxTypes.INFORMATION:
        return /*#__PURE__*/React.createElement(Icon, {
          name: "message-information"
        });

      case MessageBoxTypes.SUCCESS:
        return /*#__PURE__*/React.createElement(Icon, {
          name: "message-success"
        });

      case MessageBoxTypes.WARNING:
        return /*#__PURE__*/React.createElement(Icon, {
          name: "message-warning"
        });

      case MessageBoxTypes.HIGHLIGHT:
        return /*#__PURE__*/React.createElement(Icon, {
          name: "hint"
        });

      default:
        return null;
    }
  }, [icon, type]);

  var _useI18nText = useI18nText('@ui5/webcomponents-react', CONFIRMATION, ERROR, INFORMATION, SUCCESS, WARNING, HIGHLIGHT, ABORT, CANCEL, CLOSE, DELETE, IGNORE, NO, OK, RETRY, YES),
      _useI18nText2 = _toArray(_useI18nText),
      titleConfirmation = _useI18nText2[0],
      titleError = _useI18nText2[1],
      titleInformation = _useI18nText2[2],
      titleSuccess = _useI18nText2[3],
      titleWarning = _useI18nText2[4],
      titleHighlight = _useI18nText2[5],
      actionTranslations = _useI18nText2.slice(6);

  var titleToRender = function titleToRender() {
    if (title) {
      return title;
    }

    switch (type) {
      case MessageBoxTypes.CONFIRM:
        return titleConfirmation;

      case MessageBoxTypes.ERROR:
        return titleError;

      case MessageBoxTypes.INFORMATION:
        return titleInformation;

      case MessageBoxTypes.SUCCESS:
        return titleSuccess;

      case MessageBoxTypes.WARNING:
        return titleWarning;

      case MessageBoxTypes.HIGHLIGHT:
        return titleHighlight;

      default:
        return null;
    }
  };

  var actionsToRender = useMemo(function () {
    if (actions && actions.length > 0) {
      return actions;
    }

    if (type === MessageBoxTypes.CONFIRM) {
      return [MessageBoxActions.OK, MessageBoxActions.CANCEL];
    }

    if (type === MessageBoxTypes.ERROR) {
      return [MessageBoxActions.CLOSE];
    }

    return [MessageBoxActions.OK];
  }, [actions, type]);
  var handleOnClose = useCallback(function (e) {
    var action = e.target.dataset.action;
    stopPropagation(e);
    onClose(enrichEventWithDetails(e, {
      action: action
    }));
  }, [onClose]);
  var dialogRef = useConsolidatedRef(ref);
  useEffect(function () {
    if (dialogRef.current) {
      if (open) {
        dialogRef.current.open();
      } else {
        dialogRef.current.close();
      }
    }
  }, [open, dialogRef]);
  var passThroughProps = usePassThroughHtmlProps(props, ['onClose']);
  var messageBoxClassNames = StyleClassHelper.of(classes.messageBox).putIfPresent(className).className;
  return /*#__PURE__*/React.createElement(Dialog, _extends({
    slot: slot,
    ref: dialogRef,
    style: style,
    tooltip: tooltip,
    className: messageBoxClassNames,
    header: /*#__PURE__*/React.createElement("header", {
      className: classes.header,
      "data-type": type
    }, iconToRender, /*#__PURE__*/React.createElement(Title, {
      level: TitleLevel.H5
    }, titleToRender())),
    footer: /*#__PURE__*/React.createElement("footer", {
      className: classes.footer
    }, actionsToRender.map(function (action, index) {
      return /*#__PURE__*/React.createElement(Button, {
        key: action,
        design: index === 0 ? ButtonDesign.Emphasized : ButtonDesign.Transparent,
        onClick: handleOnClose,
        "data-action": action
      }, actionTextMap.has(action) ? actionTranslations[actionTextMap.get(action)] : action);
    })),
    onAfterClose: open ? handleOnClose : stopPropagation
  }, passThroughProps), /*#__PURE__*/React.createElement(Text, {
    className: classes.content
  }, children));
});
MessageBox.displayName = 'MessageBox';
MessageBox.defaultProps = {
  open: false,
  title: null,
  icon: null,
  type: MessageBoxTypes.CONFIRM,
  actions: []
};

export { MessageBox };
//# sourceMappingURL=MessageBox.js.map
