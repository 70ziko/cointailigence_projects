import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import '@ui5/webcomponents-icons/dist/icons/navigation-down-arrow';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { useI18nText } from '@ui5/webcomponents-react-base/lib/hooks';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { CANCEL } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Button } from '@ui5/webcomponents-react/lib/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/lib/ButtonDesign';
import { List } from '@ui5/webcomponents-react/lib/List';
import { ListItemTypes } from '@ui5/webcomponents-react/lib/ListItemTypes';
import { ListMode } from '@ui5/webcomponents-react/lib/ListMode';
import { PlacementType } from '@ui5/webcomponents-react/lib/PlacementType';
import { ResponsivePopover } from '@ui5/webcomponents-react/lib/ResponsivePopover';
import { StandardListItem } from '@ui5/webcomponents-react/lib/StandardListItem';
import { Title } from '@ui5/webcomponents-react/lib/Title';
import { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';
import React, { forwardRef, useRef, useState, useEffect, useCallback, useMemo } from 'react';
import { createPortal } from 'react-dom';

var stopPropagation = function stopPropagation(e) {
  e.stopPropagation();
  e.stopImmediatePropagation();
};

var styles = {
  container: {
    display: 'flex',
    alignItems: 'center',
    textAlign: 'center',
    cursor: 'pointer'
  },
  title: {
    cursor: 'pointer',
    color: ThemingParameters.sapButton_TextColor,
    '&:hover': {
      color: ThemingParameters.sapButton_Hover_TextColor
    }
  },
  disabled: {
    '& $title': {
      color: ThemingParameters.sapGroup_TitleTextColor,
      cursor: 'default',
      '&:hover': {
        color: 'ThemingParameters.sapGroup_TitleTextColor'
      }
    }
  },
  footer: {
    margin: '0.4375rem 1rem 0.4325rem auto'
  }
};
var useStyles = createComponentStyles(styles, {
  name: 'VariantManagement'
});
/**
 * The `VariantManagement` component can be used to manage variants, such as FilterBar variants or AnalyticalTable variants.
 */

var VariantManagement = /*#__PURE__*/forwardRef(function (props, ref) {
  var _ref, _props$selectedKey, _variantItems$;

  var variantItems = props.variantItems,
      popupTitle = props.popupTitle,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      placement = props.placement,
      level = props.level,
      onSelect = props.onSelect,
      closeOnItemSelect = props.closeOnItemSelect,
      disabled = props.disabled;
  var classes = useStyles();
  var popoverRef = useRef(null);

  var _useState = useState((_ref = (_props$selectedKey = props.selectedKey) !== null && _props$selectedKey !== void 0 ? _props$selectedKey : variantItems === null || variantItems === void 0 ? void 0 : (_variantItems$ = variantItems[0]) === null || _variantItems$ === void 0 ? void 0 : _variantItems$.key) !== null && _ref !== void 0 ? _ref : null),
      _useState2 = _slicedToArray(_useState, 2),
      selectedKey = _useState2[0],
      setSelectedKey = _useState2[1];

  useEffect(function () {
    if (props.selectedKey) {
      setSelectedKey(props.selectedKey);
    }
  }, [props.selectedKey, setSelectedKey]);
  var handleCancelButtonClick = useCallback(function () {
    popoverRef.current.close();
  }, [popoverRef]);
  var handleOpenVariantManagement = useCallback(function (e) {
    popoverRef.current.open(e.target);
  }, [popoverRef]);

  var _useI18nText = useI18nText('@ui5/webcomponents-react', CANCEL),
      _useI18nText2 = _slicedToArray(_useI18nText, 1),
      cancel = _useI18nText2[0];

  var footerButtons = useMemo(function () {
    return /*#__PURE__*/React.createElement(Button, {
      className: classes.footer,
      onClick: handleCancelButtonClick,
      design: ButtonDesign.Emphasized
    }, cancel);
  }, [classes.footer, handleCancelButtonClick, cancel]);

  var getItemByKey = function getItemByKey(key) {
    return variantItems === null || variantItems === void 0 ? void 0 : variantItems.find(function (item) {
      return item.key === key;
    });
  };

  var selectedItem = getItemByKey(selectedKey) || variantItems[0];
  var variantManagementClasses = StyleClassHelper.of(classes.container);

  if (disabled) {
    variantManagementClasses.put(classes.disabled);
  }

  if (className) {
    variantManagementClasses.put(className);
  }

  var handleVariantItemSelect = useCallback(function (event) {
    var newSelectedKey = event.detail.item.dataset.key;
    setSelectedKey(newSelectedKey);
    onSelect(enrichEventWithDetails(event, _objectSpread(_objectSpread({}, event.details), {}, {
      selectedItem: getItemByKey(newSelectedKey) || variantItems[0]
    })));

    if (closeOnItemSelect) {
      handleCancelButtonClick();
    }
  }, [handleCancelButtonClick, closeOnItemSelect, selectedKey, variantItems, setSelectedKey]);
  var passThroughProps = usePassThroughHtmlProps(props, ['onSelect']);

  if (!variantItems || variantItems.length < 1) {
    return null;
  }

  return /*#__PURE__*/React.createElement("div", _extends({
    className: variantManagementClasses.valueOf(),
    style: style,
    title: tooltip
  }, passThroughProps, {
    ref: ref
  }), /*#__PURE__*/React.createElement(Title, {
    level: level,
    className: classes.title
  }, selectedItem.label), /*#__PURE__*/React.createElement(Button, {
    onClick: handleOpenVariantManagement,
    design: ButtonDesign.Transparent,
    icon: "navigation-down-arrow",
    disabled: disabled
  }), /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(ResponsivePopover, {
    ref: popoverRef,
    headerText: popupTitle,
    placementType: placement,
    footer: footerButtons,
    onAfterClose: stopPropagation
  }, /*#__PURE__*/React.createElement(List, {
    onItemClick: handleVariantItemSelect,
    mode: ListMode.SingleSelect
  }, variantItems.map(function (item) {
    return /*#__PURE__*/React.createElement(StandardListItem, {
      style: {
        width: '300px'
      },
      "data-key": item.key,
      type: ListItemTypes.Active,
      key: item.key,
      selected: selectedKey === item.key
    }, item.label);
  }))), document.body));
});
VariantManagement.defaultProps = {
  popupTitle: 'Variants',
  selectedKey: null,
  onSelect: function onSelect() {},
  closeOnItemSelect: true,
  placement: PlacementType.Bottom,
  level: TitleLevel.H4,
  disabled: false,
  variantItems: []
};
VariantManagement.displayName = 'VariantManagement';

export { VariantManagement };
//# sourceMappingURL=VariantManagement.js.map
