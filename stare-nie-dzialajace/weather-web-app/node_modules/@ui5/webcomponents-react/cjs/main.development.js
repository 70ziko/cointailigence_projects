'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var Theming = require('@ui5/webcomponents-base/dist/Theming');
var createComponentStyles = require('@ui5/webcomponents-react-base/lib/createComponentStyles');
var StyleClassHelper = require('@ui5/webcomponents-react-base/lib/StyleClassHelper');
var useConsolidatedRef = require('@ui5/webcomponents-react-base/lib/useConsolidatedRef');
var usePassThroughHtmlProps = require('@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps');
var ButtonDesign = require('@ui5/webcomponents-react/lib/ButtonDesign');
var ResponsivePopover$1 = require('@ui5/webcomponents-react/lib/ResponsivePopover');
var React = require('react');
var React__default = _interopDefault(React);
var reactDom = require('react-dom');
var ThemingParameters = require('@ui5/webcomponents-react-base/lib/ThemingParameters');
var spacing = require('@ui5/webcomponents-react-base/lib/spacing');
var _slicedToArray = _interopDefault(require('@babel/runtime/helpers/slicedToArray'));
var hooks = require('@ui5/webcomponents-react-base/lib/hooks');
var Utils = require('@ui5/webcomponents-react-base/lib/Utils');
var i18nDefaults = require('@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults');
var DeviationIndicator = require('@ui5/webcomponents-react/lib/DeviationIndicator');
var FlexBox$1 = require('@ui5/webcomponents-react/lib/FlexBox');
var FlexBoxAlignItems = require('@ui5/webcomponents-react/lib/FlexBoxAlignItems');
var FlexBoxDirection = require('@ui5/webcomponents-react/lib/FlexBoxDirection');
var FlexBoxJustifyContent = require('@ui5/webcomponents-react/lib/FlexBoxJustifyContent');
var FlexBoxWrap = require('@ui5/webcomponents-react/lib/FlexBoxWrap');
var ObjectStatus$1 = require('@ui5/webcomponents-react/lib/ObjectStatus');
var ValueState = require('@ui5/webcomponents-react/lib/ValueState');
var _objectSpread = _interopDefault(require('@babel/runtime/helpers/objectSpread2'));
var _toConsumableArray = _interopDefault(require('@babel/runtime/helpers/toConsumableArray'));
var TableScaleWidthMode = require('@ui5/webcomponents-react/lib/TableScaleWidthMode');
var TableSelectionBehavior = require('@ui5/webcomponents-react/lib/TableSelectionBehavior');
var TableSelectionMode = require('@ui5/webcomponents-react/lib/TableSelectionMode');
var debounce = _interopDefault(require('lodash/debounce'));
var reactTable = require('react-table');
var GlobalStyleClasses = require('@ui5/webcomponents-react/lib/GlobalStyleClasses');
var CssSizeVariables = require('@ui5/webcomponents-react-base/lib/CssSizeVariables');
var reactJss = require('react-jss');
var reactVirtual = require('react-virtual');
var RTL = require('@ui5/webcomponents-base/dist/config/RTL');
require('@ui5/webcomponents-icons/dist/icons/filter');
require('@ui5/webcomponents-icons/dist/icons/group-2');
require('@ui5/webcomponents-icons/dist/icons/sort-ascending');
require('@ui5/webcomponents-icons/dist/icons/sort-descending');
var Icon$1 = require('@ui5/webcomponents-react/lib/Icon');
var Text$1 = require('@ui5/webcomponents-react/lib/Text');
require('@ui5/webcomponents-icons/dist/icons/decline');
var List$1 = require('@ui5/webcomponents-react/lib/List');
var ListItemTypes = require('@ui5/webcomponents-react/lib/ListItemTypes');
var PlacementType = require('@ui5/webcomponents-react/lib/PlacementType');
var Popover$1 = require('@ui5/webcomponents-react/lib/Popover');
var PopoverHorizontalAlign = require('@ui5/webcomponents-react/lib/PopoverHorizontalAlign');
var StandardListItem$1 = require('@ui5/webcomponents-react/lib/StandardListItem');
var VerticalAlign = require('@ui5/webcomponents-react/lib/VerticalAlign');
var Input$1 = require('@ui5/webcomponents-react/lib/Input');
var TextAlign = require('@ui5/webcomponents-react/lib/TextAlign');
var Loader$1 = require('@ui5/webcomponents-react/lib/Loader');
var ContentLoader = _interopDefault(require('react-content-loader'));
var CheckBox$1 = require('@ui5/webcomponents-react/lib/CheckBox');
var _createForOfIteratorHelper = _interopDefault(require('@babel/runtime/helpers/createForOfIteratorHelper'));
var Title$1 = require('@ui5/webcomponents-react/lib/Title');
require('@ui5/webcomponents-icons/dist/icons/navigation-down-arrow');
require('@ui5/webcomponents-icons/dist/icons/navigation-right-arrow');
var AvatarBackgroundColor = require('@ui5/webcomponents-react/lib/AvatarBackgroundColor');
var AvatarFitType = require('@ui5/webcomponents-react/lib/AvatarFitType');
var AvatarShape = require('@ui5/webcomponents-react/lib/AvatarShape');
var AvatarSize = require('@ui5/webcomponents-react/lib/AvatarSize');
var withWebComponent$1 = require('@ui5/webcomponents-react/lib/withWebComponent');
require('@ui5/webcomponents/dist/Avatar');
require('@ui5/webcomponents/dist/Badge');
var BreadcrumbsSeparatorStyle = require('@ui5/webcomponents-react/lib/BreadcrumbsSeparatorStyle');
var Label$1 = require('@ui5/webcomponents-react/lib/Label');
var BusyIndicatorSize = require('@ui5/webcomponents-react/lib/BusyIndicatorSize');
require('@ui5/webcomponents/dist/BusyIndicator');
require('@ui5/webcomponents/dist/Button');
require('@ui5/webcomponents/dist/Calendar');
require('@ui5/webcomponents/dist/Card');
var CarouselArrowsPlacement = require('@ui5/webcomponents-react/lib/CarouselArrowsPlacement');
require('@ui5/webcomponents/dist/Carousel');
require('@ui5/webcomponents/dist/CheckBox');
require('@ui5/webcomponents/dist/ComboBox');
require('@ui5/webcomponents/dist/ComboBoxItem');
require('@ui5/webcomponents/dist/CustomListItem');
var CalendarType = require('@ui5/webcomponents-react/lib/CalendarType');
require('@ui5/webcomponents/dist/DatePicker');
require('@ui5/webcomponents/dist/DateRangePicker');
require('@ui5/webcomponents/dist/DateTimePicker');
require('@ui5/webcomponents/dist/Dialog');
require('@ui5/webcomponents/dist/DurationPicker');
require('@ui5/webcomponents/dist/FileUploader');
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var _toPropertyKey = _interopDefault(require('@babel/runtime/helpers/toPropertyKey'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var BusyIndicator$2 = require('@ui5/webcomponents-react/lib/BusyIndicator');
var Button$2 = require('@ui5/webcomponents-react/lib/Button');
var Toolbar$1 = require('@ui5/webcomponents-react/lib/Toolbar');
var ToolbarSeparator$1 = require('@ui5/webcomponents-react/lib/ToolbarSeparator');
var ToolbarSpacer$1 = require('@ui5/webcomponents-react/lib/ToolbarSpacer');
var ToolbarStyle = require('@ui5/webcomponents-react/lib/ToolbarStyle');
require('@ui5/webcomponents-icons/dist/icons/search');
var Bar$1 = require('@ui5/webcomponents-react/lib/Bar');
var BarDesign = require('@ui5/webcomponents-react/lib/BarDesign');
var Dialog$2 = require('@ui5/webcomponents-react/lib/Dialog');
var TitleLevel = require('@ui5/webcomponents-react/lib/TitleLevel');
var FilterType = require('@ui5/webcomponents-react/lib/FilterType');
var MultiComboBox$1 = require('@ui5/webcomponents-react/lib/MultiComboBox');
var Option$1 = require('@ui5/webcomponents-react/lib/Option');
var Select$1 = require('@ui5/webcomponents-react/lib/Select');
require('@ui5/webcomponents-fiori/dist/FlexibleColumnLayout');
var FCLLayout = require('@ui5/webcomponents-react/lib/FCLLayout');
var Device = require('@ui5/webcomponents-react-base/lib/Device');
var _wrapRegExp = _interopDefault(require('@babel/runtime/helpers/wrapRegExp'));
var useViewportRange = require('@ui5/webcomponents-react-base/lib/useViewportRange');
var GridPosition = require('@ui5/webcomponents-react/lib/GridPosition');
require('@ui5/webcomponents/dist/GroupHeaderListItem');
require('@ui5/webcomponents/dist/Icon');
var InputType = require('@ui5/webcomponents-react/lib/InputType');
require('@ui5/webcomponents/dist/Input');
require('@ui5/webcomponents/dist/Label');
var LinkDesign = require('@ui5/webcomponents-react/lib/LinkDesign');
require('@ui5/webcomponents/dist/Link');
var ListMode = require('@ui5/webcomponents-react/lib/ListMode');
var ListSeparators = require('@ui5/webcomponents-react/lib/ListSeparators');
require('@ui5/webcomponents/dist/List');
var LoaderType = require('@ui5/webcomponents-react/lib/LoaderType');
var _toArray = _interopDefault(require('@babel/runtime/helpers/toArray'));
require('@ui5/webcomponents-icons/dist/icons/hint');
require('@ui5/webcomponents-icons/dist/icons/message-error');
require('@ui5/webcomponents-icons/dist/icons/message-information');
require('@ui5/webcomponents-icons/dist/icons/message-success');
require('@ui5/webcomponents-icons/dist/icons/message-warning');
require('@ui5/webcomponents-icons/dist/icons/question-mark');
var MessageBoxActions = require('@ui5/webcomponents-react/lib/MessageBoxActions');
var MessageBoxTypes = require('@ui5/webcomponents-react/lib/MessageBoxTypes');
var MessageStripType = require('@ui5/webcomponents-react/lib/MessageStripType');
require('@ui5/webcomponents/dist/MessageStrip');
require('@ui5/webcomponents/dist/MultiComboBox');
require('@ui5/webcomponents/dist/MultiComboBoxItem');
require('@ui5/webcomponents-fiori/dist/NotificationListGroupItem');
var Priority = require('@ui5/webcomponents-react/lib/Priority');
require('@ui5/webcomponents-fiori/dist/NotificationListItem');
require('@ui5/webcomponents-fiori/dist/NotificationOverflowAction');
var ObjectPageMode = require('@ui5/webcomponents-react/lib/ObjectPageMode');
var ToolbarDesign = require('@ui5/webcomponents-react/lib/ToolbarDesign');
require('@ui5/webcomponents-icons/dist/icons/pushpin-off');
require('@ui5/webcomponents-icons/dist/icons/slim-arrow-down');
require('@ui5/webcomponents-icons/dist/icons/slim-arrow-up');
var TabContainer$1 = require('@ui5/webcomponents-react/lib/TabContainer');
var ToggleButton$1 = require('@ui5/webcomponents-react/lib/ToggleButton');
require('@ui5/webcomponents/dist/StandardListItem');
var Tab$1 = require('@ui5/webcomponents-react/lib/Tab');
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'));
var _inherits = _interopDefault(require('@babel/runtime/helpers/inherits'));
var _createSuper = _interopDefault(require('@babel/runtime/helpers/createSuper'));
var _wrapNativeSuper = _interopDefault(require('@babel/runtime/helpers/wrapNativeSuper'));
require('@ui5/webcomponents-icons/dist/icons/status-critical');
require('@ui5/webcomponents-icons/dist/icons/status-inactive');
require('@ui5/webcomponents-icons/dist/icons/status-negative');
require('@ui5/webcomponents-icons/dist/icons/status-positive');
require('@ui5/webcomponents/dist/Option');
require('@ui5/webcomponents-icons/dist/icons/navigation-left-arrow');
var PageBackgroundDesign = require('@ui5/webcomponents-react/lib/PageBackgroundDesign');
var PanelAccessibleRoles = require('@ui5/webcomponents-react/lib/PanelAccessibleRoles');
require('@ui5/webcomponents/dist/Panel');
var PopoverVerticalAlign = require('@ui5/webcomponents-react/lib/PopoverVerticalAlign');
require('@ui5/webcomponents/dist/Popover');
require('@ui5/webcomponents-fiori/dist/ProductSwitch');
require('@ui5/webcomponents-fiori/dist/ProductSwitchItem');
require('@ui5/webcomponents/dist/ProgressIndicator');
require('@ui5/webcomponents/dist/RadioButton');
require('@ui5/webcomponents/dist/RatingIndicator');
require('@ui5/webcomponents/dist/ResponsivePopover');
require('@ui5/webcomponents/dist/SegmentedButton');
require('@ui5/webcomponents/dist/Select');
require('@ui5/webcomponents-fiori/dist/ShellBar');
require('@ui5/webcomponents-fiori/dist/ShellBarItem');
require('@ui5/webcomponents-fiori/dist/SideNavigation');
require('@ui5/webcomponents-fiori/dist/SideNavigationItem');
require('@ui5/webcomponents-fiori/dist/SideNavigationSubItem');
var Size = require('@ui5/webcomponents-react/lib/Size');
require('@ui5/webcomponents/dist/SuggestionItem');
require('@ui5/webcomponents/dist/Switch');
var SemanticColor = require('@ui5/webcomponents-react/lib/SemanticColor');
require('@ui5/webcomponents/dist/Tab');
var TabContainerTabsPlacement = require('@ui5/webcomponents-react/lib/TabContainerTabsPlacement');
var TabLayout = require('@ui5/webcomponents-react/lib/TabLayout');
require('@ui5/webcomponents/dist/TabContainer');
require('@ui5/webcomponents/dist/TabSeparator');
require('@ui5/webcomponents/dist/Table');
require('@ui5/webcomponents/dist/TableCell');
require('@ui5/webcomponents/dist/TableColumn');
require('@ui5/webcomponents/dist/TableRow');
require('@ui5/webcomponents/dist/TextArea');
var Theme = require('@ui5/webcomponents-base/dist/config/Theme');
var ContentDensity = require('@ui5/webcomponents-react/lib/ContentDensity');
require('@ui5/webcomponents/dist/TimePicker');
require('@ui5/webcomponents/dist/Timeline');
require('@ui5/webcomponents/dist/TimelineItem');
require('@ui5/webcomponents/dist/Title');
var ToastPlacement = require('@ui5/webcomponents-react/lib/ToastPlacement');
require('@ui5/webcomponents/dist/Toast');
require('@ui5/webcomponents/dist/ToggleButton');
require('@ui5/webcomponents/dist/Token');
require('@ui5/webcomponents/dist/Tokenizer');
require('@ui5/webcomponents-icons/dist/icons/overflow');
require('@ui5/webcomponents/dist/Tree');
require('@ui5/webcomponents/dist/TreeItem');
require('@ui5/webcomponents-fiori/dist/UploadCollection');
require('@ui5/webcomponents-fiori/dist/UploadCollectionItem');
var UploadState = require('@ui5/webcomponents-react/lib/UploadState');

var styles = {
  /*
   *  is being applied to the encapsulating ul element
   */
  actionSheet: {
    margin: 0,
    padding: '0.1875rem 0.375rem',
    '& ui5-button': {
      display: 'block'
    }
  }
};

var useStyles = createComponentStyles.createComponentStyles(styles, {
  name: 'ActionSheet'
});
Theming.addCustomCSS('ui5-button', "\n  :host([data-is-action-sheet-button]) .ui5-button-root {\n    justify-content: flex-start;\n  }\n  ");
var ActionSheet = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      style = props.style,
      slot = props.slot,
      className = props.className,
      allowTargetOverlap = props.allowTargetOverlap,
      headerText = props.headerText,
      horizontalAlign = props.horizontalAlign,
      initialFocus = props.initialFocus,
      modal = props.modal,
      noArrow = props.noArrow,
      placementType = props.placementType,
      verticalAlign = props.verticalAlign,
      footer = props.footer,
      header = props.header,
      onAfterClose = props.onAfterClose,
      onAfterOpen = props.onAfterOpen,
      onBeforeClose = props.onBeforeClose,
      onBeforeOpen = props.onBeforeOpen;
  var classes = useStyles();
  var actionSheetClasses = StyleClassHelper.StyleClassHelper.of(classes.actionSheet).putIfPresent(className);
  var popoverRef = useConsolidatedRef.useConsolidatedRef(ref);

  var onActionButtonClicked = function onActionButtonClicked(handler) {
    return function (e) {
      popoverRef.current.close();

      if (typeof handler === 'function') {
        handler(e);
      }
    };
  };

  var renderActionSheetButton = function renderActionSheetButton(element, index) {
    return /*#__PURE__*/React.cloneElement(element, {
      key: index,
      design: ButtonDesign.ButtonDesign.Transparent,
      onClick: onActionButtonClicked(element.props.onClick),
      'data-is-action-sheet-button': ''
    });
  };

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onAfterClose', 'onAfterOpen', 'onBeforeClose', 'onBeforeOpen']);
  return /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default.createElement(ResponsivePopover$1.ResponsivePopover, _extends({
    ref: popoverRef,
    style: style,
    slot: slot,
    className: actionSheetClasses.className,
    allowTargetOverlap: allowTargetOverlap,
    headerText: headerText,
    horizontalAlign: horizontalAlign,
    initialFocus: initialFocus,
    modal: modal,
    noArrow: noArrow,
    placementType: placementType,
    verticalAlign: verticalAlign,
    footer: footer,
    header: header,
    onAfterClose: onAfterClose,
    onAfterOpen: onAfterOpen,
    onBeforeClose: onBeforeClose,
    onBeforeOpen: onBeforeOpen
  }, passThroughProps), React.Children.map(children, renderActionSheetButton)), document.body);
});
ActionSheet.displayName = 'ActionSheet';

var styles$1 = {
  card: {
    backgroundColor: ThemingParameters.ThemingParameters.sapTile_Background,
    border: "0.0625rem solid ".concat(ThemingParameters.ThemingParameters.sapTile_BorderColor),
    boxShadow: ThemingParameters.ThemingParameters.sapContent_Shadow0,
    borderRadius: ThemingParameters.ThemingParameters.sapElement_BorderCornerRadius,
    textAlign: 'start',
    overflow: 'hidden',
    position: 'relative',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    boxSizing: 'border-box',
    width: '20rem'
  },
  content: spacing.sapUiContentPadding
};

var useStyles$1 = createComponentStyles.createComponentStyles(styles$1, {
  name: 'AnalyticalCard'
});
var AnalyticalCard = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      header = props.header;
  var classes = useStyles$1();
  var classNameString = StyleClassHelper.StyleClassHelper.of(classes.card);

  if (className) {
    classNameString.put(className);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: classNameString.toString(),
    style: style,
    title: tooltip
  }, passThroughProps), header, /*#__PURE__*/React__default.createElement("div", {
    className: classes.content
  }, children));
});
AnalyticalCard.displayName = 'AnalyticalCard';

var styles$2 = {
  helpText: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapTextColor
  },
  cardHeader: _objectSpread(_objectSpread({}, spacing.sapUiContentPadding), {}, {
    outlineOffset: '-0.125rem',
    boxShadow: ThemingParameters.ThemingParameters.sapContent_HeaderShadow,
    //TODO use sapTile_SeparatorColor when available
    borderBottom: "0.0625rem solid ".concat(ThemingParameters.ThemingParameters.sapToolbar_SeparatorColor),
    backgroundColor: ThemingParameters.ThemingParameters.sapTile_Background,
    fontFamily: ThemingParameters.ThemingParameters.sapFontHeaderFamily,
    '&:hover': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_Background
    },
    '&:active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_Background
    }
  }),
  arrowIndicatorShape: {
    width: 0,
    height: 0
  },
  arrowUp: {
    borderLeft: '8px solid transparent',
    borderRight: '8px solid transparent',
    borderBottom: '8px solid'
  },
  arrowDown: {
    borderLeft: '8px solid transparent',
    borderRight: '8px solid transparent',
    borderTop: '8px solid'
  },
  arrowRight: {
    borderLeft: "8px solid ",
    borderTop: '8px solid transparent',
    borderBottom: '8px solid transparent'
  },
  cardHeaderClickable: {
    cursor: 'pointer'
  },
  headerContent: {
    marginLeft: '1rem',
    marginRight: '1rem',
    position: 'relative'
  },
  headerTitles: {
    overflow: 'hidden',
    textAlign: 'left',
    whiteSpace: 'normal',
    wordWrap: 'break-word'
  },
  headerText: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontHeaderFamily,
    fontWeight: 'normal',
    // was ThemingParameters.sapUiFontHeaderWeight
    fontSize: ThemingParameters.ThemingParameters.sapFontHeader5Size,
    color: ThemingParameters.ThemingParameters.sapTile_TitleTextColor,
    overflow: 'hidden',
    display: '-webkit-box',
    lineHeight: '18px',
    maxHeight: '54px'
    /* height * number of lines */
    ,
    WebkitLineClamp: '3'
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical'
  },
  subHeaderText: {
    overflow: 'hidden',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontWeight: 'normal',
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    color: ThemingParameters.ThemingParameters.sapTile_TextColor,
    textAlign: 'left',
    whiteSpace: 'normal',
    wordWrap: 'break-word',
    textOverflow: 'ellipsis',
    marginTop: '0.5rem',
    width: '100%',
    display: '-webkit-box',
    lineHeight: '16px',
    maxHeight: '32px',
    WebkitLineClamp: '2',
    WebkitBoxOrient: 'vertical'
  },
  counter: {
    fontSize: ThemingParameters.ThemingParameters.sapFontSmallSize,
    margin: '0.188rem 0  0 1rem',
    lineHeight: 'normal',
    textAlign: 'right'
  },
  currency: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapTile_TextColor,
    overflow: 'hidden',
    marginLeft: '0.25rem',
    textAlign: 'right'
  },
  helpIcon: {
    position: 'absolute',
    right: '0',
    top: '0'
  },
  kpiContent: {
    fontWeight: 'normal',
    marginTop: '0.5rem',
    color: ThemingParameters.ThemingParameters.sapTile_TextColor,
    width: '100%',
    boxSizing: 'border-box'
  },
  valueAndUnit: {
    display: 'flex',
    alignItems: 'end',
    color: ThemingParameters.ThemingParameters.sapNeutralTextColor
  },
  value: {
    fontSize: '2rem',
    maxWidth: '135px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    display: 'block'
  },
  unit: {
    marginLeft: '0.25rem',
    fontSize: '1rem'
  },
  indicatorAndUnit: {
    display: 'flex',
    height: '2rem',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'flex-end'
  },
  targetAndDeviation: {
    width: '60%',
    paddingBottom: '0.25rem',
    textAlign: 'right',
    fontSize: ThemingParameters.ThemingParameters.sapFontSmallSize,
    color: ThemingParameters.ThemingParameters.sapTile_TextColor
  },
  targetAndDeviationColumn: {
    maxWidth: '45%',
    marginLeft: '1rem'
  },
  targetAndDeviationValue: {
    color: ThemingParameters.ThemingParameters.sapTile_TitleTextColor,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  description: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSmallSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapTile_TextColor,
    whiteSpace: 'normal',
    overflow: 'hidden',
    textAlign: 'left',
    textOverflow: 'ellipsis',
    marginTop: '0.25rem',
    width: '100%',
    display: '-webkit-box',
    lineHeight: '14px',
    maxHeight: '14px'
    /* height * number of lines */
    ,
    WebkitLineClamp: '1'
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical'
  },
  good: {
    color: ThemingParameters.ThemingParameters.sapPositiveTextColor
  },
  error: {
    color: ThemingParameters.ThemingParameters.sapNegativeTextColor
  },
  critical: {
    color: ThemingParameters.ThemingParameters.sapCriticalTextColor
  },
  none: {
    color: ThemingParameters.ThemingParameters.sapNeutralTextColor
  }
};

var useStyles$2 = createComponentStyles.createComponentStyles(styles$2, {
  name: 'AnalyticalCardHeader'
});
var AnalyticalCardHeader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var title = props.title,
      subTitle = props.subTitle,
      value = props.value,
      unit = props.unit,
      target = props.target,
      deviation = props.deviation,
      valueState = props.valueState,
      onHeaderPress = props.onHeaderPress,
      showIndicator = props.showIndicator,
      tooltip = props.tooltip,
      className = props.className,
      description = props.description,
      counter = props.counter,
      counterState = props.counterState,
      currency = props.currency,
      indicatorState = props.indicatorState,
      arrowIndicator = props.arrowIndicator,
      style = props.style;
  var classes = useStyles$2(props);
  var onClick = React.useCallback(function (e) {
    if (onHeaderPress) {
      onHeaderPress(Utils.enrichEventWithDetails(e));
    }
  }, [onHeaderPress]);
  var indicatorIcon = React.useMemo(function () {
    var arrowClasses = StyleClassHelper.StyleClassHelper.of(classes.arrowIndicatorShape);

    switch (arrowIndicator) {
      case DeviationIndicator.DeviationIndicator.Up:
        arrowClasses.put(classes.arrowUp);
        break;

      case DeviationIndicator.DeviationIndicator.Down:
        arrowClasses.put(classes.arrowDown);
        break;

      default:
        arrowClasses.put(classes.arrowRight);
        break;
    }

    switch (indicatorState) {
      case ValueState.ValueState.Success:
        arrowClasses.put(classes.good);
        break;

      case ValueState.ValueState.Error:
        arrowClasses.put(classes.error);
        break;

      case ValueState.ValueState.Warning:
        arrowClasses.put(classes.critical);
        break;

      default:
        arrowClasses.put(classes.none);
        break;
    }

    return /*#__PURE__*/React__default.createElement("div", {
      className: arrowClasses.valueOf()
    });
  }, [arrowIndicator, indicatorState, classes]);
  var headerClasses = StyleClassHelper.StyleClassHelper.of(classes.cardHeader);

  if (onHeaderPress) {
    headerClasses.put(classes.cardHeaderClickable);
  }

  var valueAndUnitClasses = StyleClassHelper.StyleClassHelper.of(classes.valueAndUnit);

  if (valueState === ValueState.ValueState.Error) {
    valueAndUnitClasses.put(classes.error);
  }

  if (valueState === ValueState.ValueState.Warning) {
    valueAndUnitClasses.put(classes.critical);
  }

  if (valueState === ValueState.ValueState.Success) {
    valueAndUnitClasses.put(classes.good);
  }

  if (className) {
    headerClasses.put(className);
  }

  var shouldRenderContent = [value, unit, deviation, target].some(function (v) {
    return v !== null;
  });
  var passThroughProps = hooks.usePassThroughHtmlProps(props, ['onHeaderPress']);

  var _useI18nText = hooks.useI18nText('@ui5/webcomponents-react', i18nDefaults.TARGET, i18nDefaults.DEVIATION),
      _useI18nText2 = _slicedToArray(_useI18nText, 2),
      targetText = _useI18nText2[0],
      deviationText = _useI18nText2[1];

  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: headerClasses.valueOf(),
    title: tooltip,
    style: style
  }, passThroughProps, {
    onClick: onClick
  }), /*#__PURE__*/React__default.createElement("div", {
    className: classes.headerContent
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.headerTitles
  }, /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    justifyContent: FlexBoxJustifyContent.FlexBoxJustifyContent.SpaceBetween,
    wrap: FlexBoxWrap.FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.headerText
  }, title), /*#__PURE__*/React__default.createElement(ObjectStatus$1.ObjectStatus, {
    className: classes.counter,
    state: counterState
  }, counter)), /*#__PURE__*/React__default.createElement("div", {
    className: classes.subHeaderText
  }, subTitle, currency && " | ".concat(currency))), shouldRenderContent && /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Row,
    className: classes.kpiContent,
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.End
  }, /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Row
  }, /*#__PURE__*/React__default.createElement("div", {
    className: valueAndUnitClasses.valueOf()
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.value
  }, value), /*#__PURE__*/React__default.createElement("div", {
    className: classes.indicatorAndUnit
  }, showIndicator && indicatorIcon, /*#__PURE__*/React__default.createElement("div", {
    className: classes.unit
  }, unit)))), /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Row,
    wrap: FlexBoxWrap.FlexBoxWrap.NoWrap,
    className: classes.targetAndDeviation
  }, target !== null && /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Column,
    className: classes.targetAndDeviationColumn,
    wrap: FlexBoxWrap.FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React__default.createElement("span", null, targetText), /*#__PURE__*/React__default.createElement("span", {
    className: classes.targetAndDeviationValue
  }, target)), deviation !== null && /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Column,
    className: classes.targetAndDeviationColumn,
    wrap: FlexBoxWrap.FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React__default.createElement("span", null, deviationText), /*#__PURE__*/React__default.createElement("span", {
    className: classes.targetAndDeviationValue
  }, deviation)))), /*#__PURE__*/React__default.createElement("div", {
    className: classes.description
  }, description)));
});
AnalyticalCardHeader.displayName = 'AnalyticalCardHeader';
AnalyticalCardHeader.defaultProps = {
  title: null,
  subTitle: null,
  arrowIndicator: DeviationIndicator.DeviationIndicator.None,
  showIndicator: true,
  indicatorState: ValueState.ValueState.None,
  value: null,
  unit: null,
  valueState: ValueState.ValueState.None,
  target: null,
  deviation: null,
  onHeaderPress: null,
  description: null,
  counter: null,
  counterState: ValueState.ValueState.None,
  currency: null
};

var styles$3 = {
  table: {
    position: 'relative',
    width: '100%',
    maxWidth: '100%',
    overflowY: 'hidden',
    overflowX: 'auto',
    height: '100%',
    minHeight: '3rem',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal'
  },
  tableHeaderRow: {
    height: CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    display: 'inline-flex'
  },
  th: {
    backgroundColor: ThemingParameters.ThemingParameters.sapList_HeaderBackground,
    height: CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    color: ThemingParameters.ThemingParameters.sapList_HeaderTextColor,
    borderTop: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    borderRight: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    padding: "0 0.5rem",
    textAlign: 'start',
    boxSizing: 'border-box',
    '&:first-child': {
      borderLeft: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
    },
    '&:last-child': {
      '& [data-resizer]': {
        transform: 'translateX(0px)'
      }
    }
  },
  tbody: {
    position: 'relative',
    backgroundColor: ThemingParameters.ThemingParameters.sapList_Background,
    overflowX: 'hidden',
    overflowY: 'auto'
  },
  alternateRowColor: {
    backgroundColor: ThemingParameters.ThemingParameters.sapList_AlternatingBackground
  },
  tr: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    color: ThemingParameters.ThemingParameters.sapList_TextColor,
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    boxSizing: 'border-box',
    display: 'flex',
    willChange: 'transform',
    '&:hover': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_Background
    },
    '&[data-is-selected]': {
      borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_SelectionBorderColor),
      backgroundColor: ThemingParameters.ThemingParameters.sapList_SelectionBackgroundColor
    },
    '&[data-is-selected]:hover': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_SelectionBackground
    }
  },
  trActive: {
    '&:hover': {
      cursor: 'pointer'
    },
    '&:active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Active_Background,
      '& $tableCell': {
        borderRight: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_Active_Background),
        color: "".concat(ThemingParameters.ThemingParameters.sapList_Active_TextColor),
        '--sapTextColor': ThemingParameters.ThemingParameters.sapList_Active_TextColor
      }
    }
  },
  tableGroupHeader: {
    '&$tr': {
      backgroundColor: "".concat(ThemingParameters.ThemingParameters.sapList_TableGroupHeaderBackground),
      border: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_TableGroupHeaderBorderColor),
      color: ThemingParameters.ThemingParameters.sapList_TextColor,
      '& $tableCell': {
        borderRight: 'none'
      }
    }
  },
  tableCell: {
    height: CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    boxSizing: 'border-box',
    borderRight: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor),
    display: 'inline-flex',
    padding: '0 0.5rem',
    '&:first-child': {
      borderLeft: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
    },
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    alignItems: 'center',
    position: 'relative',
    '&:focus': {
      outlineOffset: '-2px',
      outline: "1px dotted ".concat(ThemingParameters.ThemingParameters.sapContent_FocusColor)
    }
  },
  noDataContainer: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: '100%',
    backgroundColor: ThemingParameters.ThemingParameters.sapList_Background,
    width: '100%',
    boxSizing: 'border-box',
    color: ThemingParameters.ThemingParameters.sapList_TextColor,
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
  }
};

var stopPropagation = function stopPropagation(e) {
  e.stopPropagation();
  e.stopImmediatePropagation();
};

var staticStyle = {
  fontWeight: 'normal'
};
var ColumnHeaderModal = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var column = props.column,
      onSort = props.onSort,
      onGroupBy = props.onGroupBy;
  var showFilter = column.canFilter;
  var showGroup = column.canGroupBy;
  var showSort = column.canSort;
  var Filter = column.Filter;

  var _useI18nText = hooks.useI18nText('@ui5/webcomponents-react', i18nDefaults.CLEAR_SORTING, i18nDefaults.SORT_ASCENDING, i18nDefaults.SORT_DESCENDING, i18nDefaults.GROUP, i18nDefaults.UNGROUP),
      _useI18nText2 = _slicedToArray(_useI18nText, 5),
      clearSortingText = _useI18nText2[0],
      sortAscendingText = _useI18nText2[1],
      sortDescendingText = _useI18nText2[2],
      groupText = _useI18nText2[3],
      ungroupText = _useI18nText2[4];

  var handleSort = React.useCallback(function (e) {
    var sortType = e.detail.item.getAttribute('data-sort');

    switch (sortType) {
      case 'asc':
        column.toggleSortBy(false);

        if (typeof onSort === 'function') {
          onSort(Utils.enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'desc':
        column.toggleSortBy(true);

        if (typeof onSort === 'function') {
          onSort(Utils.enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'clear':
        column.clearSortBy();

        if (typeof onSort === 'function') {
          onSort(Utils.enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'group':
        var willGroup = !column.isGrouped;
        column.toggleGroupBy(willGroup);

        if (typeof onGroupBy === 'function') {
          onGroupBy(Utils.enrichEventWithDetails(e, {
            column: column,
            isGrouped: willGroup
          }));
        }

        break;
    }

    if (ref.current) {
      ref.current.close();
    }
  }, [column, ref, onGroupBy, onSort]);
  var isSortedAscending = column.isSorted && column.isSortedDesc === false;
  var isSortedDescending = column.isSorted && column.isSortedDesc === true;
  return /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default.createElement(Popover$1.Popover, {
    noArrow: true,
    horizontalAlign: PopoverHorizontalAlign.PopoverHorizontalAlign.Left,
    placementType: PlacementType.PlacementType.Bottom,
    ref: ref,
    style: staticStyle,
    onAfterClose: stopPropagation
  }, /*#__PURE__*/React__default.createElement(List$1.List, {
    onItemClick: handleSort
  }, isSortedAscending && /*#__PURE__*/React__default.createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "decline",
    "data-sort": "clear"
  }, clearSortingText), showSort && !isSortedAscending && /*#__PURE__*/React__default.createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "sort-ascending",
    "data-sort": "asc"
  }, sortAscendingText), showSort && !isSortedDescending && /*#__PURE__*/React__default.createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "sort-descending",
    "data-sort": "desc"
  }, sortDescendingText), isSortedDescending && /*#__PURE__*/React__default.createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "decline",
    "data-sort": "clear"
  }, clearSortingText), showFilter && !column.isGrouped && /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Center,
    style: {
      padding: '0px 1rem',
      height: 'var(--_ui5_custom_list_item_height)',
      borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapList_BorderColor)
    }
  }, /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
    name: "filter",
    style: {
      paddingRight: '0.5rem',
      minWidth: '1rem',
      minHeight: '1rem'
    }
  }), /*#__PURE__*/React__default.createElement(Filter, {
    column: column,
    popoverRef: ref
  })), showGroup && /*#__PURE__*/React__default.createElement(StandardListItem$1.StandardListItem, {
    type: ListItemTypes.ListItemTypes.Active,
    icon: "group-2",
    "data-sort": 'group'
  }, column.isGrouped ? ungroupText : groupText))), document.body);
});
ColumnHeaderModal.displayName = 'ColumnHeaderModal';

var styles$4 = {
  header: {
    height: '100%',
    display: 'flex',
    justifyContent: 'begin',
    alignItems: 'center',
    textAlign: 'left',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapList_TextColor,
    background: ThemingParameters.ThemingParameters.sapList_HeaderBackground,
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    maxWidth: '100%',
    position: 'relative',
    width: '100%',
    overflowX: 'hidden',
    overflowY: 'hidden',
    boxSizing: 'border-box',
    '&[data-h-align="End"]': {
      '& $text': {
        textAlign: 'end'
      }
    }
  },
  text: {
    width: '100%',
    textAlign: 'start'
  },
  iconContainer: {
    display: 'inline-block',
    position: 'absolute',
    color: ThemingParameters.ThemingParameters.sapContent_IconColor,
    right: RTL.getRTL() === false ? '0.5rem' : undefined,
    left: RTL.getRTL() === true ? '0.5rem' : undefined
  }
};
var useStyles$3 = createComponentStyles.createComponentStyles(styles$4, {
  name: 'TableColumnHeader'
});
var ColumnHeader = function ColumnHeader(props) {
  var classes = useStyles$3(props);
  var id = props.id,
      children = props.children,
      column = props.column,
      className = props.className,
      style = props.style,
      onSort = props.onSort,
      onGroupBy = props.onGroupBy,
      onDragEnter = props.onDragEnter,
      onDragOver = props.onDragOver,
      onDragStart = props.onDragStart,
      onDrop = props.onDrop,
      onDragEnd = props.onDragEnd,
      isDraggable = props.isDraggable,
      dragOver = props.dragOver,
      role = props.role,
      virtualColumn = props.virtualColumn;
  var isFiltered = column.filterValue && column.filterValue.length > 0;
  var textStyle = React.useMemo(function () {
    var margin = 0;
    if (column.isSorted) margin++;
    if (column.isGrouped) margin++;
    if (isFiltered) margin++;

    if (margin === 0) {
      return {};
    }

    if (margin > 0) margin += 0.5;

    if (RTL.getRTL()) {
      return {
        marginLeft: "".concat(margin, "rem")
      };
    }

    return {
      marginRight: "".concat(margin, "rem")
    };
  }, [column.isSorted, column.isGrouped, isFiltered]);
  var hasPopover = column.canGroupBy || column.canSort || column.canFilter;
  var popoverRef = React.useRef(null);
  var onOpenPopover = React.useCallback(function (e) {
    if (popoverRef.current && hasPopover) {
      popoverRef.current.openBy(e.currentTarget);
    }
  }, [popoverRef, hasPopover]);
  if (!column) return null;
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: "".concat(virtualColumn.size, "px"),
      transform: "translateX(".concat(virtualColumn.start, "px)")
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    id: id,
    className: className,
    style: _objectSpread(_objectSpread({}, style), {}, {
      cursor: hasPopover ? 'pointer' : 'auto',
      borderLeft: dragOver ? "3px solid ".concat(ThemingParameters.ThemingParameters.sapSelectedColor) : undefined
    }),
    role: role,
    draggable: isDraggable,
    onDragEnter: onDragEnter,
    onDragOver: onDragOver,
    onDragStart: onDragStart,
    onDrop: onDrop,
    onDragEnd: onDragEnd,
    "data-column-id": id,
    onClick: onOpenPopover
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.header,
    "data-h-align": column.hAlign
  }, /*#__PURE__*/React__default.createElement(Text$1.Text, {
    tooltip: typeof children === 'string' ? children : null,
    wrapping: false,
    style: textStyle,
    className: classes.text
  }, children), /*#__PURE__*/React__default.createElement("div", {
    className: classes.iconContainer
  }, isFiltered && /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
    name: "filter"
  }), column.isSorted && /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
    name: column.isSortedDesc ? 'sort-descending' : 'sort-ascending'
  }), column.isGrouped && /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
    name: "group-2"
  }))), hasPopover && /*#__PURE__*/React__default.createElement(ColumnHeaderModal, {
    column: column,
    onSort: onSort,
    onGroupBy: onGroupBy,
    ref: popoverRef
  })));
};

var styles$5 = {
  resizer: {
    display: 'inline-block',
    width: '3px',
    height: '100%',
    position: 'absolute',
    bottom: 0,
    top: 0,
    transform: 'translateX(-50%)',
    zIndex: 1,
    cursor: 'col-resize',
    willChange: 'transform',
    '&:hover, &:active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapContent_DragAndDropActiveColor
    }
  }
};
var useStyles$4 = reactJss.createUseStyles(styles$5);
var ColumnHeaderContainer = function ColumnHeaderContainer(props) {
  var headerProps = props.headerProps,
      headerGroup = props.headerGroup,
      onSort = props.onSort,
      onGroupByChanged = props.onGroupByChanged,
      onDragStart = props.onDragStart,
      onDragOver = props.onDragOver,
      onDrop = props.onDrop,
      onDragEnter = props.onDragEnter,
      onDragEnd = props.onDragEnd,
      dragOver = props.dragOver,
      tableRef = props.tableRef,
      visibleColumnsWidth = props.visibleColumnsWidth,
      overscanCountHorizontal = props.overscanCountHorizontal,
      resizeInfo = props.resizeInfo,
      reactWindowRef = props.reactWindowRef;
  var columnVirtualizer = reactVirtual.useVirtual({
    size: visibleColumnsWidth.length,
    parentRef: tableRef,
    estimateSize: React.useCallback(function (index) {
      return visibleColumnsWidth[index];
    }, [visibleColumnsWidth]),
    horizontal: true,
    overscan: overscanCountHorizontal
  });
  reactWindowRef.current = _objectSpread(_objectSpread({}, reactWindowRef.current), {}, {
    horizontalScrollToOffset: columnVirtualizer.scrollToOffset,
    horizontalScrollToIndex: columnVirtualizer.scrollToIndex
  });
  var classes = useStyles$4();
  return /*#__PURE__*/React__default.createElement("div", _extends({}, headerProps, {
    role: "rowgroup",
    style: {
      width: "".concat(columnVirtualizer.totalSize, "px")
    }
  }), columnVirtualizer.virtualItems.map(function (virtualColumn) {
    var column = headerGroup.headers[virtualColumn.index];
    var isLastColumn = !column.disableResizing && virtualColumn.index + 1 === headerGroup.headers.length;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, column.canResize && column.getResizerProps && /*#__PURE__*/React__default.createElement("div", _extends({}, column.getResizerProps(), {
      "data-resizer": true,
      className: classes.resizer,
      style: {
        left: "".concat(column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0), "px")
      }
    })), /*#__PURE__*/React__default.createElement(ColumnHeader, _extends({}, column.getHeaderProps(), {
      onSort: onSort,
      onGroupBy: onGroupByChanged,
      onDragStart: onDragStart,
      onDragOver: onDragOver,
      onDrop: onDrop,
      onDragEnter: onDragEnter,
      onDragEnd: onDragEnd,
      dragOver: column.id === dragOver,
      isDraggable: column.canReorder && !resizeInfo.isResizingColumn,
      virtualColumn: virtualColumn
    }), column.render('Header')));
  }));
};

var DefaultFilterComponent = function DefaultFilterComponent(_ref) {
  var column = _ref.column;
  var handleChange = React.useCallback(function (e) {
    column.setFilter(e.target.value || undefined);
  }, [column.setFilter]);
  return /*#__PURE__*/React__default.createElement(Input$1.Input, {
    onInput: handleChange
  }, column.filterValue);
};

var Cell = function Cell(_ref) {
  var _ref$cell = _ref.cell,
      _ref$cell$value = _ref$cell.value,
      value = _ref$cell$value === void 0 ? '' : _ref$cell$value,
      isGrouped = _ref$cell.isGrouped,
      row = _ref.row;
  var cellContent = "".concat(value !== null && value !== void 0 ? value : '');

  if (isGrouped) {
    cellContent += " (".concat(row.subRows.length, ")");
  }

  return /*#__PURE__*/React__default.createElement(Text$1.Text, {
    wrapping: false,
    tooltip: cellContent
  }, cellContent);
};

var tableGroupExpandCollapseIcon = {
  color: 'var(--sapContent_IconColor)',
  height: '0.75rem',
  width: '0.75rem',
  padding: '0.625rem',
  display: 'block'
};

var getPadding = function getPadding(level) {
  switch (level) {
    case 0:
      return 0;

    case 1:
      return CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel1;

    case 2:
      return CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel2;

    case 3:
      return CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel3;

    default:
      return "calc(".concat(CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel3, " + ").concat(level - 3, "rem * 0.5)");
  }
};

var Expandable = function Expandable(props) {
  var cell = props.cell,
      row = props.row,
      column = props.column,
      columns = props.columns;
  var tableColumns = columns.filter(function (_ref) {
    var id = _ref.id;
    return id !== '__ui5wcr__internal_selection_column' && id !== '__ui5wcr__internal_highlight_column';
  });
  var columnIndex = tableColumns.findIndex(function (col) {
    return col.id === column.id;
  });
  var paddingLeft;

  if (row.canExpand) {
    paddingLeft = columnIndex === 0 ? getPadding(row.depth) : 0;
  } else {
    paddingLeft = columnIndex === 0 ? "calc(".concat(getPadding(row.depth), " + 2rem)") : 0;
  }

  var style = {
    paddingLeft: paddingLeft
  };
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, columnIndex === 0 && row.canExpand ? /*#__PURE__*/React__default.createElement("span", row.getToggleRowExpandedProps({
    style: style
  }), /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
    name: "".concat(row.isExpanded ? 'navigation-down-arrow' : 'navigation-right-arrow'),
    style: tableGroupExpandCollapseIcon
  })) : /*#__PURE__*/React__default.createElement("span", {
    style: style
  }), cell.render('Cell'));
};

var tableGroupExpandCollapseIcon$1 = {
  color: 'var(--sapContent_IconColor)',
  height: '0.75rem',
  width: '0.75rem',
  padding: '0.625rem',
  display: 'block'
};
var Grouped = function Grouped(props) {
  var cell = props.cell,
      row = props.row;
  var style = {};

  if (cell.column.hAlign && (cell.column.hAlign !== TextAlign.TextAlign.Left || cell.column.hAlign !== TextAlign.TextAlign.Begin)) {
    style.marginRight = 'auto';
  }

  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("span", row.getToggleRowExpandedProps({
    style: style
  }), /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
    name: "".concat(row.isExpanded ? 'navigation-down-arrow' : 'navigation-right-arrow'),
    style: tableGroupExpandCollapseIcon$1
  })), cell.render('Cell'));
};

var RepeatedValue = function RepeatedValue() {
  return null;
};

var DEFAULT_COLUMN_WIDTH = 60;

var defaultFilterMethod = function defaultFilterMethod(filter, row) {
  return new RegExp(filter.value, 'gi').test(String(row[filter.id]));
};

var DefaultColumn = {
  Filter: DefaultFilterComponent,
  canResize: true,
  canReorder: true,
  minWidth: DEFAULT_COLUMN_WIDTH,
  vAlign: VerticalAlign.VerticalAlign.Middle,
  defaultFilter: defaultFilterMethod,
  Grouped: Grouped,
  Cell: Cell,
  Expandable: Expandable,
  RepeatedValue: RepeatedValue
};

var styles$6 = {
  position: 'absolute',
  top: CssSizeVariables.CssSizeVariables.sapWcrAnalyticalTableRowHeight,
  left: 0,
  right: 0,
  zIndex: 1
};

var DefaultLoadingComponent = function DefaultLoadingComponent(_ref) {
  var style = _ref.style;
  return /*#__PURE__*/React__default.createElement(Loader$1.Loader, {
    delay: 500,
    style: _objectSpread(_objectSpread({}, styles$6), style)
  });
};

DefaultLoadingComponent.displayName = 'DefaultLoadingComponent';

var getArrayOfLength = function getArrayOfLength(len) {
  return Array.from(Array(len).keys());
};

var TableRow = function TableRow(_ref) {
  var columns = _ref.columns,
      y = _ref.y,
      row = _ref.row;
  var columnOffset = 0;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, columns.map(function (column, i) {
    var el = /*#__PURE__*/React__default.createElement("rect", {
      key: "column-".concat(i, "-row-").concat(row),
      x: columnOffset + 2,
      y: y,
      rx: "2",
      ry: "8",
      width: column.totalWidth - 4,
      height: "16"
    });
    columnOffset += column.totalWidth;
    return el;
  }));
};

var TablePlaceholder = function TablePlaceholder(props) {
  var columns = props.columns,
      _props$rows = props.rows,
      rows = _props$rows === void 0 ? 5 : _props$rows,
      style = props.style,
      rowHeight = props.rowHeight,
      tableWidth = props.tableWidth;
  var height = rows * rowHeight;
  var innerStyles = React.useMemo(function () {
    return _objectSpread({
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Background
    }, style);
  }, [style, ThemingParameters.ThemingParameters.sapList_Background]);
  return /*#__PURE__*/React__default.createElement(ContentLoader, {
    style: innerStyles,
    height: height,
    width: tableWidth,
    speed: 2,
    backgroundColor: ThemingParameters.ThemingParameters.sapContent_ImagePlaceholderBackground,
    foregroundColor: ThemingParameters.ThemingParameters.sapContent_ImagePlaceholderForegroundColor,
    backgroundOpacity: ThemingParameters.ThemingParameters.sapContent_DisabledOpacity
  }, getArrayOfLength(rows).map(function (_, index) {
    return /*#__PURE__*/React__default.createElement(TableRow, {
      key: index,
      columns: columns,
      y: rowHeight * index + rowHeight / 2,
      row: index
    });
  }));
};

var DefaultNoDataComponent = function DefaultNoDataComponent(_ref) {
  var noDataText = _ref.noDataText,
      className = _ref.className,
      style = _ref.style;
  return /*#__PURE__*/React__default.createElement("div", {
    className: className,
    style: style
  }, noDataText);
};

var getColumnId = function getColumnId(column) {
  return typeof column.accessor === 'string' ? column.accessor : column.id;
};

var useDragAndDrop = function useDragAndDrop(props, setColumnOrder, columnOrder, resizeInfo, columns) {
  var onColumnsReordered = props.onColumnsReordered;

  var _useState = React.useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      dragOver = _useState2[0],
      setDragOver = _useState2[1];

  var handleDragStart = React.useCallback(function (e) {
    if (resizeInfo.isResizingColumn) {
      e.preventDefault();
      return;
    }

    e.dataTransfer.setData('colId', e.currentTarget.dataset.columnId);
  }, [resizeInfo.isResizingColumn]);
  var handleDragOver = React.useCallback(function (e) {
    e.preventDefault();
  }, []);
  var handleDragEnter = React.useCallback(function (e) {
    setDragOver(e.currentTarget.dataset.columnId);
  }, []);
  var handleOnDrop = React.useCallback(function (e) {
    setDragOver('');
    var droppedColId = e.currentTarget.dataset.columnId;
    var draggedColId = e.dataTransfer.getData('colId');
    if (droppedColId === draggedColId) return;
    var internalColumnOrder = columnOrder.length > 0 ? columnOrder : columns.map(function (col) {
      return getColumnId(col);
    });
    var droppedColIdx = internalColumnOrder.findIndex(function (col) {
      return col === droppedColId;
    });
    var draggedColIdx = internalColumnOrder.findIndex(function (col) {
      return col === draggedColId;
    });

    var tempCols = _toConsumableArray(internalColumnOrder);

    var targetIndex = droppedColIdx > draggedColIdx ? droppedColIdx - 1 : droppedColIdx;
    tempCols.splice(targetIndex, 0, tempCols.splice(draggedColIdx, 1)[0]);
    setColumnOrder(tempCols);
    var columnsNewOrder = tempCols.map(function (tempColId) {
      return columns.find(function (col) {
        return getColumnId(col) === tempColId;
      });
    });
    onColumnsReordered(Utils.enrichEventWithDetails(e, {
      columnsNewOrder: columnsNewOrder,
      column: columns[draggedColIdx]
    }));
  }, [columnOrder, onColumnsReordered, columns]);
  var handleOnDragEnd = React.useCallback(function () {
    setDragOver('');
  }, [dragOver]);
  return [dragOver, handleDragEnter, handleDragStart, handleDragOver, handleOnDrop, handleOnDragEnd];
};

var ROW_SAMPLE_SIZE = 20;
var DEFAULT_HEADER_NUM_CHAR = 10;
var MAX_WIDTH = 700; // a function, which approximates header px sizes given a character length

var approximateHeaderPxFromCharLength = function approximateHeaderPxFromCharLength(charLength) {
  return charLength < 15 ? Math.sqrt(charLength * 1500) : 8 * charLength;
};

var approximateContentPxFromCharLength = function approximateContentPxFromCharLength(charLength) {
  return 8 * charLength;
};

var columnsDeps = function columnsDeps(deps, _ref) {
  var _ref$instance = _ref.instance,
      state = _ref$instance.state,
      webComponentsReactProperties = _ref$instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray(deps), [state.tableClientWidth, webComponentsReactProperties.scaleWidthMode, webComponentsReactProperties.loading]);
};

var columns = function columns(_columns, _ref2) {
  var instance = _ref2.instance;

  if (!instance.state || !instance.rows) {
    return _columns;
  }

  var rows = instance.rows,
      state = instance.state;
  var hiddenColumns = state.hiddenColumns,
      totalWidth = state.tableClientWidth;
  var _instance$webComponen = instance.webComponentsReactProperties,
      scaleWidthMode = _instance$webComponen.scaleWidthMode,
      loading = _instance$webComponen.loading;
  if (_columns.length === 0 || !totalWidth) return _columns;

  var visibleColumns = _columns.filter(Boolean).filter(function (item) {
    var _item$isVisible;

    return ((_item$isVisible = item.isVisible) !== null && _item$isVisible !== void 0 ? _item$isVisible : true) && !hiddenColumns.includes(item.accessor);
  });

  var calculateDefaultTableWidth = function calculateDefaultTableWidth() {
    var columnsWithWidthProperties = visibleColumns.filter(function (column) {
      var _ref3, _ref4, _column$width;

      return (_ref3 = (_ref4 = (_column$width = column.width) !== null && _column$width !== void 0 ? _column$width : column.minWidth) !== null && _ref4 !== void 0 ? _ref4 : column.maxWidth) !== null && _ref3 !== void 0 ? _ref3 : false;
    }).map(function (column) {
      var _column$id;

      return {
        accessor: (_column$id = column.id) !== null && _column$id !== void 0 ? _column$id : column.accessor,
        minWidth: column.minWidth,
        width: column.width,
        maxWidth: column.maxWidth
      };
    });
    var availableWidth = totalWidth;
    var defaultColumnsCount = visibleColumns.length;
    var columnsWithFixedWidth = columnsWithWidthProperties.map(function (column) {
      var width = column.width,
          minWidth = column.minWidth,
          maxWidth = column.maxWidth,
          accessor = column.accessor;

      if (width) {
        // necessary because of default minWidth
        var acceptedWidth = accessor !== '__ui5wcr__internal_highlight_column' && accessor !== '__ui5wcr__internal_selection_column' && width < 60 ? 60 : width;
        availableWidth -= acceptedWidth;
        defaultColumnsCount--;
        return acceptedWidth;
      }

      var columnsWithMaxWidth = columnsWithWidthProperties.filter(function (item) {
        return item.maxWidth;
      });
      var aggregatedColumnsMaxWidth = columnsWithMaxWidth.reduce(function (acc, cur) {
        return acc + cur.maxWidth;
      }, 0);
      var aggregatedColumnsMinWidth = columnsWithWidthProperties.filter(function (item) {
        return item.minWidth && !item.maxWidth;
      }).reduce(function (acc, cur) {
        return acc + cur.minWidth;
      }, 0);

      if (minWidth > availableWidth / defaultColumnsCount) {
        // don't apply minWidth if enough space is available because of maxWidth properties
        if (availableWidth - aggregatedColumnsMaxWidth > aggregatedColumnsMinWidth + (_columns.length - columnsWithWidthProperties.length) * 60) {
          // apply minWidth only if it's larger than the calculated available width
          if (minWidth > (availableWidth - aggregatedColumnsMaxWidth) / columnsWithMaxWidth.length) {
            availableWidth -= minWidth;
            defaultColumnsCount--;
            return minWidth;
          }

          return false;
        }

        availableWidth -= minWidth;
        defaultColumnsCount--;
        return minWidth;
      }

      if (maxWidth < availableWidth / defaultColumnsCount) {
        availableWidth -= maxWidth;
        defaultColumnsCount--;
        return maxWidth;
      }

      return false;
    }).filter(Boolean);
    var fixedWidth = columnsWithFixedWidth.reduce(function (acc, val) {
      return acc + val;
    }, 0); // check if columns are visible and table has width

    if (visibleColumns.length > 0 && totalWidth > 0) {
      // set fixedWidth as defaultWidth if all visible columns have fixed value
      if (visibleColumns.length === columnsWithFixedWidth.length) {
        return fixedWidth / visibleColumns.length;
      } // spread default columns


      if (totalWidth >= fixedWidth + defaultColumnsCount * DEFAULT_COLUMN_WIDTH) {
        return (totalWidth - fixedWidth) / defaultColumnsCount;
      }
    }

    return DEFAULT_COLUMN_WIDTH;
  };

  var hasData = rows.some(function (row) {
    var _row$original;

    return !((_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow);
  });

  if (scaleWidthMode === TableScaleWidthMode.TableScaleWidthMode.Default || !hasData && loading) {
    var defaultWidth = calculateDefaultTableWidth();
    return _columns.map(function (column) {
      var _column$width2;

      return _objectSpread(_objectSpread({}, column), {}, {
        width: (_column$width2 = column.width) !== null && _column$width2 !== void 0 ? _column$width2 : defaultWidth
      });
    });
  }

  var rowSample = rows.slice(0, ROW_SAMPLE_SIZE);
  var columnMeta = visibleColumns.reduce(function (acc, column) {
    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column') {
      acc[column.accessor] = {
        minHeaderWidth: column.width,
        fullWidth: column.width,
        contentCharAvg: 0
      };
      return acc;
    }

    var headerLength = typeof column.Header === 'string' ? column.Header.length : DEFAULT_HEADER_NUM_CHAR; // max character length

    var contentMaxCharLength = Math.max.apply(Math, [headerLength].concat(_toConsumableArray(rowSample.map(function (row) {
      var _row$values;

      var dataPoint = (_row$values = row.values) === null || _row$values === void 0 ? void 0 : _row$values[column.accessor];

      if (dataPoint) {
        if (typeof dataPoint === 'string') return dataPoint.length;
        if (typeof dataPoint === 'number') return (dataPoint + '').length;
      }

      return 0;
    })))); // avg character length

    var contentCharAvg = rowSample.reduce(function (acc, item) {
      var _item$values;

      var dataPoint = (_item$values = item.values) === null || _item$values === void 0 ? void 0 : _item$values[column.accessor];
      var val = 0;

      if (dataPoint) {
        if (typeof dataPoint === 'string') val = dataPoint.length;
        if (typeof dataPoint === 'number') val = (dataPoint + '').length;
      }

      return acc + val;
    }, 0) / rowSample.length;
    var minHeaderWidth = approximateHeaderPxFromCharLength(headerLength);
    acc[column.accessor] = {
      minHeaderWidth: minHeaderWidth,
      fullWidth: Math.max(minHeaderWidth, approximateContentPxFromCharLength(contentMaxCharLength)),
      contentCharAvg: contentCharAvg
    };
    return acc;
  }, {});
  var totalCharNum = Object.values(columnMeta).reduce(function (acc, item) {
    return acc + item.contentCharAvg;
  }, 0);
  var reservedWidth = visibleColumns.reduce(function (acc, column) {
    var _columnMeta$column$ac = columnMeta[column.accessor],
        minHeaderWidth = _columnMeta$column$ac.minHeaderWidth,
        fullWidth = _columnMeta$column$ac.fullWidth;
    return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0, scaleWidthMode === TableScaleWidthMode.TableScaleWidthMode.Grow ? fullWidth : 0) || 0;
  }, 0);
  var availableWidth = totalWidth - reservedWidth;

  if (scaleWidthMode === TableScaleWidthMode.TableScaleWidthMode.Smart || availableWidth > 0) {
    if (scaleWidthMode === TableScaleWidthMode.TableScaleWidthMode.Grow) {
      reservedWidth = visibleColumns.reduce(function (acc, column) {
        var minHeaderWidth = columnMeta[column.accessor].minHeaderWidth;
        return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0) || 0;
      }, 0);
      availableWidth = totalWidth - reservedWidth;
    }

    return _columns.map(function (column) {
      var _column$isVisible;

      var isColumnVisible = ((_column$isVisible = column.isVisible) !== null && _column$isVisible !== void 0 ? _column$isVisible : true) && !hiddenColumns.includes(column.accessor);

      if (isColumnVisible) {
        var _column$width3, _column$minWidth;

        var _columnMeta$column$ac2 = columnMeta[column.accessor],
            minHeaderWidth = _columnMeta$column$ac2.minHeaderWidth,
            contentCharAvg = _columnMeta$column$ac2.contentCharAvg;
        var additionalSpaceFactor = totalCharNum > 0 ? contentCharAvg / totalCharNum : 1 / visibleColumns.length;
        var targetWidth = additionalSpaceFactor * availableWidth + minHeaderWidth;
        return _objectSpread(_objectSpread({}, column), {}, {
          width: (_column$width3 = column.width) !== null && _column$width3 !== void 0 ? _column$width3 : targetWidth,
          minWidth: (_column$minWidth = column.minWidth) !== null && _column$minWidth !== void 0 ? _column$minWidth : minHeaderWidth
        });
      }

      return column;
    });
  } // TableScaleWidthMode Grow


  return _columns.map(function (column) {
    var _column$isVisible2;

    var isColumnVisible = ((_column$isVisible2 = column.isVisible) !== null && _column$isVisible2 !== void 0 ? _column$isVisible2 : true) && !hiddenColumns.includes(column.accessor);

    if (isColumnVisible) {
      var _column$width4;

      var fullWidth = columnMeta[column.accessor].fullWidth;
      return _objectSpread(_objectSpread({}, column), {}, {
        width: (_column$width4 = column.width) !== null && _column$width4 !== void 0 ? _column$width4 : fullWidth,
        maxWidth: MAX_WIDTH
      });
    }

    return column;
  });
};

var useDynamicColumnWidths = function useDynamicColumnWidths(hooks) {
  hooks.columns.push(columns);
  hooks.columnsDeps.push(columnsDeps);
};

var baseStyles = {
  width: '100%',
  height: '100%'
};
var StyleMap = new Map();
StyleMap.set(ValueState.ValueState.None, baseStyles);
StyleMap.set(ValueState.ValueState.Success, _objectSpread(_objectSpread({}, baseStyles), {}, {
  backgroundColor: ThemingParameters.ThemingParameters.sapSuccessColor
}));
StyleMap.set(ValueState.ValueState.Warning, _objectSpread(_objectSpread({}, baseStyles), {}, {
  backgroundColor: ThemingParameters.ThemingParameters.sapWarningColor
}));
StyleMap.set(ValueState.ValueState.Error, _objectSpread(_objectSpread({}, baseStyles), {}, {
  backgroundColor: ThemingParameters.ThemingParameters.sapErrorColor
}));
StyleMap.set(ValueState.ValueState.Information, _objectSpread(_objectSpread({}, baseStyles), {}, {
  backgroundColor: ThemingParameters.ThemingParameters.sapInformationColor
}));
/*
 * COMPONENTS
 */

var Header = function Header() {
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      width: '6px'
    }
  });
};

var Cell$1 = function Cell(_ref) {
  var value = _ref.cell.value;
  return /*#__PURE__*/React__default.createElement("div", {
    style: StyleMap.get(value)
  });
};
/*
 * TABLE HOOKS
 */


var columnsDeps$1 = function columnsDeps(deps, _ref2) {
  var webComponentsReactProperties = _ref2.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray(deps), [webComponentsReactProperties.withRowHighlight, webComponentsReactProperties.highlightField]);
};

var visibleColumnsDeps = function visibleColumnsDeps(deps, _ref3) {
  var instance = _ref3.instance;
  return [].concat(_toConsumableArray(deps), [instance.webComponentsReactProperties.withRowHighlight]);
};

var visibleColumns = function visibleColumns(currentVisibleColumns, _ref4) {
  var webComponentsReactProperties = _ref4.instance.webComponentsReactProperties;

  if (!webComponentsReactProperties.withRowHighlight) {
    return currentVisibleColumns.filter(function (_ref5) {
      var id = _ref5.id;
      return id !== '__ui5wcr__internal_highlight_column';
    });
  }

  var highlightColumn = currentVisibleColumns.find(function (_ref6) {
    var id = _ref6.id;
    return id === '__ui5wcr__internal_highlight_column';
  });
  return [highlightColumn].concat(_toConsumableArray(currentVisibleColumns.filter(function (_ref7) {
    var id = _ref7.id;
    return id !== '__ui5wcr__internal_highlight_column';
  })));
};

var columns$1 = function columns(currentColumns, _ref8) {
  var instance = _ref8.instance;
  var _instance$webComponen = instance.webComponentsReactProperties,
      withRowHighlight = _instance$webComponen.withRowHighlight,
      highlightField = _instance$webComponen.highlightField;

  if (!withRowHighlight) {
    return currentColumns;
  }

  return [{
    id: '__ui5wcr__internal_highlight_column',
    accessor: highlightField,
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    canReorder: false,
    width: 6,
    minWidth: 6,
    maxWidth: 6,
    Header: Header,
    Cell: Cell$1
  }].concat(_toConsumableArray(currentColumns));
};

var useRowHighlight = function useRowHighlight(hooks) {
  hooks.columns.push(columns$1);
  hooks.columnsDeps.push(columnsDeps$1);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps);
  hooks.visibleColumns.push(visibleColumns);
};
useRowHighlight.pluginName = 'useRowHighlight';

var divStyle = {
  width: '100%',
  height: '100%',
  cursor: 'pointer'
};
var customCheckBoxStyling = {
  cursor: 'pointer',
  verticalAlign: 'middle'
};
/*
 * COMPONENTS
 */

var Header$1 = function Header(_ref) {
  var getToggleAllRowsSelectedProps = _ref.getToggleAllRowsSelectedProps,
      flatRows = _ref.flatRows,
      _ref$webComponentsRea = _ref.webComponentsReactProperties,
      onRowSelected = _ref$webComponentsRea.onRowSelected,
      selectionMode = _ref$webComponentsRea.selectionMode,
      toggleAllRowsSelected = _ref.toggleAllRowsSelected;
  var onChange = React.useCallback(function (e) {
    var allRowsSelected = e.target.checked;
    toggleAllRowsSelected(allRowsSelected);

    if (typeof onRowSelected === 'function') {
      onRowSelected( // cannot use instance.selectedFlatRows here as it only returns all rows on the first level
      Utils.enrichEventWithDetails(e, {
        allRowsSelected: allRowsSelected,
        selectedFlatRows: allRowsSelected ? flatRows : []
      }));
    }
  }, [toggleAllRowsSelected, flatRows]);

  if (selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement(CheckBox$1.CheckBox, _extends({}, getToggleAllRowsSelectedProps(), {
    style: customCheckBoxStyling,
    onChange: onChange
  }));
};

var Cell$2 = function Cell(_ref2) {
  var row = _ref2.row,
      _ref2$webComponentsRe = _ref2.webComponentsReactProperties,
      selectionBehavior = _ref2$webComponentsRe.selectionBehavior,
      selectionMode = _ref2$webComponentsRe.selectionMode;
  var handleCellClick = React.useCallback(function (e) {
    if (TableSelectionBehavior.TableSelectionBehavior.ROW_SELECTOR === selectionBehavior) {
      row.getRowProps().onClick(e, true);
    }
  }, [selectionMode, row]);

  if (row.isGrouped && selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
    return null;
  }

  if (selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
    return /*#__PURE__*/React__default.createElement("div", {
      style: divStyle,
      onClick: handleCellClick
    });
  }

  return /*#__PURE__*/React__default.createElement(CheckBox$1.CheckBox, _extends({}, row.getToggleRowSelectedProps(), {
    onChange: handleCellClick,
    style: customCheckBoxStyling,
    "data-name": "internal_selection_column"
  }));
};
/*
 * TABLE HOOKS
 */


var columnDeps = function columnDeps(deps, _ref3) {
  var webComponentsReactProperties = _ref3.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray(deps), [webComponentsReactProperties.selectionMode, webComponentsReactProperties.selectionBehavior]);
};

var visibleColumnsDeps$1 = function visibleColumnsDeps(deps, _ref4) {
  var instance = _ref4.instance;
  return [].concat(_toConsumableArray(deps), [instance.webComponentsReactProperties.selectionMode, instance.webComponentsReactProperties.selectionBehavior]);
};

var visibleColumns$1 = function visibleColumns(currentVisibleColumns, _ref5) {
  var webComponentsReactProperties = _ref5.instance.webComponentsReactProperties;

  if (webComponentsReactProperties.selectionMode === TableSelectionMode.TableSelectionMode.NONE || webComponentsReactProperties.selectionBehavior === TableSelectionBehavior.TableSelectionBehavior.ROW_ONLY) {
    return currentVisibleColumns;
  }

  var selectionColumn = currentVisibleColumns.find(function (_ref6) {
    var id = _ref6.id;
    return id === '__ui5wcr__internal_selection_column';
  });
  return [selectionColumn].concat(_toConsumableArray(currentVisibleColumns.filter(function (_ref7) {
    var id = _ref7.id;
    return id !== '__ui5wcr__internal_selection_column';
  })));
};

var columns$2 = function columns(currentColumns, _ref8) {
  var instance = _ref8.instance;
  var webComponentsReactProperties = instance.webComponentsReactProperties;
  var selectionMode = webComponentsReactProperties.selectionMode,
      selectionBehavior = webComponentsReactProperties.selectionBehavior,
      tableRef = webComponentsReactProperties.tableRef;

  if (selectionMode === TableSelectionMode.TableSelectionMode.NONE || selectionBehavior === TableSelectionBehavior.TableSelectionBehavior.ROW_ONLY) {
    return currentColumns;
  }

  var selectionColumnWidth = tableRef.current ? parseInt(getComputedStyle(tableRef.current).getPropertyValue("--".concat(CssSizeVariables.CssSizeVariablesNames.sapWcrAnalyticalTableSelectionColumnWidth)), 10) : 47;
  return [{
    id: '__ui5wcr__internal_selection_column',
    accessor: '__ui5wcr__internal_selection_column',
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    canReorder: false,
    width: selectionColumnWidth,
    minWidth: selectionColumnWidth,
    maxWidth: selectionColumnWidth,
    Header: Header$1,
    Cell: Cell$2
  }].concat(_toConsumableArray(currentColumns));
};

var useRowSelectionColumn = function useRowSelectionColumn(hooks) {
  hooks.columns.push(columns$2);
  hooks.columnsDeps.push(columnDeps);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps$1);
  hooks.visibleColumns.push(visibleColumns$1);
};
useRowSelectionColumn.pluginName = 'useRowSelectionColumn';

var tagNamesWhichShouldNotSelectARow = new Set(['UI5-INPUT', 'UI5-LINK', 'UI5-BUTTON', 'UI5-CHECKBOX', 'UI5-COMBOBOX', 'UI5-MULTI-COMBOBOX', 'UI5-SELECT', 'UI5-RADIOBUTTON', 'UI5-SEGMENTEDBUTTON', 'UI5-SWITCH', 'UI5-TOGGLEBUTTON', 'UI5-DATE-PICKER', 'UI5-DATERANGE-PICKER', 'UI5-DATETIME-PICKER', 'UI5-DURATION-PICKER', 'UI5-TIME-PICKER', 'UI5-FILE-UPLOADER']);

var getRowProps = function getRowProps(rowProps, _ref) {
  var row = _ref.row,
      instance = _ref.instance;
  var webComponentsReactProperties = instance.webComponentsReactProperties,
      toggleRowSelected = instance.toggleRowSelected,
      selectedFlatRows = instance.selectedFlatRows;

  if (webComponentsReactProperties.selectionMode === TableSelectionMode.TableSelectionMode.NONE) {
    return rowProps;
  }

  return [rowProps, {
    onClick: function onClick(e) {
      var _e$target, _e$target$dataset, _e$nativeEvent, _row$original;

      var selectionCellClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (((_e$target = e.target) === null || _e$target === void 0 ? void 0 : (_e$target$dataset = _e$target.dataset) === null || _e$target$dataset === void 0 ? void 0 : _e$target$dataset.name) !== 'internal_selection_column' && !(e.markerAllowTableRowSelection === true || ((_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 ? void 0 : _e$nativeEvent.markerAllowTableRowSelection) === true) && tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {
        return;
      } // dont select empty rows


      var isEmptyRow = (_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow;

      if (isEmptyRow) {
        return;
      } // dont select grouped rows


      if (row.isGrouped) {
        return;
      }

      var selectionBehavior = webComponentsReactProperties.selectionBehavior,
          selectionMode = webComponentsReactProperties.selectionMode,
          onRowSelected = webComponentsReactProperties.onRowSelected; // dont continue if the row was clicked and selection mode is row selector only

      if (selectionBehavior === TableSelectionBehavior.TableSelectionBehavior.ROW_SELECTOR && !selectionCellClick) {
        return;
      }

      if (selectionMode === TableSelectionMode.TableSelectionMode.SINGLE_SELECT) {
        var _iterator = _createForOfIteratorHelper(selectedFlatRows),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _row = _step.value;
            toggleRowSelected(_row.id, false);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      instance.toggleRowSelected(row.id); // fire event

      if (typeof onRowSelected === 'function') {
        var payload = {
          row: row,
          isSelected: !row.isSelected,
          selectedFlatRows: !row.isSelected ? [row.id] : []
        };

        if (selectionMode === TableSelectionMode.TableSelectionMode.MULTI_SELECT) {
          payload.selectedFlatRows = !row.isSelected ? [].concat(_toConsumableArray(selectedFlatRows), [row]) : selectedFlatRows.filter(function (prevRow) {
            return prevRow.id !== row.id;
          });
        }

        onRowSelected(Utils.enrichEventWithDetails(e, payload));
      }
    }
  }];
};

var useSingleRowStateSelection = function useSingleRowStateSelection(hooks) {
  hooks.getRowProps.push(getRowProps);
};
useSingleRowStateSelection.pluginName = 'useSingleRowStateSelection';

var getHeaderGroupProps = function getHeaderGroupProps(headerGroupProps, _ref) {
  var instance = _ref.instance;
  var classes = instance.webComponentsReactProperties.classes;
  return [headerGroupProps, {
    className: classes.tableHeaderRow
  }];
};

var getHeaderProps = function getHeaderProps(columnProps, _ref2) {
  var instance = _ref2.instance,
      column = _ref2.column;
  var classes = instance.webComponentsReactProperties.classes;
  var isRTL = RTL.getRTL();
  var lastColumnId = instance.visibleColumns[instance.visibleColumns.length - 1].id;
  var isLastColumn = column.id === lastColumnId;
  var style = {
    width: column.totalWidth
  };

  if (instance.state.isScrollable && isLastColumn) {
    style[isRTL ? 'paddingLeft' : 'paddingRight'] = ThemingParameters.ThemingParameters.sapScrollBar_Dimension;
  }

  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column') {
    style.padding = 0;
  }

  return [columnProps, {
    className: classes.th,
    column: column,
    style: style,
    id: column.id
  }];
};

var ROW_SELECTION_ATTRIBUTE = 'data-is-selected';

var getRowProps$1 = function getRowProps(rowProps, _ref3) {
  var _row$original;

  var instance = _ref3.instance,
      row = _ref3.row;
  var webComponentsReactProperties = instance.webComponentsReactProperties;
  var classes = webComponentsReactProperties.classes,
      selectionBehavior = webComponentsReactProperties.selectionBehavior,
      selectionMode = webComponentsReactProperties.selectionMode,
      alternateRowColor = webComponentsReactProperties.alternateRowColor;
  var isEmptyRow = (_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow;
  var className = classes.tr;
  var rowCanBeSelected = [TableSelectionMode.TableSelectionMode.SINGLE_SELECT, TableSelectionMode.TableSelectionMode.MULTI_SELECT].includes(selectionMode) && !isEmptyRow;

  if (row.isGrouped) {
    className += " ".concat(classes.tableGroupHeader);
  }

  if (alternateRowColor && row.index % 2 !== 0) {
    className += " ".concat(classes.alternateRowColor);
  }

  var newRowProps = {
    className: className,
    role: 'row',
    'aria-rowindex': row.index
  };

  if (rowCanBeSelected) {
    if (TableSelectionBehavior.TableSelectionBehavior.ROW_SELECTOR !== selectionBehavior) {
      newRowProps.className += " ".concat(classes.trActive);
    }

    if (row.isSelected) {
      newRowProps[ROW_SELECTION_ATTRIBUTE] = '';
    }
  }

  return [rowProps, newRowProps];
};

var getCellProps = function getCellProps(cellProps, _ref4) {
  var column = _ref4.cell.column,
      instance = _ref4.instance;
  var columnIndex = instance.visibleColumns.findIndex(function (_ref5) {
    var id = _ref5.id;
    return id === column.id;
  });
  var isLastColumn = instance.visibleColumns.length === columnIndex + 1;
  var classes = instance.webComponentsReactProperties.classes;
  var style = {};

  switch (column.hAlign) {
    case TextAlign.TextAlign.Begin:
      style.justifyContent = 'flex-start';
      style.textAlign = 'start';
      break;

    case TextAlign.TextAlign.Center:
      style.justifyContent = 'center';
      style.textAlign = 'center';
      break;

    case TextAlign.TextAlign.End:
      style.justifyContent = 'flex-end';
      style.textAlign = 'end';
      break;

    case TextAlign.TextAlign.Left:
      style.justifyContent = 'left';
      style.textAlign = 'left';
      break;

    case TextAlign.TextAlign.Right:
      style.justifyContent = 'right';
      style.textAlign = 'right';
      break;
  }

  switch (column.vAlign) {
    case VerticalAlign.VerticalAlign.Bottom:
      style.alignItems = 'flex-end';
      break;

    case VerticalAlign.VerticalAlign.Middle:
      style.alignItems = 'center';
      break;

    case VerticalAlign.VerticalAlign.Top:
      style.alignItems = 'flex-start';
      break;
  }

  var className = classes.tableCell;

  if (column.className) {
    className += " ".concat(column.className);
  }

  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column') {
    style.padding = 0;
  }

  if (isLastColumn && instance.state.isScrollable) {
    style.width = "calc(".concat(column.totalWidth, "px - ").concat(ThemingParameters.ThemingParameters.sapScrollBar_Dimension, ")");
  } else {
    style.width = "".concat(column.totalWidth, "px");
  }

  return [cellProps, {
    className: className,
    style: style,
    tabIndex: -1,
    'aria-colindex': columnIndex + 1 // aria index is 1 based, not 0

  }];
};

var useStyling = function useStyling(hooks) {
  hooks.getHeaderGroupProps.push(getHeaderGroupProps);
  hooks.getHeaderProps.push(getHeaderProps);
  hooks.getRowProps.push(getRowProps$1);
  hooks.getCellProps.push(getCellProps);
};
useStyling.pluginName = 'useStyling';

var useTableScrollHandles = function useTableScrollHandles(ref) {
  var analyticalTableRef = useConsolidatedRef.useConsolidatedRef(ref);
  var reactWindowRef = React.useRef({});
  React.useEffect(function () {
    if (analyticalTableRef.current) {
      Object.assign(analyticalTableRef.current, {
        scrollTo: function scrollTo(offset, align) {
          var _reactWindowRef$curre;

          if (typeof ((_reactWindowRef$curre = reactWindowRef.current) === null || _reactWindowRef$curre === void 0 ? void 0 : _reactWindowRef$curre.scrollToOffset) === 'function') {
            reactWindowRef.current.scrollToOffset(offset, {
              align: align
            });
          }
        },
        scrollToItem: function scrollToItem(index, align) {
          var _reactWindowRef$curre2;

          if (typeof ((_reactWindowRef$curre2 = reactWindowRef.current) === null || _reactWindowRef$curre2 === void 0 ? void 0 : _reactWindowRef$curre2.scrollToIndex) === 'function') {
            reactWindowRef.current.scrollToIndex(index, {
              align: align
            });
          }
        },
        horizontalScrollTo: function horizontalScrollTo(offset, align) {
          var _reactWindowRef$curre3;

          if (typeof ((_reactWindowRef$curre3 = reactWindowRef.current) === null || _reactWindowRef$curre3 === void 0 ? void 0 : _reactWindowRef$curre3.horizontalScrollToOffset) === 'function') {
            reactWindowRef.current.horizontalScrollToOffset(offset, {
              align: align
            });
          }
        },
        horizontalScrollToItem: function horizontalScrollToItem(index, align) {
          var _reactWindowRef$curre4;

          if (typeof ((_reactWindowRef$curre4 = reactWindowRef.current) === null || _reactWindowRef$curre4 === void 0 ? void 0 : _reactWindowRef$curre4.horizontalScrollToIndex) === 'function') {
            reactWindowRef.current.horizontalScrollToIndex(index, {
              align: align
            });
          }
        }
      });
    }
  }, [analyticalTableRef.current, reactWindowRef.current.scrollToIndex, reactWindowRef.current.scrollToOffset, reactWindowRef.current.horizontalScrollToIndex, reactWindowRef.current.horizontalScrollToOffset]);
  return [analyticalTableRef, reactWindowRef];
};

var getToggleRowExpandedProps = function getToggleRowExpandedProps(rowProps, _ref) {
  var row = _ref.row,
      instance = _ref.instance;
  var _instance$webComponen = instance.webComponentsReactProperties,
      onRowExpandChange = _instance$webComponen.onRowExpandChange,
      isTreeTable = _instance$webComponen.isTreeTable;
  var onClick = React.useCallback(function (e) {
    e.stopPropagation();
    e.persist();
    row.toggleRowExpanded();
    var column = null;

    if (!isTreeTable) {
      column = row.cells.find(function (cell) {
        return cell.column.id === row.groupByID;
      }).column;
    }

    onRowExpandChange(Utils.enrichEventWithDetails(e, {
      row: row,
      column: column
    }));
  }, [row, isTreeTable, onRowExpandChange]);
  return [rowProps, {
    onClick: onClick
  }];
};

var useToggleRowExpand = function useToggleRowExpand(hooks) {
  hooks.getToggleRowExpandedProps.push(getToggleRowExpandedProps);
};
useToggleRowExpand.pluginName = 'useToggleRowExpand';

var getVisibleColumnsWidth = function getVisibleColumnsWidth(instance) {
  var visibleColumnsWidth = instance.visibleColumns.map(function (item) {
    return item.totalWidth;
  });
  Object.assign(instance, {
    visibleColumnsWidth: visibleColumnsWidth
  });
};

var useVisibleColumnsWidth = function useVisibleColumnsWidth(hooks) {
  hooks.useInstance.push(getVisibleColumnsWidth);
};
useVisibleColumnsWidth.pluginName = 'useVisibleColumnsWidth';

var stateReducer = function stateReducer(newState, action) {
  var payload = action.payload;

  switch (action.type) {
    case 'TABLE_RESIZE':
      return _objectSpread(_objectSpread({}, newState), {}, {
        tableClientWidth: payload.tableClientWidth
      });

    case 'TABLE_SCROLLING_ENABLED':
      return _objectSpread(_objectSpread({}, newState), {}, {
        isScrollable: payload.isScrollable
      });

    case 'SET_SELECTED_ROW_IDS':
      return _objectSpread(_objectSpread({}, newState), {}, {
        selectedRowIds: payload.selectedRowIds
      });

    default:
      return newState;
  }
};

var styles$7 = {
  minHeight: '1.5rem',
  display: 'flex',
  alignItems: 'center'
};
var TitleBar = function TitleBar(props) {
  var children = props.children;
  return /*#__PURE__*/React__default.createElement("div", {
    style: styles$7
  }, typeof children === 'string' && /*#__PURE__*/React__default.createElement(Title$1.Title, null, children), /*#__PURE__*/React.isValidElement(children) && children);
};

var orderByFn = function orderByFn(rows, functions, directions) {
  var wrapSortFn = function wrapSortFn(sortFn, index) {
    var desc = directions[index] === false || directions[index] === 'desc';
    return function (rowA, rowB) {
      var _rowA$original, _rowB$original, _rowA$original2, _rowB$original2, _rowA$original3, _rowB$original3;

      if (((_rowA$original = rowA.original) === null || _rowA$original === void 0 ? void 0 : _rowA$original.emptyRow) && !((_rowB$original = rowB.original) === null || _rowB$original === void 0 ? void 0 : _rowB$original.emptyRow)) {
        return desc ? -1 : 1;
      }

      if (!((_rowA$original2 = rowA.original) === null || _rowA$original2 === void 0 ? void 0 : _rowA$original2.emptyRow) && ((_rowB$original2 = rowB.original) === null || _rowB$original2 === void 0 ? void 0 : _rowB$original2.emptyRow)) {
        return desc ? 1 : -1;
      }

      if (((_rowA$original3 = rowA.original) === null || _rowA$original3 === void 0 ? void 0 : _rowA$original3.emptyRow) && ((_rowB$original3 = rowB.original) === null || _rowB$original3 === void 0 ? void 0 : _rowB$original3.emptyRow)) {
        return 0;
      }

      return sortFn(rowA, rowB);
    };
  };

  var wrappedSortfunctions = functions.map(wrapSortFn);
  return reactTable.defaultOrderByFn(rows, wrappedSortfunctions, directions);
};

var VirtualTableBody = function VirtualTableBody(props) {
  var classes = props.classes,
      prepareRow = props.prepareRow,
      rows = props.rows,
      minRows = props.minRows,
      reactWindowRef = props.reactWindowRef,
      isTreeTable = props.isTreeTable,
      internalRowHeight = props.internalRowHeight,
      visibleRows = props.visibleRows,
      overscanCount = props.overscanCount,
      visibleColumns = props.visibleColumns,
      tableRef = props.tableRef,
      visibleColumnsWidth = props.visibleColumnsWidth,
      parentRef = props.parentRef,
      overscanCountHorizontal = props.overscanCountHorizontal;
  var itemCount = Math.max(minRows, rows.length);
  var overscan = overscanCount ? overscanCount : Math.floor(visibleRows / 2);
  var consolidatedParentRef = useConsolidatedRef.useConsolidatedRef(parentRef);
  var rowVirtualizer = reactVirtual.useVirtual({
    size: itemCount,
    parentRef: consolidatedParentRef,
    estimateSize: React__default.useCallback(function () {
      return internalRowHeight;
    }, [internalRowHeight]),
    overscan: overscan
  });
  var columnVirtualizer = reactVirtual.useVirtual({
    size: visibleColumns.length,
    parentRef: tableRef,
    estimateSize: React.useCallback(function (index) {
      return visibleColumnsWidth[index];
    }, [visibleColumnsWidth]),
    horizontal: true,
    overscan: overscanCountHorizontal
  });
  reactWindowRef.current = _objectSpread(_objectSpread({}, reactWindowRef.current), {}, {
    scrollToOffset: rowVirtualizer.scrollToOffset,
    scrollToIndex: rowVirtualizer.scrollToIndex
  });
  var currentlyFocusedCell = React.useRef(null);
  var onTableFocus = React.useCallback(function (e) {
    var firstCell = e.target.querySelector('div[role="row"]:first-child div[role="cell"]:first-child');

    if (firstCell) {
      firstCell.tabIndex = 0;
      firstCell.focus();
      currentlyFocusedCell.current = firstCell;
    }
  }, [currentlyFocusedCell]);
  var onKeyboardNavigation = React.useCallback(function (e) {
    if (currentlyFocusedCell.current) {
      switch (e.key) {
        case 'ArrowRight':
          {
            var newElement = currentlyFocusedCell.current.nextElementSibling;

            if (newElement) {
              currentlyFocusedCell.current.tabIndex = -1;
              newElement.tabIndex = 0;
              newElement.focus();
              currentlyFocusedCell.current = newElement;
            }

            break;
          }

        case 'ArrowLeft':
          {
            var _newElement = currentlyFocusedCell.current.previousElementSibling;

            if (_newElement) {
              currentlyFocusedCell.current.tabIndex = -1;
              _newElement.tabIndex = 0;

              _newElement.focus();

              currentlyFocusedCell.current = _newElement;
            }

            break;
          }

        case 'ArrowDown':
          {
            var nextRow = currentlyFocusedCell.current.parentElement.nextElementSibling;

            if (nextRow) {
              currentlyFocusedCell.current.tabIndex = -1;
              var currentColumnIndex = currentlyFocusedCell.current.getAttribute('aria-colindex');

              var _newElement2 = nextRow.querySelector("div[aria-colindex=\"".concat(currentColumnIndex, "\"]"));

              _newElement2.tabIndex = 0;

              _newElement2.focus();

              currentlyFocusedCell.current = _newElement2;
            }

            break;
          }

        case 'ArrowUp':
          {
            var previousRow = currentlyFocusedCell.current.parentElement.previousElementSibling;

            if (previousRow) {
              currentlyFocusedCell.current.tabIndex = -1;

              var _currentColumnIndex = currentlyFocusedCell.current.getAttribute('aria-colindex');

              var _newElement3 = previousRow.querySelector("div[aria-colindex=\"".concat(_currentColumnIndex, "\"]"));

              _newElement3.tabIndex = 0;

              _newElement3.focus();

              currentlyFocusedCell.current = _newElement3;
            }

            break;
          }
      }
    }
  }, [currentlyFocusedCell]);
  return /*#__PURE__*/React__default.createElement("div", {
    tabIndex: 0,
    onFocus: onTableFocus,
    onKeyDown: onKeyboardNavigation,
    style: {
      position: 'relative',
      height: "".concat(rowVirtualizer.totalSize, "px"),
      width: "".concat(columnVirtualizer.totalSize, "px")
    }
  }, rowVirtualizer.virtualItems.map(function (virtualRow) {
    var row = rows[virtualRow.index];

    if (!row) {
      return /*#__PURE__*/React__default.createElement("div", {
        key: "empty_row_".concat(virtualRow.index),
        className: classes.tr,
        style: {
          height: "".concat(virtualRow.size, "px"),
          transform: "translateY(".concat(virtualRow.start, "px)")
        }
      });
    }

    prepareRow(row);
    var rowProps = row.getRowProps();
    return /*#__PURE__*/React__default.createElement("div", _extends({}, rowProps, {
      style: {
        height: "".concat(virtualRow.size, "px"),
        transform: "translateY(".concat(virtualRow.start, "px)"),
        position: 'absolute'
      }
    }), columnVirtualizer.virtualItems.map(function (virtualColumn) {
      var _row$original;

      var cell = row.cells[virtualColumn.index];
      var cellProps = cell.getCellProps();

      if ((_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow) {
        return /*#__PURE__*/React__default.createElement("div", cellProps);
      }

      var contentToRender;

      if (cell.column.id === '__ui5wcr__internal_highlight_column' || cell.column.id === '__ui5wcr__internal_selection_column') {
        contentToRender = 'Cell';
      } else if (isTreeTable) {
        contentToRender = 'Expandable';
      } else if (cell.isGrouped) {
        contentToRender = 'Grouped';
      } else if (cell.isAggregated) {
        contentToRender = 'Aggregated';
      } else if (cell.isPlaceholder) {
        contentToRender = 'RepeatedValue';
      } else {
        contentToRender = 'Cell';
      } // eslint-disable-next-line react/jsx-key


      return /*#__PURE__*/React__default.createElement("div", _extends({}, cellProps, {
        style: _objectSpread(_objectSpread({}, cellProps.style), {}, {
          position: 'absolute',
          width: "".concat(virtualColumn.size, "px"),
          transform: "translateX(".concat(virtualColumn.start, "px)"),
          top: 0,
          left: 0
        })
      }), cell.render(contentToRender));
    }));
  }));
};

var VirtualTableBodyContainer = function VirtualTableBodyContainer(props) {
  var tableBodyHeight = props.tableBodyHeight,
      totalColumnsWidth = props.totalColumnsWidth,
      children = props.children,
      parentRef = props.parentRef,
      classes = props.classes,
      infiniteScroll = props.infiniteScroll,
      infiniteScrollThreshold = props.infiniteScrollThreshold,
      onLoadMore = props.onLoadMore,
      rows = props.rows,
      internalRowHeight = props.internalRowHeight;

  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isMounted = _useState2[0],
      setIsMounted = _useState2[1];

  React.useEffect(function () {
    if (parentRef.current) {
      setIsMounted(true);
    }
  }, [parentRef.current]);
  var classNames = StyleClassHelper.StyleClassHelper.of(classes.tbody, GlobalStyleClasses.GlobalStyleClasses.sapScrollBar).className;
  var lastScrollTop = React.useRef(0);
  var firedInfiniteLoadEvents = React.useRef(new Set());
  var onScroll = React.useCallback(function (event) {
    var scrollOffset = event.target.scrollTop;
    var isScrollingDown = lastScrollTop.current < scrollOffset;

    if (isScrollingDown && infiniteScroll) {
      lastScrollTop.current = scrollOffset;
      var currentTopRow = Math.floor(scrollOffset / internalRowHeight);

      if (rows.length - currentTopRow < infiniteScrollThreshold) {
        if (!firedInfiniteLoadEvents.current.has(rows.length)) {
          onLoadMore({
            detail: {
              rowCount: rows.length
            }
          });
        }

        firedInfiniteLoadEvents.current.add(rows.length);
      }
    }
  }, [infiniteScroll, infiniteScrollThreshold, onLoadMore, rows.length, internalRowHeight, firedInfiniteLoadEvents, lastScrollTop]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: classNames,
    ref: parentRef,
    onScroll: onScroll,
    style: {
      position: 'relative',
      overflowY: 'auto',
      height: "".concat(tableBodyHeight, "px"),
      width: "".concat(totalColumnsWidth, "px")
    }
  }, isMounted && children);
};

var useStyles$5 = createComponentStyles.createComponentStyles(styles$3, {
  name: 'AnalyticalTable'
});
/**
 * ### Usage Notes
 * By default, the `AnalyticalTable` will not select any rows after clicking on active elements like a `Button`, `Link`,
 * etc. <br />
 * In case you want to select the row anyways, you can "mark" the event to allow such a behaviour. <br />
 * Example: `<Link onClick={(e) => {e.markerAllowTableRowSelection = true;}>My Link Text</Link>`
 */

var AnalyticalTable = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _tableRef$current, _props$data, _props$data2, _props$data3, _props$data4;

  var columns = props.columns,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      title = props.title,
      loading = props.loading,
      groupBy = props.groupBy,
      selectionMode = props.selectionMode,
      selectionBehavior = props.selectionBehavior,
      onRowSelected = props.onRowSelected,
      onSort = props.onSort,
      reactTableOptions = props.reactTableOptions,
      tableHooks = props.tableHooks,
      subRowsKey = props.subRowsKey,
      onGroup = props.onGroup,
      rowHeight = props.rowHeight,
      selectedRowIds = props.selectedRowIds,
      LoadingComponent = props.LoadingComponent,
      onRowExpandChange = props.onRowExpandChange,
      noDataText = props.noDataText,
      NoDataComponent = props.NoDataComponent,
      visibleRows = props.visibleRows,
      minRows = props.minRows,
      isTreeTable = props.isTreeTable,
      alternateRowColor = props.alternateRowColor,
      overscanCount = props.overscanCount,
      overscanCountHorizontal = props.overscanCountHorizontal,
      scaleWidthMode = props.scaleWidthMode,
      withRowHighlight = props.withRowHighlight,
      _props$highlightField = props.highlightField,
      highlightField = _props$highlightField === void 0 ? 'status' : _props$highlightField,
      groupable = props.groupable,
      sortable = props.sortable,
      filterable = props.filterable,
      infiniteScroll = props.infiniteScroll,
      _props$infiniteScroll = props.infiniteScrollThreshold,
      infiniteScrollThreshold = _props$infiniteScroll === void 0 ? 20 : _props$infiniteScroll,
      onLoadMore = props.onLoadMore,
      extension = props.extension,
      columnOrder = props.columnOrder;
  var classes = useStyles$5();

  var _useTableScrollHandle = useTableScrollHandles(ref),
      _useTableScrollHandle2 = _slicedToArray(_useTableScrollHandle, 2),
      analyticalTableRef = _useTableScrollHandle2[0],
      reactWindowRef = _useTableScrollHandle2[1];

  var tableRef = React.useRef();
  var getSubRows = React.useCallback(function (row) {
    return row[subRowsKey] || [];
  }, [subRowsKey]);
  var data = React.useMemo(function () {
    if (minRows > props.data.length) {
      var missingRows = minRows - props.data.length;
      var emptyRows = Array.from({
        length: missingRows
      }, function (v, i) {
        return i;
      }).map(function () {
        return {
          emptyRow: true
        };
      });
      return [].concat(_toConsumableArray(props.data), _toConsumableArray(emptyRows));
    }

    return props.data;
  }, [props.data, minRows]);

  var _useTable = reactTable.useTable.apply(void 0, [_objectSpread({
    columns: columns,
    data: data,
    defaultColumn: DefaultColumn,
    orderByFn: orderByFn,
    getSubRows: getSubRows,
    stateReducer: stateReducer,
    disableFilters: !filterable,
    disableSortBy: !sortable,
    disableGroupBy: isTreeTable ? true : !groupable,
    selectSubRows: false,
    webComponentsReactProperties: {
      tableRef: tableRef,
      selectionMode: selectionMode,
      selectionBehavior: selectionBehavior,
      classes: classes,
      onRowSelected: onRowSelected,
      onRowExpandChange: onRowExpandChange,
      isTreeTable: isTreeTable,
      alternateRowColor: alternateRowColor,
      scaleWidthMode: scaleWidthMode,
      loading: loading,
      withRowHighlight: withRowHighlight,
      highlightField: highlightField
    }
  }, reactTableOptions), reactTable.useFilters, reactTable.useColumnOrder, reactTable.useGroupBy, reactTable.useSortBy, reactTable.useExpanded, reactTable.useRowSelect, reactTable.useResizeColumns, useRowSelectionColumn, useSingleRowStateSelection, useRowHighlight, useDynamicColumnWidths, useStyling, useToggleRowExpand, useVisibleColumnsWidth].concat(_toConsumableArray(tableHooks))),
      getTableProps = _useTable.getTableProps,
      headerGroups = _useTable.headerGroups,
      rows = _useTable.rows,
      prepareRow = _useTable.prepareRow,
      tableState = _useTable.state,
      tableInternalColumns = _useTable.columns,
      setColumnOrder = _useTable.setColumnOrder,
      dispatch = _useTable.dispatch,
      totalColumnsWidth = _useTable.totalColumnsWidth,
      visibleColumns = _useTable.visibleColumns,
      visibleColumnsWidth = _useTable.visibleColumnsWidth,
      setGroupBy = _useTable.setGroupBy; // scroll bar detection


  React.useEffect(function () {
    var visibleRowCount = rows.length < visibleRows ? Math.max(rows.length, minRows) : visibleRows;
    dispatch({
      type: 'TABLE_SCROLLING_ENABLED',
      payload: {
        isScrollable: rows.length > visibleRowCount
      }
    });
  }, [rows.length, minRows, visibleRows]);
  var updateTableClientWidth = React.useCallback(function () {
    if (tableRef.current) {
      dispatch({
        type: 'TABLE_RESIZE',
        payload: {
          tableClientWidth: tableRef.current.clientWidth
        }
      });
    }
  }, []);
  React.useEffect(function () {
    // @ts-ignore
    var tableWidthObserver = new ResizeObserver(debounce(updateTableClientWidth, 500));
    tableWidthObserver.observe(tableRef.current);
    return function () {
      tableWidthObserver.disconnect();
    };
  }, [updateTableClientWidth]);
  React.useEffect(function () {
    updateTableClientWidth();
  }, [updateTableClientWidth]);
  React.useEffect(function () {
    setGroupBy(groupBy);
  }, [groupBy, setGroupBy]);
  React.useEffect(function () {
    dispatch({
      type: 'SET_SELECTED_ROW_IDS',
      payload: {
        selectedRowIds: selectedRowIds
      }
    });
  }, [selectedRowIds]);
  var calcRowHeight = parseInt(getComputedStyle((_tableRef$current = tableRef.current) !== null && _tableRef$current !== void 0 ? _tableRef$current : document.body).getPropertyValue('--sapWcrAnalyticalTableRowHeight') || '44');
  var internalRowHeight = rowHeight !== null && rowHeight !== void 0 ? rowHeight : calcRowHeight;
  var tableBodyHeight = React.useMemo(function () {
    var rowNum = rows.length < visibleRows ? Math.max(rows.length, minRows) : visibleRows;
    return internalRowHeight * rowNum;
  }, [internalRowHeight, rows.length, visibleRows, minRows]);
  var noDataStyles = React.useMemo(function () {
    return {
      height: "".concat(tableBodyHeight, "px"),
      width: "".concat(totalColumnsWidth, "px")
    };
  }, [tableBodyHeight, totalColumnsWidth]);
  var onGroupByChanged = React.useCallback(function (e) {
    var _e$detail = e.detail,
        column = _e$detail.column,
        isGrouped = _e$detail.isGrouped;
    var groupedColumns = [];

    if (isGrouped) {
      groupedColumns = [].concat(_toConsumableArray(tableState.groupBy), [column.id]);
    } else {
      groupedColumns = tableState.groupBy.filter(function (group) {
        return group !== column.id;
      });
    }

    setGroupBy(groupedColumns);
    onGroup(Utils.enrichEventWithDetails(e, {
      column: column,
      groupedColumns: groupedColumns
    }));
  }, [tableState.groupBy, onGroup, setGroupBy]);
  React.useEffect(function () {
    if ((columnOrder === null || columnOrder === void 0 ? void 0 : columnOrder.length) > 0) {
      setColumnOrder(columnOrder);
    }
  }, [columnOrder]);

  var _useDragAndDrop = useDragAndDrop(props, setColumnOrder, tableState.columnOrder, tableState.columnResizing, tableInternalColumns),
      _useDragAndDrop2 = _slicedToArray(_useDragAndDrop, 6),
      dragOver = _useDragAndDrop2[0],
      handleDragEnter = _useDragAndDrop2[1],
      handleDragStart = _useDragAndDrop2[2],
      handleDragOver = _useDragAndDrop2[3],
      handleOnDrop = _useDragAndDrop2[4],
      handleOnDragEnd = _useDragAndDrop2[5];

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onSort', 'onGroup', 'onRowSelected', 'onRowExpandChange', 'onColumnsReordered', 'onLoadMore']);
  var inlineStyle = React.useMemo(function () {
    var tableStyles = {
      maxWidth: '100%',
      overflowX: 'auto',
      display: 'flex',
      flexDirection: 'column'
    };

    if (!!rowHeight) {
      tableStyles['--sapWcrAnalyticalTableRowHeight'] = "".concat(rowHeight, "px");
    }

    if (tableState.tableClientWidth > 0) {
      return _objectSpread(_objectSpread({}, tableStyles), style);
    }

    return _objectSpread(_objectSpread(_objectSpread({}, tableStyles), style), {}, {
      visibility: 'hidden'
    });
  }, [tableState.tableClientWidth, style, rowHeight]);
  var parentRef = React.useRef(null);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: className,
    style: inlineStyle,
    title: tooltip,
    ref: analyticalTableRef
  }, passThroughProps), title && /*#__PURE__*/React__default.createElement(TitleBar, null, title), extension && /*#__PURE__*/React__default.createElement("div", null, extension), /*#__PURE__*/React__default.createElement("div", _extends({}, getTableProps(), {
    role: "grid",
    "aria-rowcount": rows.length,
    "aria-colcount": tableInternalColumns.length,
    "data-per-page": visibleRows,
    ref: tableRef,
    className: StyleClassHelper.StyleClassHelper.of(classes.table, GlobalStyleClasses.GlobalStyleClasses.sapScrollBar).className
  }), headerGroups.map(function (headerGroup) {
    var headerProps = {};

    if (headerGroup.getHeaderGroupProps) {
      headerProps = headerGroup.getHeaderGroupProps();
    }

    return tableRef.current && /*#__PURE__*/React__default.createElement(ColumnHeaderContainer, {
      reactWindowRef: reactWindowRef,
      tableRef: tableRef,
      resizeInfo: tableState.columnResizing,
      visibleColumnsWidth: visibleColumnsWidth,
      headerProps: headerProps,
      headerGroup: headerGroup,
      overscanCountHorizontal: overscanCountHorizontal,
      onSort: onSort,
      onGroupBy: onGroupByChanged,
      onDragStart: handleDragStart,
      onDragOver: handleDragOver,
      onDrop: handleOnDrop,
      onDragEnter: handleDragEnter,
      onDragEnd: handleOnDragEnd,
      dragOver: dragOver
    });
  }), loading && ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length) > 0 && /*#__PURE__*/React__default.createElement(LoadingComponent, {
    style: {
      width: "".concat(totalColumnsWidth, "px")
    }
  }), loading && ((_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.length) === 0 && /*#__PURE__*/React__default.createElement(TablePlaceholder, {
    columns: tableInternalColumns.filter(function (col) {
      var _col$isVisible;

      return ((_col$isVisible = col.isVisible) !== null && _col$isVisible !== void 0 ? _col$isVisible : true) && !tableState.hiddenColumns.includes(col.accessor);
    }),
    rows: props.minRows,
    style: noDataStyles,
    rowHeight: internalRowHeight,
    tableWidth: totalColumnsWidth
  }), !loading && ((_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : _props$data3.length) === 0 && /*#__PURE__*/React__default.createElement(NoDataComponent, {
    noDataText: noDataText,
    className: classes.noDataContainer,
    style: noDataStyles
  }), ((_props$data4 = props.data) === null || _props$data4 === void 0 ? void 0 : _props$data4.length) > 0 && tableRef.current && /*#__PURE__*/React__default.createElement(VirtualTableBodyContainer, {
    tableBodyHeight: tableBodyHeight,
    totalColumnsWidth: totalColumnsWidth,
    parentRef: parentRef,
    classes: classes,
    infiniteScroll: infiniteScroll,
    infiniteScrollThreshold: infiniteScrollThreshold,
    onLoadMore: onLoadMore,
    internalRowHeight: internalRowHeight,
    rows: rows
  }, /*#__PURE__*/React__default.createElement(VirtualTableBody, {
    classes: classes,
    prepareRow: prepareRow,
    rows: rows,
    minRows: minRows,
    reactWindowRef: reactWindowRef,
    isTreeTable: isTreeTable,
    internalRowHeight: internalRowHeight,
    visibleRows: visibleRows,
    alternateRowColor: alternateRowColor,
    overscanCount: overscanCount,
    tableRef: tableRef,
    parentRef: parentRef,
    visibleColumns: visibleColumns,
    visibleColumnsWidth: visibleColumnsWidth,
    overscanCountHorizontal: overscanCountHorizontal
  }))));
});
AnalyticalTable.displayName = 'AnalyticalTable';
AnalyticalTable.defaultProps = {
  loading: false,
  sortable: true,
  filterable: false,
  groupable: false,
  selectionMode: TableSelectionMode.TableSelectionMode.NONE,
  selectionBehavior: TableSelectionBehavior.TableSelectionBehavior.ROW,
  scaleWidthMode: TableScaleWidthMode.TableScaleWidthMode.Default,
  data: [],
  columns: [],
  title: null,
  minRows: 5,
  groupBy: [],
  NoDataComponent: DefaultNoDataComponent,
  LoadingComponent: DefaultLoadingComponent,
  noDataText: 'No Data',
  reactTableOptions: {},
  tableHooks: [],
  visibleRows: 15,
  subRowsKey: 'subRows',
  highlightField: 'status',
  selectedRowIds: {},
  onGroup: function onGroup() {},
  onRowExpandChange: function onRowExpandChange() {},
  onColumnsReordered: function onColumnsReordered() {},
  isTreeTable: false,
  alternateRowColor: false,
  overscanCountHorizontal: 5
};

(function (AnalyticalTableScrollMode) {
  AnalyticalTableScrollMode["auto"] = "auto";
  AnalyticalTableScrollMode["center"] = "center";
  AnalyticalTableScrollMode["end"] = "end";
  AnalyticalTableScrollMode["start"] = "start";
})(exports.AnalyticalTableScrollMode || (exports.AnalyticalTableScrollMode = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Avatar" target="_blank">UI5 Web Components Playground</a>
 */
var Avatar = withWebComponent$1.withWebComponent('ui5-avatar', ['accessibleName', 'backgroundColor', 'icon', 'image', 'imageFitType', 'initials', 'shape', 'size'], [], [], []);
Avatar.displayName = 'Avatar';
Avatar.defaultProps = {
  backgroundColor: AvatarBackgroundColor.AvatarBackgroundColor.Accent6,
  imageFitType: AvatarFitType.AvatarFitType.Cover,
  shape: AvatarShape.AvatarShape.Circle,
  size: AvatarSize.AvatarSize.S
};

(function (AvatarBackgroundColor) {
  AvatarBackgroundColor["Accent1"] = "Accent1";
  AvatarBackgroundColor["Accent2"] = "Accent2";
  AvatarBackgroundColor["Accent3"] = "Accent3";
  AvatarBackgroundColor["Accent4"] = "Accent4";
  AvatarBackgroundColor["Accent5"] = "Accent5";
  AvatarBackgroundColor["Accent6"] = "Accent6";
  AvatarBackgroundColor["Accent7"] = "Accent7";
  AvatarBackgroundColor["Accent8"] = "Accent8";
  AvatarBackgroundColor["Accent9"] = "Accent9";
  AvatarBackgroundColor["Accent10"] = "Accent10";
  AvatarBackgroundColor["Placeholder"] = "Placeholder";
})(exports.AvatarBackgroundColor || (exports.AvatarBackgroundColor = {}));

(function (AvatarFitType) {
  AvatarFitType["Cover"] = "Cover";
  AvatarFitType["Contain"] = "Contain";
})(exports.AvatarFitType || (exports.AvatarFitType = {}));

(function (AvatarShape) {
  AvatarShape["Circle"] = "Circle";
  AvatarShape["Square"] = "Square";
})(exports.AvatarShape || (exports.AvatarShape = {}));

(function (AvatarSize) {
  AvatarSize["XS"] = "XS";
  AvatarSize["S"] = "S";
  AvatarSize["M"] = "M";
  AvatarSize["L"] = "L";
  AvatarSize["XL"] = "XL";
})(exports.AvatarSize || (exports.AvatarSize = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Badge" target="_blank">UI5 Web Components Playground</a>
 */
var Badge = withWebComponent$1.withWebComponent('ui5-badge', ['colorScheme'], [], ['icon'], []);
Badge.displayName = 'Badge';
Badge.defaultProps = {
  colorScheme: '1'
};

(function (BarDesign) {
  BarDesign["Auto"] = "Auto";
  BarDesign["Footer"] = "Footer";
  BarDesign["Header"] = "Header";
  BarDesign["SubHeader"] = "SubHeader";
  BarDesign["FloatingFooter"] = "FloatingFooter";
})(exports.BarDesign || (exports.BarDesign = {}));

var styles$8 = {
  // outer container, controlling height and width
  bar: {
    width: '100%',
    display: 'block',
    position: 'relative',
    height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight
  },
  // left container
  left: {
    position: 'absolute',
    left: '0',
    top: '0',
    height: '100%',
    paddingLeft: '0.5rem',
    textAlign: 'left',
    display: 'flex',
    alignItems: 'center'
  },
  // center container
  center: {
    textAlign: 'center',
    width: '100%',
    height: '0',
    top: '0',
    left: '0'
  },
  // inner container around left, center, and right
  inner: {
    display: 'inline-flex',
    padding: '0 0.5rem 0 0.5rem',
    alignItems: 'center'
  },
  // right container
  right: {
    position: 'absolute',
    right: '0',
    top: '0',
    height: '100%',
    paddingRight: '0.5rem',
    textAlign: 'right',
    display: 'flex',
    alignItems: 'center'
  },
  auto: {
    height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight,
    background: ThemingParameters.ThemingParameters.sapPageHeader_Background,
    boxShadow: ThemingParameters.ThemingParameters.sapContent_HeaderShadow,
    '& $inner': {
      height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight
    }
  },
  subHeader: {
    height: CssSizeVariables.CssSizeVariables.sapWcrSubHeaderBarHeight,
    background: ThemingParameters.ThemingParameters.sapPageHeader_Background,
    boxShadow: ThemingParameters.ThemingParameters.sapContent_HeaderShadow,
    paddingBottom: ' 0.25rem',
    '& $inner': {
      height: CssSizeVariables.CssSizeVariables.sapWcrSubHeaderBarHeight
    }
  },
  footer: {
    height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight,
    background: ThemingParameters.ThemingParameters.sapPageFooter_Background,
    borderTop: "0.0625rem solid ".concat(ThemingParameters.ThemingParameters.sapPageFooter_BorderColor),
    '& $inner': {
      height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight
    }
  },
  floatingFooter: {
    height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight,
    background: ThemingParameters.ThemingParameters.sapPageFooter_Background,
    // borderRadius: ThemingParameters.sapElement_BorderCornerRadius,
    boxShadow: ThemingParameters.ThemingParameters.sapContent_Shadow1,
    border: 'none',
    opacity: 1,
    '& $inner': {
      height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight
    }
  }
};

var useStyles$6 = createComponentStyles.createComponentStyles(styles$8, {
  name: 'Bar'
});
var Bar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot,
      design = props.design,
      contentLeft = props.contentLeft,
      contentMiddle = props.contentMiddle,
      contentRight = props.contentRight;
  var classes = useStyles$6();
  var cssClasses = StyleClassHelper.StyleClassHelper.of(classes.bar);

  switch (design) {
    case exports.BarDesign.Footer:
      cssClasses.put(classes.footer);
      break;

    case exports.BarDesign.SubHeader:
      cssClasses.put(classes.subHeader);
      break;

    case exports.BarDesign.FloatingFooter:
      cssClasses.put(classes.floatingFooter);
      break;

    case exports.BarDesign.Header:
    case exports.BarDesign.Auto:
    default:
      cssClasses.put(classes.auto);
  }

  if (className) {
    cssClasses.put(className);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    "data-bar-part": "Root",
    className: cssClasses.toString(),
    style: style,
    title: tooltip,
    slot: slot,
    ref: ref
  }, passThroughProps), /*#__PURE__*/React__default.createElement("div", {
    "data-bar-part": "Left",
    className: classes.left
  }, contentLeft), /*#__PURE__*/React__default.createElement("div", {
    "data-bar-part": "Center",
    className: classes.center
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.inner
  }, contentMiddle)), /*#__PURE__*/React__default.createElement("div", {
    "data-bar-part": "Right",
    className: classes.right
  }, contentRight));
});
Bar.displayName = 'Bar';
Bar.defaultProps = {
  design: exports.BarDesign.Auto
};

var SeparatorStyles = {
  BackSlash: '\\',
  DoubleBackSlash: '\\\\',
  DoubleGreaterThan: '>>',
  DoubleSlash: '//',
  GreaterThan: '>',
  Slash: '/'
};
var separatorInlineStyles = {
  margin: '0 0.25rem'
};
var Breadcrumbs = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      separatorStyle = props.separatorStyle,
      currentLocationText = props.currentLocationText,
      tooltip = props.tooltip,
      style = props.style,
      className = props.className,
      slot = props.slot;
  var childrenArray = React.Children.toArray(children).filter(Boolean);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    title: tooltip,
    style: style,
    className: className,
    slot: slot
  }, passThroughProps), childrenArray.map(function (item, index) {
    if (index === childrenArray.length - 1) {
      return item;
    }

    return /*#__PURE__*/React__default.createElement(React.Fragment, {
      key: index
    }, item, /*#__PURE__*/React__default.createElement(Label$1.Label, {
      style: separatorInlineStyles,
      children: SeparatorStyles[separatorStyle]
    }));
  }), currentLocationText && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Label$1.Label, {
    style: separatorInlineStyles
  }, SeparatorStyles[separatorStyle]), /*#__PURE__*/React__default.createElement(Label$1.Label, null, currentLocationText)));
});
Breadcrumbs.displayName = 'Breadcrumbs';
Breadcrumbs.defaultProps = {
  separatorStyle: BreadcrumbsSeparatorStyle.BreadcrumbsSeparatorStyle.Slash
};

(function (BreadcrumbsSeparatorStyle) {
  BreadcrumbsSeparatorStyle["BackSlash"] = "BackSlash";
  BreadcrumbsSeparatorStyle["DoubleBackSlash"] = "DoubleBackSlash";
  BreadcrumbsSeparatorStyle["DoubleGreaterThan"] = "DoubleGreaterThan";
  BreadcrumbsSeparatorStyle["DoubleSlash"] = "DoubleSlash";
  BreadcrumbsSeparatorStyle["GreaterThan"] = "GreaterThan";
  BreadcrumbsSeparatorStyle["Slash"] = "Slash";
})(exports.BreadcrumbsSeparatorStyle || (exports.BreadcrumbsSeparatorStyle = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/BusyIndicator" target="_blank">UI5 Web Components Playground</a>
 */
var BusyIndicator = withWebComponent$1.withWebComponent('ui5-busyindicator', ['size', 'text'], ['active'], [], []);
BusyIndicator.displayName = 'BusyIndicator';
BusyIndicator.defaultProps = {
  active: false,
  size: BusyIndicatorSize.BusyIndicatorSize.Medium
};

(function (BusyIndicatorSize) {
  BusyIndicatorSize["Small"] = "Small";
  BusyIndicatorSize["Medium"] = "Medium";
  BusyIndicatorSize["Large"] = "Large";
})(exports.BusyIndicatorSize || (exports.BusyIndicatorSize = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Button" target="_blank">UI5 Web Components Playground</a>
 */
var Button = withWebComponent$1.withWebComponent('ui5-button', ['design', 'icon'], ['disabled', 'iconEnd', 'submits'], [], ['click']);
Button.displayName = 'Button';
Button.defaultProps = {
  design: ButtonDesign.ButtonDesign.Default,
  disabled: false,
  iconEnd: false,
  submits: false
};

(function (ButtonDesign) {
  ButtonDesign["Default"] = "Default";
  ButtonDesign["Positive"] = "Positive";
  ButtonDesign["Negative"] = "Negative";
  ButtonDesign["Transparent"] = "Transparent";
  ButtonDesign["Emphasized"] = "Emphasized";
})(exports.ButtonDesign || (exports.ButtonDesign = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Calendar" target="_blank">UI5 Web Components Playground</a>
 */
var Calendar = withWebComponent$1.withWebComponent('ui5-calendar', ['maxDate', 'minDate', 'primaryCalendarType', 'selectedDates', 'timestamp'], ['hideWeekNumbers'], [], ['selected-dates-change']);
Calendar.displayName = 'Calendar';
Calendar.defaultProps = {
  hideWeekNumbers: false
};

// introduced because of web components

(function (CalendarType) {
  CalendarType["Gregorian"] = "Gregorian";
  CalendarType["Islamic"] = "Islamic";
  CalendarType["Japanese"] = "Japanese";
  CalendarType["Buddhist"] = "Buddhist";
  CalendarType["Persian"] = "Persian";
})(exports.CalendarType || (exports.CalendarType = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Card" target="_blank">UI5 Web Components Playground</a>
 */
var Card = withWebComponent$1.withWebComponent('ui5-card', ['heading', 'status', 'subheading'], ['headerInteractive'], ['action', 'avatar'], ['header-click']);
Card.displayName = 'Card';
Card.defaultProps = {
  headerInteractive: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Carousel" target="_blank">UI5 Web Components Playground</a>
 */
var Carousel = withWebComponent$1.withWebComponent('ui5-carousel', ['arrowsPlacement', 'infiniteScrollOffset', 'itemsPerPageL', 'itemsPerPageM', 'itemsPerPageS', 'selectedIndex'], ['cyclic', 'hideNavigation'], [], ['load-more', 'navigate']);
Carousel.displayName = 'Carousel';
Carousel.defaultProps = {
  arrowsPlacement: CarouselArrowsPlacement.CarouselArrowsPlacement.Content,
  cyclic: false,
  hideNavigation: false,
  infiniteScrollOffset: 1,
  itemsPerPageL: 1,
  itemsPerPageM: 1,
  itemsPerPageS: 1,
  selectedIndex: 0
};

(function (CarouselArrowsPlacement) {
  CarouselArrowsPlacement["Navigation"] = "Navigation";
  CarouselArrowsPlacement["Content"] = "Content";
})(exports.CarouselArrowsPlacement || (exports.CarouselArrowsPlacement = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/CheckBox" target="_blank">UI5 Web Components Playground</a>
 */
var CheckBox = withWebComponent$1.withWebComponent('ui5-checkbox', ['name', 'text', 'valueState'], ['checked', 'disabled', 'readonly', 'wrap'], [], ['change']);
CheckBox.displayName = 'CheckBox';
CheckBox.defaultProps = {
  checked: false,
  disabled: false,
  readonly: false,
  valueState: ValueState.ValueState.None,
  wrap: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ComboBox" target="_blank">UI5 Web Components Playground</a>
 */
var ComboBox = withWebComponent$1.withWebComponent('ui5-combobox', ['filter', 'filterValue', 'placeholder', 'value', 'valueState'], ['disabled', 'loading', 'readonly', 'required'], [], ['change', 'input']);
ComboBox.displayName = 'ComboBox';
ComboBox.defaultProps = {
  disabled: false,
  filter: 'StartsWithPerTerm',
  loading: false,
  readonly: false,
  required: false,
  valueState: ValueState.ValueState.None
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ComboBoxItem" target="_blank">UI5 Web Components Playground</a>
 */
var ComboBoxItem = withWebComponent$1.withWebComponent('ui5-cb-item', ['text'], [], [], []);
ComboBoxItem.displayName = 'ComboBoxItem';
ComboBoxItem.defaultProps = {};

(function (ContentDensity) {
  ContentDensity["Cozy"] = "Cozy";
  ContentDensity["Compact"] = "Compact";
})(exports.ContentDensity || (exports.ContentDensity = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/CustomListItem" target="_blank">UI5 Web Components Playground</a>
 */
var CustomListItem = withWebComponent$1.withWebComponent('ui5-li-custom', ['type'], ['selected'], [], ['detail-click']);
CustomListItem.displayName = 'CustomListItem';
CustomListItem.defaultProps = {
  type: ListItemTypes.ListItemTypes.Active,
  selected: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/DatePicker" target="_blank">UI5 Web Components Playground</a>
 */
var DatePicker = withWebComponent$1.withWebComponent('ui5-date-picker', ['formatPattern', 'maxDate', 'minDate', 'name', 'placeholder', 'primaryCalendarType', 'value', 'valueState'], ['disabled', 'hideWeekNumbers', 'readonly'], ['valueStateMessage'], ['change', 'input']);
DatePicker.displayName = 'DatePicker';
DatePicker.defaultProps = {
  disabled: false,
  hideWeekNumbers: false,
  placeholder: undefined,
  primaryCalendarType: CalendarType.CalendarType.Gregorian,
  readonly: false,
  valueState: ValueState.ValueState.None
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/DateRangePicker" target="_blank">UI5 Web Components Playground</a>
 */
var DateRangePicker = withWebComponent$1.withWebComponent('ui5-daterange-picker', ['delimiter', 'formatPattern', 'maxDate', 'minDate', 'name', 'placeholder', 'primaryCalendarType', 'value', 'valueState'], ['disabled', 'hideWeekNumbers', 'readonly'], ['valueStateMessage'], ['change', 'input']);
DateRangePicker.displayName = 'DateRangePicker';
DateRangePicker.defaultProps = {
  delimiter: '-',
  disabled: false,
  hideWeekNumbers: false,
  placeholder: undefined,
  primaryCalendarType: CalendarType.CalendarType.Gregorian,
  readonly: false,
  valueState: ValueState.ValueState.None
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/DateTimePicker" target="_blank">UI5 Web Components Playground</a>
 */
var DateTimePicker = withWebComponent$1.withWebComponent('ui5-datetime-picker', ['formatPattern', 'maxDate', 'minDate', 'name', 'placeholder', 'primaryCalendarType', 'value', 'valueState'], ['disabled', 'hideWeekNumbers', 'readonly'], ['valueStateMessage'], ['change', 'input']);
DateTimePicker.displayName = 'DateTimePicker';
DateTimePicker.defaultProps = {
  disabled: false,
  hideWeekNumbers: false,
  placeholder: undefined,
  primaryCalendarType: CalendarType.CalendarType.Gregorian,
  readonly: false,
  valueState: ValueState.ValueState.None
};

(function (DeviationIndicator) {
  DeviationIndicator["Down"] = "Down";
  DeviationIndicator["Up"] = "Up";
  DeviationIndicator["None"] = "None";
})(exports.DeviationIndicator || (exports.DeviationIndicator = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Dialog" target="_blank">UI5 Web Components Playground</a>
 */
var Dialog = withWebComponent$1.withWebComponent('ui5-dialog', ['headerText', 'initialFocus'], ['stretch', 'preventFocusRestore'], ['footer', 'header'], ['after-close', 'after-open', 'before-close', 'before-open']);
Dialog.displayName = 'Dialog';
Dialog.defaultProps = {
  stretch: false,
  preventFocusRestore: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/DurationPicker" target="_blank">UI5 Web Components Playground</a>
 */
var DurationPicker = withWebComponent$1.withWebComponent('ui5-duration-picker', ['maxValue', 'minutesStep', 'secondsStep', 'value', 'valueState'], ['disabled', 'hideHours', 'hideMinutes', 'hideSeconds', 'readonly'], [], ['change']);
DurationPicker.displayName = 'DurationPicker';
DurationPicker.defaultProps = {
  disabled: false,
  hideHours: false,
  hideMinutes: false,
  hideSeconds: false,
  maxValue: '23:59:59',
  minutesStep: 1,
  readonly: false,
  secondsStep: 1,
  value: '00:00:00',
  valueState: 'None'
};

(function (FCLLayout) {
  FCLLayout["OneColumn"] = "OneColumn";
  FCLLayout["TwoColumnsStartExpanded"] = "TwoColumnsStartExpanded";
  FCLLayout["TwoColumnsMidExpanded"] = "TwoColumnsMidExpanded";
  FCLLayout["ThreeColumnsMidExpanded"] = "ThreeColumnsMidExpanded";
  FCLLayout["ThreeColumnsEndExpanded"] = "ThreeColumnsEndExpanded";
  FCLLayout["ThreeColumnsStartExpandedEndHidden"] = "ThreeColumnsStartExpandedEndHidden";
  FCLLayout["ThreeColumnsMidExpandedEndHidden"] = "ThreeColumnsMidExpandedEndHidden";
  FCLLayout["MidColumnFullScreen"] = "MidColumnFullScreen";
  FCLLayout["EndColumnFullScreen"] = "EndColumnFullScreen";
})(exports.FCLLayout || (exports.FCLLayout = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/FileUploader" target="_blank">UI5 Web Components Playground</a>
 */
var FileUploader = withWebComponent$1.withWebComponent('ui5-file-uploader', ['accept', 'name', 'placeholder', 'value', 'valueState'], ['disabled', 'hideInput', 'multiple'], [], ['change']);
FileUploader.displayName = 'FileUploader';
FileUploader.defaultProps = {
  disabled: false,
  hideInput: false,
  multiple: false,
  valueState: ValueState.ValueState.None
};

var styles$9 = {
  outerContainer: {
    paddingTop: '0.5rem',
    paddingLeft: '2rem',
    paddingRight: '2rem',
    paddingBottom: '1px',
    background: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    boxShadow: ThemingParameters.ThemingParameters.sapContent_HeaderShadow
  },
  filterItemExpand: {
    '--_ui5_input_width': '100%'
  },
  filterBarHeader: {
    alignItems: 'center',
    display: 'flex',
    background: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    minHeight: '3rem',
    paddingBottom: '0.5rem',
    boxShadow: 'none',
    flexWrap: 'wrap'
  },
  filterArea: {
    display: 'flex',
    flexWrap: 'wrap',
    paddingTop: '1rem',
    paddingBottom: '1rem',
    background: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    transition: 'max-height 0.2s ease-out, opacity 0.2s ease-in'
  },
  filterAreaClosed: {
    maxHeight: '0',
    opacity: 0,
    padding: 0,
    overflowY: 'auto'
  },
  filterAreaOpen: {
    maxHeight: '500px',
    opacity: 1,
    overflowY: 'auto'
  },
  headerRowRight: {
    display: 'flex',
    justifyContent: 'flex-end',
    flexGrow: 1,
    '& ui5-button': {
      marginLeft: '0.5rem'
    }
  },
  showFiltersBtn: {
    minWidth: '108px'
  },
  loadingContainer: {
    marginBottom: '0.5rem',
    display: 'flex',
    width: '100%',
    justifyContent: 'center'
  }
};

var styles$a = {
  dialog: _objectSpread(_objectSpread({}, spacing.sapUiContentPadding), {}, {
    display: 'flex',
    flexDirection: 'column',
    maxWidth: '960px',
    width: '80vw',
    maxHeight: '70vh',
    '--_ui5_input_width': '100%'
  }),
  header: {
    width: '100%',
    padding: '0.25rem 1rem 0 1rem',
    '& *': {
      margin: '0.25rem 0 0.25rem 0'
    },
    '& ui5-input': {
      width: '100%'
    }
  },
  footer: {
    '& :not(:last-child)': {
      marginRight: '0.25rem'
    }
  },
  groupContainer: {
    display: 'flex',
    flexDirection: 'column'
  },
  groupTitle: {
    maxWidth: '85%',
    marginRight: '0.5rem'
  },
  filters: {
    padding: '1rem 0 2rem 0'
  },
  singleFilter: {
    display: 'grid',
    gridTemplateColumns: "auto minmax(".concat(CssSizeVariables.CssSizeVariables.sapWcrCheckBoxWidthHeight, ",7%)"),
    gridTemplateRows: 'auto',
    gridColumnGap: '0.5rem',
    '@media(max-width:700px)': {
      marginTop: '0.5rem'
    },
    '& ui5-checkbox': {
      placeSelf: 'center start',
      '@media(max-width:700px)': {
        marginTop: '0.8rem',
        paddingLeft: 0,
        placeSelf: 'end start'
      }
    }
  },
  fbSearch: {
    '@media(min-width:700px)': {
      display: 'grid',
      gridTemplateColumns: '20% auto 7%',
      gridTemplateRows: 'auto',
      gridRowGap: '0.5rem',
      gridColumnGap: '0.5rem'
    },
    paddingBottom: '2rem',
    width: '100%',
    '& ui5-input': {
      width: '100%'
    }
  }
};

var filterValue = function filterValue(ref, child) {
  var tagName = ref.tagName;
  var filterItemProps = {};

  if (tagName === 'UI5-INPUT' || tagName === 'UI5-DATE-PICKER' || tagName === 'UI5-DATETIME-PICKER' || tagName === 'UI5-DATERANGE-PICKER' || tagName === 'UI5-TIME-PICKER' || tagName === 'UI5-DURATION-PICKER') {
    filterItemProps = {
      value: ref.value
    };
  }

  if (tagName === 'UI5-COMBOBOX') {
    filterItemProps = {
      value: ref.value,
      filterValue: ref.filterValue
    };
  }

  if (tagName === 'UI5-SELECT' || tagName === 'UI5-MULTI-COMBOBOX') {
    var _child$props$children;

    var selectedIndices = Array.from(ref.children).map(function (item, index) {
      return item.selected ? index : false;
    }).filter(function (el) {
      return el !== false;
    });
    var selectedIndicesSet = new Set(selectedIndices);
    var options = (_child$props$children = child.props.children.props.children) === null || _child$props$children === void 0 ? void 0 : _child$props$children.map(function (item, index) {
      if (selectedIndicesSet.has(index)) {
        return /*#__PURE__*/React.cloneElement(item, {
          selected: true
        });
      }

      return /*#__PURE__*/React.cloneElement(item, {
        selected: false
      });
    });
    filterItemProps = {
      children: options
    };
  }

  if (tagName === 'UI5-SWITCH' || tagName === 'UI5-CHECKBOX') {
    filterItemProps = {
      checked: ref.checked
    };
  }

  return filterItemProps;
};
var renderSearchWithValue = function renderSearchWithValue(renderSearchElement, searchValue) {
  var _renderSearchElement$;

  return /*#__PURE__*/React.cloneElement(renderSearchElement, {
    value: searchValue !== null && searchValue !== void 0 ? searchValue : renderSearchElement === null || renderSearchElement === void 0 ? void 0 : (_renderSearchElement$ = renderSearchElement.props) === null || _renderSearchElement$ === void 0 ? void 0 : _renderSearchElement$.value
  });
};

var useStyles$7 = createComponentStyles.createComponentStyles(styles$a, {
  name: 'FilterBarDialog'
});
var FilterDialog = function FilterDialog(props) {
  var filterBarRefs = props.filterBarRefs,
      open = props.open,
      handleDialogClose = props.handleDialogClose,
      children = props.children,
      showClearButton = props.showClearButton,
      showRestoreButton = props.showRestoreButton,
      showGoButton = props.showGoButton,
      showSearch = props.showSearch,
      renderFBSearch = props.renderFBSearch,
      handleClearFilters = props.handleClearFilters,
      handleRestoreFilters = props.handleRestoreFilters,
      handleDialogSave = props.handleDialogSave,
      searchValue = props.searchValue,
      handleSearchValueChange = props.handleSearchValueChange,
      onGo = props.onGo,
      handleSelectionChange = props.handleSelectionChange,
      handleDialogSearch = props.handleDialogSearch,
      handleDialogCancel = props.handleDialogCancel;
  var classes = useStyles$7();

  var _useState = React.useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      searchString = _useState2[0],
      setSearchString = _useState2[1];

  var searchRef = React.useRef(null);

  var _useState3 = React.useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      toggledFilters = _useState4[0],
      setToggledFilters = _useState4[1];

  var dialogRefs = React.useRef({});
  var dialogRef = React.useRef();

  var _useI18nText = hooks.useI18nText('@ui5/webcomponents-react', i18nDefaults.BASIC, i18nDefaults.CANCEL, i18nDefaults.CLEAR, i18nDefaults.RESTORE, i18nDefaults.SAVE, i18nDefaults.SEARCH_FOR_FILTERS, i18nDefaults.SHOW_ON_FILTER_BAR),
      _useI18nText2 = _slicedToArray(_useI18nText, 7),
      basicText = _useI18nText2[0],
      cancelText = _useI18nText2[1],
      clearText = _useI18nText2[2],
      restoreText = _useI18nText2[3],
      saveText = _useI18nText2[4],
      searchForFiltersText = _useI18nText2[5],
      showOnFilterBarText = _useI18nText2[6];

  React.useEffect(function () {
    if (open) {
      dialogRef.current.open();
    }
  }, [open]);
  var handleSearch = React.useCallback(function (e) {
    if (handleDialogSearch) {
      handleDialogSearch(Utils.enrichEventWithDetails(e, {
        value: e.target.value
      }));
    }

    setSearchString(e.target.value);
  }, [setSearchString, handleDialogSearch]);
  var handleSave = React.useCallback(function (e) {
    if (renderFBSearch) {
      var _searchRef$current;

      handleSearchValueChange((_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.children[1].value);
    }

    handleDialogSave(e, dialogRefs.current, toggledFilters);
  }, [renderFBSearch, handleSearchValueChange, searchRef, handleDialogSave, toggledFilters, dialogRefs]);
  var handleClose = React.useCallback(function (e) {
    stopPropagation(e);

    if (!showGoButton) {
      handleSave(e);
      return;
    }

    handleDialogClose(e);
  }, [showGoButton, handleSave, handleDialogClose]);
  var handleDialogGo = React.useCallback(function (e) {
    if (onGo) {
      onGo(Utils.enrichEventWithDetails(e));
    }

    handleDialogClose(e);
  }, [onGo, handleDialogClose]);
  var handleRestore = React.useCallback(function (e) {
    handleRestoreFilters(e, 'dialog');
  }, [handleRestoreFilters]);
  var handleCancel = React.useCallback(function (e) {
    if (handleDialogCancel) {
      handleDialogCancel(Utils.enrichEventWithDetails(e));
    }

    handleDialogClose(e);
  }, [handleDialogCancel]);
  var footerContentRight = React.useMemo(function () {
    return /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
      justifyContent: FlexBoxJustifyContent.FlexBoxJustifyContent.End,
      className: classes.footer
    }, showGoButton && /*#__PURE__*/React__default.createElement(Button$2.Button, {
      onClick: handleDialogGo,
      design: ButtonDesign.ButtonDesign.Emphasized
    }, "Go"), showClearButton && /*#__PURE__*/React__default.createElement(Button$2.Button, {
      onClick: handleClearFilters
    }, clearText), showRestoreButton && /*#__PURE__*/React__default.createElement(Button$2.Button, {
      onClick: handleRestore
    }, restoreText), /*#__PURE__*/React__default.createElement(Button$2.Button, {
      onClick: handleSave
    }, saveText), /*#__PURE__*/React__default.createElement(Button$2.Button, {
      design: ButtonDesign.ButtonDesign.Transparent,
      onClick: handleCancel
    }, cancelText));
  }, [showGoButton, classes.footer, handleDialogGo, showClearButton, handleClearFilters, showRestoreButton, handleRestore, handleSave, handleCancel]);
  var renderFooter = React.useCallback(function () {
    return /*#__PURE__*/React__default.createElement(Bar$1.Bar, {
      design: BarDesign.BarDesign.Footer,
      contentRight: footerContentRight
    });
  }, [footerContentRight]);
  var renderHeader = React.useCallback(function () {
    return /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
      direction: FlexBoxDirection.FlexBoxDirection.Column,
      alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Center,
      className: classes.header
    }, /*#__PURE__*/React__default.createElement(Title$1.Title, {
      level: TitleLevel.TitleLevel.H4
    }, "Filters"), showSearch && /*#__PURE__*/React__default.createElement(Input$1.Input, {
      placeholder: searchForFiltersText,
      onInput: handleSearch,
      icon: /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
        name: "search"
      })
    }));
  }, [classes.header, showSearch, handleSearch]);
  var renderChildren = React.useCallback(function () {
    return children.filter(function (item) {
      var _item$props, _item$props2, _item$props2$label;

      if (item.type.displayName !== 'FilterGroupItem') return true; //needed for deprecated FilterItem or custom elements

      return !!(item === null || item === void 0 ? void 0 : item.props) && ((_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.visible) && (((_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : (_item$props2$label = _item$props2.label) === null || _item$props2$label === void 0 ? void 0 : _item$props2$label.toLowerCase().includes(searchString.toLowerCase())) || searchString.length === 0);
    }).map(function (child) {
      if (child.type.displayName !== 'FilterGroupItem') return child; //needed for deprecated FilterItem or custom elements

      var filterBarItemRef = filterBarRefs.current[child.key];
      var filterItemProps = {};

      if (filterBarItemRef) {
        filterItemProps = filterValue(filterBarItemRef, child);
      }

      if (!child.props.children) return child;
      return /*#__PURE__*/React.cloneElement(child, {
        children: _objectSpread(_objectSpread({}, child.props.children), {}, {
          props: _objectSpread(_objectSpread({}, child.props.children.props), filterItemProps),
          ref: function ref(node) {
            dialogRefs.current[child.key] = node;
          }
        })
      });
    });
  }, [children, searchString, filterBarRefs]);
  var handleCheckBoxChange = React.useCallback(function (element) {
    return function (e) {
      if (handleSelectionChange) {
        handleSelectionChange(Utils.enrichEventWithDetails(e, {
          element: element,
          checked: e.target.checked
        }));
      }

      setToggledFilters(function (old) {
        return _objectSpread(_objectSpread({}, old), {}, _defineProperty({}, element.key, e.target.checked));
      });
    };
  }, [setToggledFilters, handleSelectionChange]);
  var renderGroups = React.useCallback(function () {
    var groups = {};
    React.Children.forEach(renderChildren(), function (child) {
      var _child$props$groupNam;

      var childGroups = (_child$props$groupNam = child.props.groupName) !== null && _child$props$groupNam !== void 0 ? _child$props$groupNam : 'default';

      if (groups[childGroups]) {
        groups[childGroups].push(child);
      } else {
        groups[childGroups] = [child];
      }
    });
    return Object.keys(groups).sort(function (x, y) {
      return x === 'default' ? -1 : y === 'role' ? 1 : 0;
    }).map(function (item, index) {
      var filters = groups[item].map(function (el) {
        return /*#__PURE__*/React__default.createElement("div", {
          className: classes.singleFilter,
          key: "".concat(el.key, "-container")
        }, el, /*#__PURE__*/React__default.createElement(CheckBox$1.CheckBox, {
          checked: el.props.visibleInFilterBar || el.props.required || el.type.displayName !== 'FilterGroupItem',
          onChange: handleCheckBoxChange(el),
          disabled: el.props.required || el.type.displayName !== 'FilterGroupItem'
        }));
      });
      return /*#__PURE__*/React__default.createElement("div", {
        className: classes.groupContainer,
        key: item
      }, /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
        justifyContent: FlexBoxJustifyContent.FlexBoxJustifyContent.SpaceBetween,
        alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Center
      }, /*#__PURE__*/React__default.createElement(Title$1.Title, {
        level: TitleLevel.TitleLevel.H5,
        className: index === 0 ? classes.groupTitle : ''
      }, item === 'default' ? basicText : item), index === 0 && /*#__PURE__*/React__default.createElement(Text$1.Text, {
        wrapping: false
      }, showOnFilterBarText)), /*#__PURE__*/React__default.createElement("div", {
        className: classes.filters
      }, filters));
    });
  }, [renderChildren, toggledFilters, handleCheckBoxChange]);
  return /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default.createElement(Dialog$2.Dialog, {
    ref: dialogRef,
    header: renderHeader(),
    footer: renderFooter(),
    onAfterClose: handleClose
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.dialog
  }, renderFBSearch && /*#__PURE__*/React__default.createElement("div", {
    className: classes.fbSearch,
    ref: searchRef
  }, /*#__PURE__*/React__default.createElement("span", null), renderSearchWithValue(renderFBSearch, searchValue)), renderGroups())), document.body);
};

var useStyles$8 = createComponentStyles.createComponentStyles(styles$9, {
  name: 'FilterBar'
});
var FilterBar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _search$props2, _search$props5, _searchRef$current;

  var children = props.children,
      useToolbar = props.useToolbar,
      loading = props.loading,
      filterBarExpanded = props.filterBarExpanded,
      considerGroupName = props.considerGroupName,
      filterContainerWidth = props.filterContainerWidth,
      activeFiltersCount = props.activeFiltersCount,
      showClearOnFB = props.showClearOnFB,
      showGoOnFB = props.showGoOnFB,
      showGo = props.showGo,
      showFilterConfiguration = props.showFilterConfiguration,
      showRestoreOnFB = props.showRestoreOnFB,
      showClearButton = props.showClearButton,
      showRestoreButton = props.showRestoreButton,
      showSearchOnFiltersDialog = props.showSearchOnFiltersDialog,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      search = props.search,
      variants = props.variants,
      onToggleFilters = props.onToggleFilters,
      onFiltersDialogOpen = props.onFiltersDialogOpen,
      onFiltersDialogCancel = props.onFiltersDialogCancel,
      onFiltersDialogClose = props.onFiltersDialogClose,
      onFiltersDialogSave = props.onFiltersDialogSave,
      onFiltersDialogClear = props.onFiltersDialogClear,
      onClear = props.onClear,
      onFiltersDialogSelectionChange = props.onFiltersDialogSelectionChange,
      onFiltersDialogSearch = props.onFiltersDialogSearch,
      onGo = props.onGo,
      onRestore = props.onRestore;

  var _useState = React.useState(useToolbar ? filterBarExpanded : true),
      _useState2 = _slicedToArray(_useState, 2),
      showFilters = _useState2[0],
      setShowFilters = _useState2[1];

  var _useState3 = React.useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      mountFilters = _useState4[0],
      setMountFilters = _useState4[1];

  var _useState5 = React.useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      dialogOpen = _useState6[0],
      setDialogOpen = _useState6[1];

  var _useState7 = React.useState(undefined),
      _useState8 = _slicedToArray(_useState7, 2),
      searchValue = _useState8[0],
      setSearchValue = _useState8[1];

  var searchRef = React.useRef(null);
  var filterRefs = React.useRef({});

  var _useState9 = React.useState({}),
      _useState10 = _slicedToArray(_useState9, 2),
      dialogRefs = _useState10[0],
      setDialogRefs = _useState10[1];

  var _useState11 = React.useState({}),
      _useState12 = _slicedToArray(_useState11, 2),
      toggledFilters = _useState12[0],
      setToggledFilters = _useState12[1];

  var prevVisibleInFilterBarProps = React.useRef({});
  var prevSearchInputPropsValueRef = React.useRef();

  var _useI18nText = hooks.useI18nText('@ui5/webcomponents-react', i18nDefaults.CLEAR, i18nDefaults.RESTORE, i18nDefaults.SHOW_FILTER_BAR, i18nDefaults.HIDE_FILTER_BAR, i18nDefaults.GO, i18nDefaults.FILTERS),
      _useI18nText2 = _slicedToArray(_useI18nText, 6),
      clearText = _useI18nText2[0],
      restoreText = _useI18nText2[1],
      showFilterBarText = _useI18nText2[2],
      hideFilterBarText = _useI18nText2[3],
      goText = _useI18nText2[4],
      filtersText = _useI18nText2[5];

  React.useEffect(function () {
    React.Children.toArray(children).forEach(function (item) {
      setToggledFilters(function (prev) {
        if (!item.props.hasOwnProperty('visibleInFilterBar') && (prev === null || prev === void 0 ? void 0 : prev[item.key]) === undefined) {
          return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, item.key, true));
        }

        if (item.props.hasOwnProperty('visibleInFilterBar')) {
          return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, item.key, item.props.visibleInFilterBar));
        }

        return prev;
      });
    });
  }, [children, setToggledFilters]);
  React.useEffect(function () {
    setShowFilters(useToolbar ? filterBarExpanded : true);
  }, [setShowFilters, useToolbar, filterBarExpanded]);
  var classes = useStyles$8();
  var filterAreaClasses = StyleClassHelper.StyleClassHelper.of(classes.filterArea);

  if (showFilters) {
    filterAreaClasses.put(classes.filterAreaOpen);
  } else {
    filterAreaClasses.put(classes.filterAreaClosed);
  }

  var handleToggle = React.useCallback(function (e) {
    if (onToggleFilters) {
      onToggleFilters(Utils.enrichEventWithDetails(e, {
        visible: !showFilters
      }));
    }

    setShowFilters(!showFilters);
  }, [showFilters, onToggleFilters, setShowFilters]);
  var handleDialogSave = React.useCallback(function (e, newRefs, updatedToggledFilters) {
    setDialogRefs(newRefs);
    setToggledFilters(function (old) {
      return _objectSpread(_objectSpread({}, old), updatedToggledFilters);
    });

    if (onFiltersDialogSave) {
      onFiltersDialogSave(Utils.enrichEventWithDetails(e, {
        elements: newRefs,
        toggledElements: _objectSpread(_objectSpread({}, toggledFilters), updatedToggledFilters)
      }));
    }

    handleDialogClose(e);
  }, [setDialogOpen, setDialogRefs, setToggledFilters, onFiltersDialogSave, toggledFilters]);
  var handleDialogOpen = React.useCallback(function (e) {
    setDialogOpen(true);

    if (onFiltersDialogOpen) {
      onFiltersDialogOpen(Utils.enrichEventWithDetails(e));
    }
  }, [setDialogOpen, onFiltersDialogOpen]);
  var handleDialogClose = React.useCallback(function (e) {
    if (onFiltersDialogClose) {
      onFiltersDialogClose(Utils.enrichEventWithDetails(e));
    }

    setDialogOpen(false);
  }, [setDialogOpen, onFiltersDialogClose]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onToggleFilters', 'onFiltersDialogOpen', 'onFiltersDialogClose', 'onFiltersDialogSave', 'onFiltersDialogClear', 'onClear', 'onFiltersDialogSelectionChange', 'onFiltersDialogSearch', 'onGo', 'onRestore', 'onFiltersDialogCancel']);
  var safeChildren = React.useCallback(function () {
    if (Object.keys(toggledFilters).length > 0) {
      return React.Children.toArray(children).map(function (child) {
        if ((toggledFilters === null || toggledFilters === void 0 ? void 0 : toggledFilters[child.key]) !== undefined) {
          return /*#__PURE__*/React.cloneElement(child, {
            visibleInFilterBar: toggledFilters[child.key]
          });
        }

        return child;
      });
    }

    return React.Children.toArray(children);
  }, [toggledFilters, children]);
  var prevChildren = React.useRef({});
  var renderChildren = React.useCallback(function () {
    var childProps = {
      considerGroupName: considerGroupName,
      inFB: true
    };
    return safeChildren().filter(function (item) {
      var _item$props, _item$props2;

      if (item.type.displayName !== 'FilterGroupItem') return true; // needed for deprecated FilterItem or custom elements

      return (item === null || item === void 0 ? void 0 : (_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.visible) && ((_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.visibleInFilterBar);
    }).map(function (child) {
      var _prevChildren$current, _child$props$children, _child$props$children2, _prevChildren$current2, _prevChildren$current3, _child$props$children3, _child$props$children4, _prevChildren$current4, _prevChildren$current5, _child$props$children5, _child$props$children6, _prevChildren$current6, _prevChildren$current7, _child$props$children7, _child$props$children8, _child$props$children9, _prevChildren$current8, _prevChildren$current9, _prevChildren$current10;

      if (child.type.displayName !== 'FilterGroupItem') return child; // needed for deprecated FilterItem or custom elements

      if (filterContainerWidth) {
        childProps.style = _objectSpread({
          width: filterContainerWidth
        }, child.props.style);
      }

      if (!showFilterConfiguration) {
        return /*#__PURE__*/React.cloneElement(child, _objectSpread({}, childProps));
      }

      prevVisibleInFilterBarProps.current[child.key] = child.props.visibleInFilterBar;
      var filterItemProps = {};

      if (Object.keys(dialogRefs).length > 0) {
        var dialogItemRef = dialogRefs[child.key];

        if (dialogItemRef) {
          filterItemProps = filterValue(dialogItemRef, child);
        }
      }

      if (!child.props.children) {
        return /*#__PURE__*/React.cloneElement(child, _objectSpread({}, childProps));
      }

      if (((_prevChildren$current = prevChildren.current) === null || _prevChildren$current === void 0 ? void 0 : _prevChildren$current[child.key]) && ( //Input
      ((_child$props$children = child.props.children) === null || _child$props$children === void 0 ? void 0 : (_child$props$children2 = _child$props$children.props) === null || _child$props$children2 === void 0 ? void 0 : _child$props$children2.value) !== ((_prevChildren$current2 = prevChildren.current) === null || _prevChildren$current2 === void 0 ? void 0 : (_prevChildren$current3 = _prevChildren$current2[child.key]) === null || _prevChildren$current3 === void 0 ? void 0 : _prevChildren$current3.value) || //Combobox
      ((_child$props$children3 = child.props.children) === null || _child$props$children3 === void 0 ? void 0 : (_child$props$children4 = _child$props$children3.props) === null || _child$props$children4 === void 0 ? void 0 : _child$props$children4.filterValue) !== ((_prevChildren$current4 = prevChildren.current) === null || _prevChildren$current4 === void 0 ? void 0 : (_prevChildren$current5 = _prevChildren$current4[child.key]) === null || _prevChildren$current5 === void 0 ? void 0 : _prevChildren$current5.filterValue) || //Checkbox
      ((_child$props$children5 = child.props.children) === null || _child$props$children5 === void 0 ? void 0 : (_child$props$children6 = _child$props$children5.props) === null || _child$props$children6 === void 0 ? void 0 : _child$props$children6.checked) !== ((_prevChildren$current6 = prevChildren.current) === null || _prevChildren$current6 === void 0 ? void 0 : (_prevChildren$current7 = _prevChildren$current6[child.key]) === null || _prevChildren$current7 === void 0 ? void 0 : _prevChildren$current7.checked) || //Selectable
      ((_child$props$children7 = child.props.children) === null || _child$props$children7 === void 0 ? void 0 : (_child$props$children8 = _child$props$children7.props) === null || _child$props$children8 === void 0 ? void 0 : (_child$props$children9 = _child$props$children8.children) === null || _child$props$children9 === void 0 ? void 0 : _child$props$children9.map(function (item) {
        return item.props.selected;
      }).join(',')) !== (prevChildren === null || prevChildren === void 0 ? void 0 : (_prevChildren$current8 = prevChildren.current) === null || _prevChildren$current8 === void 0 ? void 0 : (_prevChildren$current9 = _prevChildren$current8[child.key]) === null || _prevChildren$current9 === void 0 ? void 0 : (_prevChildren$current10 = _prevChildren$current9.children) === null || _prevChildren$current10 === void 0 ? void 0 : _prevChildren$current10.map(function (item) {
        return item.props.selected;
      }).join(',')))) {
        // @ts-ignore
        var _child$key = child.key,
            omit = dialogRefs[_child$key],
            rest = _objectWithoutProperties(dialogRefs, [_child$key].map(_toPropertyKey));

        setDialogRefs(rest);
      }

      prevChildren.current[child.key] = child.props.children.props;
      return /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, childProps), {}, {
        children: _objectSpread(_objectSpread({}, child.props.children), {}, {
          props: _objectSpread(_objectSpread({}, child.props.children.props), filterItemProps),
          ref: function ref(node) {
            filterRefs.current[child.key] = node;
          }
        })
      }));
    });
  }, [filterContainerWidth, considerGroupName, dialogRefs, safeChildren, showFilterConfiguration]);
  var handleSearchValueChange = React.useCallback(function (newVal) {
    setSearchValue(newVal);
  }, [setSearchValue]);
  var handleRestoreFilters = React.useCallback(function (e, source) {
    if (source === 'dialog' && showGo) {
      setDialogOpen(false);
      setDialogOpen(true);
    } else if (source === 'filterBar' && showGoOnFB) {
      setMountFilters(false);
      setMountFilters(true);
    }

    if (onRestore) {
      onRestore(Utils.enrichEventWithDetails(e, {
        source: source
      }));
    }
  }, [setDialogOpen, showGo, showGoOnFB, onRestore]);
  var handleFBRestore = React.useCallback(function (e) {
    handleRestoreFilters(e, 'filterBar');
  }, [handleRestoreFilters]);
  var cssClasses = StyleClassHelper.StyleClassHelper.of(classes.outerContainer);

  if (className) {
    cssClasses.put(className);
  }

  if (filterContainerWidth) {
    cssClasses.put(classes.filterItemExpand);
  }

  React.useEffect(function () {
    var _search$props;

    prevSearchInputPropsValueRef.current = search === null || search === void 0 ? void 0 : (_search$props = search.props) === null || _search$props === void 0 ? void 0 : _search$props.value;
  }, [search === null || search === void 0 ? void 0 : (_search$props2 = search.props) === null || _search$props2 === void 0 ? void 0 : _search$props2.value]);
  var prevSearchInputPropsValue = prevSearchInputPropsValueRef.current;
  React.useEffect(function () {
    var _search$props3;

    if (prevSearchInputPropsValue !== (search === null || search === void 0 ? void 0 : (_search$props3 = search.props) === null || _search$props3 === void 0 ? void 0 : _search$props3.value)) {
      var _search$props4;

      setSearchValue(search === null || search === void 0 ? void 0 : (_search$props4 = search.props) === null || _search$props4 === void 0 ? void 0 : _search$props4.value);
    }
  }, [prevSearchInputPropsValue, search === null || search === void 0 ? void 0 : (_search$props5 = search.props) === null || _search$props5 === void 0 ? void 0 : _search$props5.value]);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, dialogOpen && showFilterConfiguration && /*#__PURE__*/React__default.createElement(FilterDialog, {
    filterBarRefs: filterRefs,
    open: dialogOpen,
    handleDialogClose: handleDialogClose,
    onGo: onGo,
    handleRestoreFilters: handleRestoreFilters,
    searchValue: (_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.children[0].value,
    handleSearchValueChange: handleSearchValueChange,
    showClearButton: showClearButton,
    showRestoreButton: showRestoreButton,
    showSearch: showSearchOnFiltersDialog,
    renderFBSearch: search,
    handleClearFilters: onFiltersDialogClear,
    handleSelectionChange: onFiltersDialogSelectionChange,
    handleDialogSave: handleDialogSave,
    showGoButton: showGo,
    handleDialogSearch: onFiltersDialogSearch,
    handleDialogCancel: onFiltersDialogCancel
  }, safeChildren()), /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: cssClasses.toString(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), loading ? /*#__PURE__*/React__default.createElement(BusyIndicator$2.BusyIndicator, {
    active: true,
    className: classes.loadingContainer,
    size: BusyIndicatorSize.BusyIndicatorSize.Large
  }) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Toolbar$1.Toolbar, {
    className: classes.filterBarHeader,
    toolbarStyle: ToolbarStyle.ToolbarStyle.Clear
  }, variants, search && /*#__PURE__*/React__default.createElement(ToolbarSeparator$1.ToolbarSeparator, null), search && /*#__PURE__*/React__default.createElement("div", {
    ref: searchRef
  }, renderSearchWithValue(search, searchValue)), /*#__PURE__*/React__default.createElement(ToolbarSpacer$1.ToolbarSpacer, null), useToolbar && showClearOnFB && /*#__PURE__*/React__default.createElement(Button$2.Button, {
    onClick: onClear,
    design: ButtonDesign.ButtonDesign.Transparent
  }, clearText), useToolbar && showRestoreOnFB && /*#__PURE__*/React__default.createElement(Button$2.Button, {
    onClick: handleFBRestore,
    design: ButtonDesign.ButtonDesign.Transparent
  }, restoreText), useToolbar && /*#__PURE__*/React__default.createElement(Button$2.Button, {
    onClick: handleToggle,
    design: ButtonDesign.ButtonDesign.Transparent,
    className: classes.showFiltersBtn
  }, showFilters ? hideFilterBarText : showFilterBarText), useToolbar && showFilterConfiguration && /*#__PURE__*/React__default.createElement(Button$2.Button, {
    onClick: handleDialogOpen
  }, "".concat(filtersText).concat(activeFiltersCount && parseInt(activeFiltersCount) > 0 ? " (".concat(activeFiltersCount, ")") : '')), useToolbar && showGoOnFB && /*#__PURE__*/React__default.createElement(Button$2.Button, {
    onClick: onGo,
    design: ButtonDesign.ButtonDesign.Emphasized
  }, goText)), mountFilters && /*#__PURE__*/React__default.createElement("div", {
    className: filterAreaClasses.valueOf()
  }, renderChildren()))));
});
FilterBar.defaultProps = {
  useToolbar: true,
  filterBarExpanded: true,
  showClearOnFB: false,
  showGo: false,
  showRestoreOnFB: false,
  showGoOnFB: false,
  showFilterConfiguration: false,
  showClearButton: false,
  showRestoreButton: false,
  showSearchOnFiltersDialog: false,
  considerGroupName: false,
  loading: false,
  onToggleFilters: null,
  onFiltersDialogOpen: null,
  onFiltersDialogCancel: null,
  onFiltersDialogClose: null,
  onFiltersDialogSave: null,
  onFiltersDialogClear: null,
  onClear: null,
  onFiltersDialogSelectionChange: null,
  onFiltersDialogSearch: null,
  onGo: null,
  onRestore: null
};
FilterBar.displayName = 'FilterBar';

var styles$b = {
  filterItem: {
    width: 'var(--_ui5_input_width)',
    marginRight: '1rem',
    marginBottom: '1rem'
  },
  filterItemDialog: {
    flexGrow: 1,
    overflow: 'hidden'
  },
  innerFilterItemContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'start'
  },
  innerFilterItemContainerDialog: {
    display: 'grid',
    gridTemplateColumns: '20% calc(80% - 1rem)',
    '@media(max-width:700px)': {
      gridTemplateColumns: '100%'
    },
    gridTemplateRows: 'auto',
    gridRowGap: '0px',
    gridColumnGap: '1rem',
    '& :first-child': {
      maxWidth: '100%',
      placeSelf: 'center end',
      '@media(max-width:700px)': {
        placeSelf: 'center start'
      }
    },
    '& :last-child': {
      placeSelf: 'center auto',
      width: '100%'
    }
  },
  loadingContainer: {
    display: 'flex',
    width: '100%',
    height: '1.625rem',
    justifyContent: 'center'
  }
};

var useStyles$9 = createComponentStyles.createComponentStyles(styles$b, {
  name: 'FilterGroupItem'
});
var emptyObject = {};
var FilterGroupItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var classes = useStyles$9();
  var groupName = props.groupName,
      considerGroupName = props.considerGroupName,
      label = props.label,
      labelTooltip = props.labelTooltip,
      required = props.required,
      visible = props.visible,
      visibleInFilterBar = props.visibleInFilterBar,
      children = props.children,
      style = props.style,
      loading = props.loading,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      inFB = props.inFB;
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  var styleClasses = StyleClassHelper.StyleClassHelper.of(inFB ? classes.filterItem : classes.filterItemDialog);

  if (className) {
    styleClasses.put(className);
  }

  if (!required && (!visible || inFB && !visibleInFilterBar)) return null;
  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    title: tooltip,
    slot: slot
  }, passThroughProps, {
    className: styleClasses.valueOf(),
    style: inFB ? style : emptyObject
  }), /*#__PURE__*/React__default.createElement("div", {
    className: inFB ? classes.innerFilterItemContainer : classes.innerFilterItemContainerDialog
  }, /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, null, /*#__PURE__*/React__default.createElement(Label$1.Label, {
    tooltip: labelTooltip !== null && labelTooltip !== void 0 ? labelTooltip : label,
    required: required
  }, "".concat(considerGroupName && groupName !== 'default' ? "".concat(groupName, ": ") : '', "\n          ").concat(label))), loading ? /*#__PURE__*/React__default.createElement(BusyIndicator$2.BusyIndicator, {
    className: classes.loadingContainer,
    active: true,
    size: BusyIndicatorSize.BusyIndicatorSize.Small
  }) : children));
});
FilterGroupItem.displayName = 'FilterGroupItem';
FilterGroupItem.defaultProps = {
  groupName: 'default',
  visible: true,
  required: false,
  label: ''
};

var styles$c = {
  filterItem: {
    minWidth: '10rem',
    height: 'fit-content',
    marginRight: '1rem',
    marginBottom: '1rem'
  },
  innerFilterItemContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'start'
  },
  loadingContainer: {
    display: 'flex',
    width: '100%',
    justifyContent: 'center'
  }
};

var useStyles$a = createComponentStyles.createComponentStyles(styles$c, {
  name: 'FilterItem'
});
var FilterItem = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _ref = props,
      filterItems = _ref.filterItems,
      onChange = _ref.onChange,
      type = _ref.type,
      placeholder = _ref.placeholder,
      children = _ref.children,
      loading = _ref.loading,
      changeEventName = _ref.changeEventName,
      valueParamName = _ref.valueParamName,
      label = _ref.label,
      style = _ref.style,
      tooltip = _ref.tooltip;
  var classes = useStyles$a();
  React.useEffect(function () {
    Utils.deprecationNotice('FilterItem', "'@ui5/webcomponents-react/lib/FilterItem' is deprecated and will be removed in the next major release.\nPlease use '@ui5/webcomponents-react/lib/FilterGroupItem' instead.");
  }, []);

  function getItemByKey(key) {
    return filterItems.filter(function (item) {
      return item.key === key;
    })[0];
  }

  function onSelect(e) {
    var selectedKey = e.detail.selectedOption.getAttribute('data-key');
    var item = getItemByKey(selectedKey) || filterItems[0];
    onChange(Utils.enrichEventWithDetails(e, {
      selectedItem: item
    }));
  }

  function onMultiCbChange(e) {
    var selectedItems = e.detail.items;
    onChange(Utils.enrichEventWithDetails(e, {
      selectedItems: selectedItems.map(function (item) {
        return getItemByKey(item.getAttribute('data-key'));
      })
    }));
  }

  var filterComponent = React.useMemo(function () {
    if (loading) {
      return /*#__PURE__*/React__default.createElement("div", {
        className: classes.loadingContainer
      }, /*#__PURE__*/React__default.createElement(BusyIndicator$2.BusyIndicator, {
        active: true,
        size: BusyIndicatorSize.BusyIndicatorSize.Medium,
        style: {
          backgroundColor: 'transparent',
          width: '80px'
        }
      }));
    }

    switch (type) {
      case FilterType.FilterType.Default:
        return /*#__PURE__*/React__default.createElement(Input$1.Input, {
          placeholder: placeholder,
          onChange: onSelect,
          style: {
            width: '100%'
          }
        });

      case FilterType.FilterType.MultiSelect:
        return /*#__PURE__*/React__default.createElement(MultiComboBox$1.MultiComboBox, {
          onSelectionChange: onMultiCbChange
        }, filterItems.map(function (item) {
          return /*#__PURE__*/React__default.createElement(StandardListItem$1.StandardListItem, {
            "data-key": item.key,
            key: item.key
          }, item.text);
        }));

      case FilterType.FilterType.Select:
        return /*#__PURE__*/React__default.createElement(Select$1.Select, {
          onChange: onSelect,
          style: {
            width: '100%'
          }
        }, filterItems.map(function (item) {
          return /*#__PURE__*/React__default.createElement(Option$1.Option, {
            key: item.key,
            "data-key": item.key
          }, item.text);
        }));

      case FilterType.FilterType.Custom:
        return /*#__PURE__*/React__default.createElement("div", null, React__default.Children.map(children, function (child) {
          return /*#__PURE__*/React__default.cloneElement(child, {
            // [changeEventName]: (event) => {
            //   onSelect(event);
            //   // @ts-ignore
            //   if (child.props.hasOwnProperty(changeEventName)) {
            //     // @ts-ignore
            //     child.props[changeEventName](event);
            //   }
            // },
            style: {
              width: '100%'
            }
          });
        }));
    }
  }, [valueParamName, changeEventName, filterItems, loading, type, children]);
  var filterItemClasses = StyleClassHelper.StyleClassHelper.of(classes.filterItem);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onChange']);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: filterItemClasses.toString(),
    style: style,
    title: tooltip
  }, passThroughProps), /*#__PURE__*/React__default.createElement("div", {
    className: classes.innerFilterItemContainer
  }, /*#__PURE__*/React__default.createElement(Label$1.Label, null, label), filterComponent));
});
FilterItem.defaultProps = {
  placeholder: '',
  type: FilterType.FilterType.Default,
  filterItems: [],
  label: '',
  onChange: function onChange() {
    return null;
  },
  loading: false
};
FilterItem.displayName = 'FilterItem';

(function (FilterType) {
  FilterType["Default"] = "Default";
  FilterType["Select"] = "Select";
  FilterType["MultiSelect"] = "MultiSelect";
  FilterType["Custom"] = "Custom";
})(exports.FilterType || (exports.FilterType = {}));

var styles$d = {
  flexBox: {
    display: 'flex'
  },
  flexBoxDisplayInline: {
    display: 'inline-flex'
  },
  justifyContentStart: {
    justifyContent: 'flex-start'
  },
  justifyContentEnd: {
    justifyContent: 'flex-end'
  },
  justifyContentCenter: {
    justifyContent: 'center'
  },
  justifyContentSpaceAround: {
    justifyContent: 'space-around'
  },
  justifyContentSpaceBetween: {
    justifyContent: 'space-between'
  },
  flexBoxDirectionColumn: {
    flexDirection: 'column'
  },
  flexBoxDirectionColumnReverse: {
    flexDirection: 'column-reverse'
  },
  flexBoxDirectionRow: {
    flexDirection: 'row'
  },
  flexBoxDirectionRowReverse: {
    flexDirection: 'row-reverse'
  },
  alignItemsStart: {
    alignItems: 'flex-start'
  },
  alignItemsEnd: {
    alignItems: 'flex-end'
  },
  alignItemsCenter: {
    alignItems: 'center'
  },
  alignItemsStretch: {
    alignItems: 'stretch'
  },
  alignItemsBaseline: {
    alignItems: 'baseline'
  },
  flexWrapNoWrap: {
    flexWrap: 'nowrap'
  },
  flexWrapWrap: {
    flexWrap: 'wrap'
  },
  flexWrapWrapReverse: {
    flexWrap: 'wrap-reverse'
  }
};

var useStyles$b = createComponentStyles.createComponentStyles(styles$d, {
  name: 'FlexBox'
});
var FlexBox = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      justifyContent = props.justifyContent,
      direction = props.direction,
      alignItems = props.alignItems,
      displayInline = props.displayInline,
      wrap = props.wrap,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot;
  var classes = useStyles$b();
  var flexBoxClasses = StyleClassHelper.StyleClassHelper.of(classes.flexBox); // direction

  flexBoxClasses.put(classes["flexBoxDirection".concat(direction)]); // justify content

  flexBoxClasses.put(classes["justifyContent".concat(justifyContent)]); // align items

  flexBoxClasses.put(classes["alignItems".concat(alignItems)]); // wrapping

  flexBoxClasses.put(classes["flexWrap".concat(wrap)]);

  if (displayInline) {
    flexBoxClasses.put(classes.flexBoxDisplayInline);
  }

  if (className) {
    flexBoxClasses.put(className);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: flexBoxClasses.valueOf(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), children);
});
FlexBox.defaultProps = {
  alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Stretch,
  direction: FlexBoxDirection.FlexBoxDirection.Row,
  displayInline: false,
  justifyContent: FlexBoxJustifyContent.FlexBoxJustifyContent.Start,
  wrap: FlexBoxWrap.FlexBoxWrap.NoWrap
};
FlexBox.displayName = 'FlexBox';

(function (FlexBoxAlignItems) {
  FlexBoxAlignItems["Start"] = "Start";
  FlexBoxAlignItems["Center"] = "Center";
  FlexBoxAlignItems["End"] = "End";
  FlexBoxAlignItems["Baseline"] = "Baseline";
  FlexBoxAlignItems["Stretch"] = "Stretch";
})(exports.FlexBoxAlignItems || (exports.FlexBoxAlignItems = {}));

(function (FlexBoxDirection) {
  FlexBoxDirection["Column"] = "Column";
  FlexBoxDirection["ColumnReverse"] = "ColumnReverse";
  FlexBoxDirection["Row"] = "Row";
  FlexBoxDirection["RowReverse"] = "RowReverse";
})(exports.FlexBoxDirection || (exports.FlexBoxDirection = {}));

(function (FlexBoxJustifyContent) {
  FlexBoxJustifyContent["Start"] = "Start";
  FlexBoxJustifyContent["Center"] = "Center";
  FlexBoxJustifyContent["End"] = "End";
  FlexBoxJustifyContent["SpaceAround"] = "SpaceAround";
  FlexBoxJustifyContent["SpaceBetween"] = "SpaceBetween";
})(exports.FlexBoxJustifyContent || (exports.FlexBoxJustifyContent = {}));

(function (FlexBoxWrap) {
  FlexBoxWrap["NoWrap"] = "NoWrap";
  FlexBoxWrap["Wrap"] = "Wrap";
  FlexBoxWrap["WrapReverse"] = "WrapReverse";
})(exports.FlexBoxWrap || (exports.FlexBoxWrap = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/FlexibleColumnLayout" target="_blank">UI5 Web Components Playground</a>
 */
var FlexibleColumnLayout = withWebComponent$1.withWebComponent('ui5-flexible-column-layout', ['layout'], ['noArrows'], ['endColumn', 'midColumn', 'startColumn'], ['layout-change']);
FlexibleColumnLayout.displayName = 'FlexibleColumnLayout';
FlexibleColumnLayout.defaultProps = {
  layout: FCLLayout.FCLLayout.OneColumn,
  noArrows: false
};

var styles$e = {
  form: {
    display: 'grid',
    alignItems: 'center',
    rowGap: '0.25rem',
    columnGap: '0.5rem',
    gridTemplateColumns: "repeat(12, 1fr)",
    '--ui5wcr_form_full_span': 'span 12',
    '--ui5wcr_form_label_text_align': 'end',
    '&[data-columns="1"]': {},
    '&[data-columns="2"]': {
      gridTemplateColumns: "repeat(24, 1fr)",
      '--ui5wcr_form_full_span': 'span 24'
    },
    '&[data-columns="3"]': {
      gridTemplateColumns: "repeat(36, 1fr)",
      '--ui5wcr_form_full_span': 'span 36'
    },
    '&[data-columns="4"]': {
      gridTemplateColumns: "repeat(48, 1fr)",
      '--ui5wcr_form_full_span': 'span 48'
    },
    '&[data-columns="5"]': {
      gridTemplateColumns: "repeat(60, 1fr)",
      '--ui5wcr_form_full_span': 'span 60'
    },
    '&[data-columns="6"]': {
      gridTemplateColumns: "repeat(72, 1fr)",
      '--ui5wcr_form_full_span': 'span 72'
    },
    '&[data-columns="7"]': {
      gridTemplateColumns: "repeat(84, 1fr)",
      '--ui5wcr_form_full_span': 'span 84'
    },
    '&[data-columns="8"]': {
      gridTemplateColumns: "repeat(96, 1fr)",
      '--ui5wcr_form_full_span': 'span 96'
    },
    '&[data-columns="9"]': {
      gridTemplateColumns: "repeat(108, 1fr)",
      '--ui5wcr_form_full_span': 'span 108'
    },
    '&[data-columns="10"]': {
      gridTemplateColumns: "repeat(120, 1fr)",
      '--ui5wcr_form_full_span': 'span 120'
    },
    '&[data-columns="11"]': {
      gridTemplateColumns: "repeat(132, 1fr)",
      '--ui5wcr_form_full_span': 'span 132'
    },
    '&[data-columns="12"]': {
      gridTemplateColumns: "repeat(144, 1fr)",
      '--ui5wcr_form_full_span': 'span 144'
    }
  },
  formTitle: {
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapGroup_TitleBorderColor),
    marginBottom: '1.75rem',
    gridColumn: 'var(--ui5wcr_form_full_span)'
  }
};

var useStyles$c = createComponentStyles.createComponentStyles(styles$e, {
  name: 'Form'
});
var Form = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var title = props.title,
      children = props.children,
      className = props.className,
      slot = props.slot,
      style = props.style,
      tooltip = props.tooltip,
      _props$columnsS = props.columnsS,
      columnsS = _props$columnsS === void 0 ? 1 : _props$columnsS,
      _props$columnsM = props.columnsM,
      columnsM = _props$columnsM === void 0 ? 1 : _props$columnsM,
      _props$columnsL = props.columnsL,
      columnsL = _props$columnsL === void 0 ? 1 : _props$columnsL,
      _props$columnsXL = props.columnsXL,
      columnsXL = _props$columnsXL === void 0 ? 2 : _props$columnsXL,
      _props$labelSpanS = props.labelSpanS,
      labelSpanS = _props$labelSpanS === void 0 ? 12 : _props$labelSpanS,
      _props$labelSpanM = props.labelSpanM,
      labelSpanM = _props$labelSpanM === void 0 ? 2 : _props$labelSpanM,
      _props$labelSpanL = props.labelSpanL,
      labelSpanL = _props$labelSpanL === void 0 ? 4 : _props$labelSpanL,
      _props$labelSpanXL = props.labelSpanXL,
      labelSpanXL = _props$labelSpanXL === void 0 ? 4 : _props$labelSpanXL;
  var columnsMap = new Map();
  columnsMap.set('Phone', columnsS);
  columnsMap.set('Tablet', columnsM);
  columnsMap.set('Desktop', columnsL);
  columnsMap.set('LargeDesktop', columnsXL);
  var labelSpanMap = new Map();
  labelSpanMap.set('Phone', labelSpanS);
  labelSpanMap.set('Tablet', labelSpanM);
  labelSpanMap.set('Desktop', labelSpanL);
  labelSpanMap.set('LargeDesktop', labelSpanXL);
  var formRef = hooks.useConsolidatedRef(ref); // use the window range set as first best guess

  var _useState = React.useState(Device.Device.media.getCurrentRange('StdExt', window.innerWidth).name),
      _useState2 = _slicedToArray(_useState, 2),
      currentRange = _useState2[0],
      setCurrentRange = _useState2[1];

  var lastRange = React.useRef(currentRange);
  React.useEffect(function () {
    var observer = new ResizeObserver(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          form = _ref2[0];

      var newRange = Device.Device.media.getCurrentRange('StdExt', form.contentRect.width).name;

      if (lastRange.current !== newRange) {
        lastRange.current = newRange;
        setCurrentRange(newRange);
      }
    });

    if (formRef.current) {
      observer.observe(formRef.current);
    }

    return function () {
      observer.disconnect();
    };
  }, [formRef, setCurrentRange, lastRange]);
  var classes = useStyles$c();
  var currentNumberOfColumns = columnsMap.get(currentRange);
  var currentLabelSpan = labelSpanMap.get(currentRange);

  var _useMemo = React.useMemo(function () {
    var _props$title;

    var computedFormGroups = [];

    if (React.Children.count(children) === 1 && !title && ((_props$title = children.props.title) === null || _props$title === void 0 ? void 0 : _props$title.length) > 0) {
      return [/*#__PURE__*/React.cloneElement(children, {
        title: null
      }), children.props.title];
    }

    var currentColumnCount = currentNumberOfColumns;

    if (currentColumnCount === 1) {
      return [children, title];
    }

    var rows = [];
    var childrenArray = React.Children.toArray(children);
    var estimatedNumberOfGroupRows = childrenArray.length / currentColumnCount;

    for (var i = 0; i < estimatedNumberOfGroupRows; i++) {
      rows[i] = childrenArray.slice(i * currentColumnCount, i * currentColumnCount + currentColumnCount);
    }

    var maxRowsPerRow = [];
    rows.forEach(function (rowGroup, rowIndex) {
      var numberOfRowsOfEachForm = rowGroup.map(function (row) {
        var _row$props, _row$props$title;

        if (row.type.displayName === 'FormItem') {
          return 1;
        }

        return React.Children.count(row.props.children) + (((_row$props = row.props) === null || _row$props === void 0 ? void 0 : (_row$props$title = _row$props.title) === null || _row$props$title === void 0 ? void 0 : _row$props$title.length) > 0 ? 1 : 0);
      });
      maxRowsPerRow[rowIndex] = Math.max.apply(Math, _toConsumableArray(numberOfRowsOfEachForm));
    });
    var totalRowCount = 2;
    rows.forEach(function (column, rowIndex) {
      var rowsForThisRow = maxRowsPerRow[rowIndex];
      column.forEach(function (cell, columnIndex) {
        var _cell$props$title, _cell$props;

        computedFormGroups.push( /*#__PURE__*/React__default.createElement(Title$1.Title, {
          level: TitleLevel.TitleLevel.H5,
          style: {
            paddingBottom: '0.75rem',
            gridColumnEnd: 'span 12',
            gridColumnStart: columnIndex * 12 + 1,
            gridRowStart: totalRowCount
          },
          key: "title-col-".concat(columnIndex, "-row-").concat(totalRowCount)
        }, (_cell$props$title = cell === null || cell === void 0 ? void 0 : (_cell$props = cell.props) === null || _cell$props === void 0 ? void 0 : _cell$props.title) !== null && _cell$props$title !== void 0 ? _cell$props$title : ''));

        for (var _i = 0; _i < rowsForThisRow; _i++) {
          var itemToRender = cell.type.displayName === 'FormGroup' ? React.Children.toArray(cell.props.children)[_i] : cell.type.displayName === 'FormItem' && _i === 0 ? cell : null;

          if (itemToRender) {
            computedFormGroups.push( /*#__PURE__*/React.cloneElement(itemToRender, {
              key: "col-".concat(columnIndex, "-row-").concat(totalRowCount + _i),
              columnIndex: columnIndex,
              rowIndex: totalRowCount + _i + 1,
              labelSpan: currentLabelSpan
            }));
          }
        }
      });
      totalRowCount += rowsForThisRow;

      if (rowsForThisRow === 1) {
        totalRowCount += 1;
      }
    });
    return [computedFormGroups, title];
  }, [children, currentRange, title, currentNumberOfColumns, currentLabelSpan]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      formGroups = _useMemo2[0],
      updatedTitle = _useMemo2[1];

  var passThroughProps = hooks.usePassThroughHtmlProps(props);
  var formClassNames = StyleClassHelper.StyleClassHelper.of(classes.form).putIfPresent(className);
  var gridStyles = {};
  gridStyles['--ui5wcr_form_content_span'] = 12 - currentLabelSpan;
  gridStyles['--ui5wcr_form_label_span'] = currentLabelSpan; // special case for phones or label span 12

  if (gridStyles['--ui5wcr_form_content_span'] <= 0) {
    gridStyles['--ui5wcr_form_content_span'] = 12;
    gridStyles['--ui5wcr_form_label_text_align'] = 'start';
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: formRef,
    slot: slot,
    className: formClassNames.valueOf(),
    title: tooltip,
    style: _objectSpread(_objectSpread({}, gridStyles), style || {}),
    "data-columns": currentNumberOfColumns
  }, passThroughProps), updatedTitle && /*#__PURE__*/React__default.createElement(Title$1.Title, {
    level: TitleLevel.TitleLevel.H3,
    className: classes.formTitle
  }, updatedTitle), formGroups);
});
Form.displayName = 'Form';

var useStyles$d = createComponentStyles.createComponentStyles({
  title: {
    paddingBottom: '0.75rem',
    gridColumn: 'span 12'
  }
}, {
  name: 'FormGroup'
});

var FormGroup = function FormGroup(props) {
  var title = props.title,
      children = props.children;
  var classes = useStyles$d();
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, title && /*#__PURE__*/React__default.createElement(Title$1.Title, {
    level: TitleLevel.TitleLevel.H5,
    className: classes.title
  }, title), children);
};

FormGroup.displayName = 'FormGroup';

var useStyles$e = createComponentStyles.createComponentStyles({
  label: {
    gridColumnEnd: 'span var(--ui5wcr_form_label_span)',
    justifySelf: 'var(--ui5wcr_form_label_text_align)',
    textAlign: 'var(--ui5wcr_form_label_text_align)'
  },
  content: {
    gridColumnEnd: 'span var(--ui5wcr_form_content_span)'
  }
}, {
  name: 'FormItem'
});

var renderLabel = function renderLabel(label, classes, styles) {
  if (typeof label === 'string') {
    return /*#__PURE__*/React__default.createElement(Label$1.Label, {
      className: classes.label,
      style: styles,
      wrap: true
    }, label ? "".concat(label, ":") : '');
  }

  if ( /*#__PURE__*/React.isValidElement(label)) {
    var _props$wrap, _props$className;

    return /*#__PURE__*/React.cloneElement(label, {
      wrap: (_props$wrap = label.props.wrap) !== null && _props$wrap !== void 0 ? _props$wrap : true,
      className: "".concat(classes.label, " ").concat((_props$className = label.props.className) !== null && _props$className !== void 0 ? _props$className : ''),
      style: _objectSpread({
        gridColumnStart: styles.gridColumnStart,
        gridRowStart: styles.gridRowStart
      }, label.props.style || {})
    }, label.props.children ? // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    "".concat(label.props.children, ":") : '');
  }

  return null;
};

var FormItem = function FormItem(props) {
  var _ref = props,
      label = _ref.label,
      children = _ref.children,
      columnIndex = _ref.columnIndex,
      rowIndex = _ref.rowIndex,
      labelSpan = _ref.labelSpan;
  var classes = useStyles$e();
  var gridColumnStart = (columnIndex !== null && columnIndex !== void 0 ? columnIndex : 0) * 12 + 1;
  var gridRowStart = rowIndex !== null && rowIndex !== void 0 ? rowIndex : 0;
  var contentGridColumnStart = columnIndex != null ? labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan !== null && labelSpan !== void 0 ? labelSpan : 0) : undefined;

  if (labelSpan === 12) {
    return /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
      direction: FlexBoxDirection.FlexBoxDirection.Column,
      alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Start,
      style: {
        gridColumnStart: gridColumnStart,
        gridRowStart: gridRowStart,
        gridColumnEnd: 'span 12',
        placeItems: 'flex-start'
      }
    }, renderLabel(label, classes, {}), children);
  }

  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, renderLabel(label, classes, {
    gridColumnStart: gridColumnStart,
    gridRowStart: gridRowStart
  }), /*#__PURE__*/React__default.createElement("div", {
    className: classes.content,
    style: {
      gridColumnStart: contentGridColumnStart,
      gridRowStart: labelSpan === 12 ? gridRowStart + 1 : gridRowStart
    }
  }, children));
};

FormItem.displayName = 'FormItem';

(function (GlobalStyleClasses) {
  GlobalStyleClasses["sapScrollBar"] = "sapScrollBar";
})(exports.GlobalStyleClasses || (exports.GlobalStyleClasses = {}));

var styles$f = {
  grid: {
    display: 'grid',
    gridTemplateColumns: "repeat(12, 1fr)"
  },
  gridSpan1: {
    gridColumn: 'span 1'
  },
  gridSpan2: {
    gridColumn: 'span 2'
  },
  gridSpan3: {
    gridColumn: 'span 3'
  },
  gridSpan4: {
    gridColumn: 'span 4'
  },
  gridSpan5: {
    gridColumn: 'span 5'
  },
  gridSpan6: {
    gridColumn: 'span 6'
  },
  gridSpan7: {
    gridColumn: 'span 7'
  },
  gridSpan8: {
    gridColumn: 'span 8'
  },
  gridSpan9: {
    gridColumn: 'span 9'
  },
  gridSpan10: {
    gridColumn: 'span 10'
  },
  gridSpan11: {
    gridColumn: 'span 11'
  },
  gridSpan12: {
    gridColumn: 'span 12'
  },
  positionCenter: {
    marginLeft: 'auto',
    marginRight: 'auto'
  },
  positionRight: {
    marginLeft: 'auto',
    marginRight: 0
  }
};

var INDENT_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([0-9]|1[0-2]))? ?(L([0-9]|1[0-2]))? ?(M([0-9]|1[0-2]))? ?(S([0-9]|1[0-2]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var SPAN_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([1-9]|1[0-2]))? ?(L([1-9]|1[0-2]))? ?(M([1-9]|1[0-2]))? ?(S([1-9]|1[0-2]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var DefaultSpanMap = new Map();
DefaultSpanMap.set('Phone', 1);
DefaultSpanMap.set('Tablet', 2);
DefaultSpanMap.set('Desktop', 4);
DefaultSpanMap.set('LargeDesktop', 4);
var DefaultIndentMap = new Map();
DefaultIndentMap.set('Phone', 0);
DefaultIndentMap.set('Tablet', 0);
DefaultIndentMap.set('Desktop', 0);
DefaultIndentMap.set('LargeDesktop', 0);

var getSpanFromString = function getSpanFromString(span, currentRange) {
  var _spanConfig$groups$cu;

  var spanConfig = SPAN_PATTERN.exec(span);
  return (_spanConfig$groups$cu = spanConfig === null || spanConfig === void 0 ? void 0 : spanConfig.groups[currentRange]) !== null && _spanConfig$groups$cu !== void 0 ? _spanConfig$groups$cu : DefaultSpanMap.get(currentRange);
};

var getIndentFromString = function getIndentFromString(indent, currentRange) {
  var _indentConfig$groups$;

  var indentConfig = INDENT_PATTERN.exec(indent);
  return (_indentConfig$groups$ = indentConfig === null || indentConfig === void 0 ? void 0 : indentConfig.groups[currentRange]) !== null && _indentConfig$groups$ !== void 0 ? _indentConfig$groups$ : DefaultIndentMap.get(currentRange);
};

var useStyles$f = createComponentStyles.createComponentStyles(styles$f, {
  name: 'Grid'
});
var Grid = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var position = props.position,
      children = props.children,
      _props$hSpacing = props.hSpacing,
      hSpacing = _props$hSpacing === void 0 ? '1rem' : _props$hSpacing,
      _props$vSpacing = props.vSpacing,
      vSpacing = _props$vSpacing === void 0 ? '1rem' : _props$vSpacing,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      _props$defaultIndent = props.defaultIndent,
      defaultIndent = _props$defaultIndent === void 0 ? 'XL0 L0 M0 S0' : _props$defaultIndent,
      _props$defaultSpan = props.defaultSpan,
      defaultSpan = _props$defaultSpan === void 0 ? 'XL3 L3 M6 S12' : _props$defaultSpan;
  var classes = useStyles$f();
  var currentRange = useViewportRange.useViewportRange('StdExt');
  var gridClasses = StyleClassHelper.StyleClassHelper.of(classes.grid);

  if (GridPosition.GridPosition.Center === position) {
    gridClasses.put(classes.positionCenter);
  }

  if (GridPosition.GridPosition.Right === position) {
    gridClasses.put(classes.positionRight);
  }

  if (className) {
    gridClasses.put(className);
  }

  var renderGridElements = React.useCallback(function (child) {
    var _child$props$dataLay, _child$props$dataLay2;

    if (!child) return null;
    var childSpan = getSpanFromString((_child$props$dataLay = child.props['data-layout-span']) !== null && _child$props$dataLay !== void 0 ? _child$props$dataLay : defaultSpan, currentRange);
    var childClass = classes["gridSpan".concat(childSpan)];
    var childrenWithGridLayout = [/*#__PURE__*/React__default.createElement("div", {
      className: childClass
    }, child)];
    var indentSpan = getIndentFromString((_child$props$dataLay2 = child.props['data-layout-indent']) !== null && _child$props$dataLay2 !== void 0 ? _child$props$dataLay2 : defaultIndent, currentRange);

    if (indentSpan && indentSpan > 0) {
      childrenWithGridLayout.unshift( /*#__PURE__*/React__default.createElement("span", {
        className: classes["gridSpan".concat(indentSpan)]
      }));
    }

    return childrenWithGridLayout;
  }, [currentRange, defaultSpan, defaultIndent, classes]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: gridClasses.valueOf(),
    style: _objectSpread({
      gridRowGap: vSpacing,
      gridColumnGap: hSpacing
    }, style),
    title: tooltip,
    slot: slot
  }, passThroughProps), React.Children.map(children, renderGridElements));
});
Grid.displayName = 'Grid';

(function (GridPosition) {
  GridPosition["Left"] = "Left";
  GridPosition["Center"] = "Center";
  GridPosition["Right"] = "Right";
})(exports.GridPosition || (exports.GridPosition = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/GroupHeaderListItem" target="_blank">UI5 Web Components Playground</a>
 */
var GroupHeaderListItem = withWebComponent$1.withWebComponent('ui5-li-groupheader', [], ['selected'], [], []);
GroupHeaderListItem.displayName = 'GroupHeaderListItem';
GroupHeaderListItem.defaultProps = {
  selected: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Icon" target="_blank">UI5 Web Components Playground</a>
 */
var Icon = withWebComponent$1.withWebComponent('ui5-icon', ['accessibleName', 'name'], ['interactive', 'showTooltip'], [], []);
Icon.displayName = 'Icon';
Icon.defaultProps = {
  interactive: false,
  showTooltip: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Input" target="_blank">UI5 Web Components Playground</a>
 */
var Input = withWebComponent$1.withWebComponent('ui5-input', ['maxlength', 'name', 'placeholder', 'type', 'value', 'valueState'], ['disabled', 'highlight', 'readonly', 'required', 'showSuggestions'], ['icon', 'valueStateMessage'], ['change', 'input', 'submit', 'suggestion-item-preview', 'suggestion-item-select', 'suggestion-scroll']);
Input.displayName = 'Input';
Input.defaultProps = {
  disabled: false,
  highlight: false,
  readonly: false,
  required: false,
  showSuggestions: false,
  type: InputType.InputType.Text,
  valueState: ValueState.ValueState.None
};

(function (InputType) {
  InputType["Text"] = "Text";
  InputType["Email"] = "Email";
  InputType["Number"] = "Number";
  InputType["Password"] = "Password";
  InputType["Tel"] = "Tel";
  InputType["URL"] = "URL";
})(exports.InputType || (exports.InputType = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Label" target="_blank">UI5 Web Components Playground</a>
 */
var Label = withWebComponent$1.withWebComponent('ui5-label', ['for'], ['required', 'showColon', 'wrap'], [], []);
Label.displayName = 'Label';
Label.defaultProps = {
  required: false,
  showColon: false,
  wrap: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Link" target="_blank">UI5 Web Components Playground</a>
 */
var Link = withWebComponent$1.withWebComponent('ui5-link', ['design', 'href', 'target'], ['disabled', 'wrap'], [], ['click']);
Link.displayName = 'Link';
Link.defaultProps = {
  design: LinkDesign.LinkDesign.Default,
  disabled: false,
  wrap: false
};

// introduced because of web components

(function (LinkDesign) {
  LinkDesign["Default"] = "Default";
  LinkDesign["Subtle"] = "Subtle";
  LinkDesign["Emphasized"] = "Emphasized";
})(exports.LinkDesign || (exports.LinkDesign = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/List" target="_blank">UI5 Web Components Playground</a>
 */
var List = withWebComponent$1.withWebComponent('ui5-list', ['footerText', 'headerText', 'mode', 'noDataText', 'separators'], ['busy', 'infiniteScroll', 'inset'], ['header'], ['item-click', 'item-close', 'item-delete', 'item-toggle', 'load-more', 'selection-change']);
List.displayName = 'List';
List.defaultProps = {
  busy: false,
  infiniteScroll: false,
  inset: false,
  mode: ListMode.ListMode.None,
  separators: ListSeparators.ListSeparators.All
};

(function (ListItemTypes) {
  ListItemTypes["Inactive"] = "Inactive";
  ListItemTypes["Active"] = "Active";
  ListItemTypes["Detail"] = "Detail";
})(exports.ListItemTypes || (exports.ListItemTypes = {}));

(function (ListMode) {
  ListMode["None"] = "None";
  ListMode["SingleSelect"] = "SingleSelect";
  ListMode["SingleSelectBegin"] = "SingleSelectBegin";
  ListMode["SingleSelectEnd"] = "SingleSelectEnd";
  ListMode["MultiSelect"] = "MultiSelect";
  ListMode["Delete"] = "Delete";
})(exports.ListMode || (exports.ListMode = {}));

// introduced because of web components

(function (ListSeparators) {
  ListSeparators["All"] = "All";
  ListSeparators["Inner"] = "Inner";
  ListSeparators["None"] = "None";
})(exports.ListSeparators || (exports.ListSeparators = {}));

var styles$g = {
  '@keyframes scroll': {
    '0%': {
      backgroundPosition: '-100% 0'
    },
    '100%': {
      backgroundPosition: '200% 0'
    }
  },
  loader: {
    height: '0.25rem',
    width: '100%',
    '&$loaderDeterminate': {
      background: "linear-gradient(to right, ".concat(ThemingParameters.ThemingParameters.sapContent_IconColor, ", ").concat(ThemingParameters.ThemingParameters.sapContent_IconColor, ")"),
      backgroundColor: 'rgba(8, 84, 160, 0.15)',
      backgroundRepeat: 'repeat-y'
    },
    '&$loaderIndeterminate': {
      background: "linear-gradient(\n      to right,\n      rgba(8, 84, 160, 0) 0px,\n      rgba(8, 84, 160, 1) calc(50% - 2rem),\n      ".concat(ThemingParameters.ThemingParameters.sapContent_IconColor, " calc(50% - 2rem),\n      ").concat(ThemingParameters.ThemingParameters.sapContent_IconColor, " calc(50% + 2rem),\n      rgba(8, 84, 160, 1) calc(50% + 2rem),\n      rgba(8, 84, 160, 0) 100%\n    )"),
      backgroundColor: 'rgba(8, 84, 160, 0.15)',
      backgroundSize: '40%',
      backgroundRepeat: 'repeat-y',
      animation: '$scroll 1.2s linear infinite'
    }
  },
  loaderDeterminate: {},
  loaderIndeterminate: {}
};

var useStyles$g = createComponentStyles.createComponentStyles(styles$g, {
  name: 'Loader'
});
var Loader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var className = props.className,
      type = props.type,
      progress = props.progress,
      tooltip = props.tooltip,
      slot = props.slot,
      style = props.style,
      delay = props.delay;
  var classes = useStyles$g(props);

  var _useState = React.useState(delay === 0),
      _useState2 = _slicedToArray(_useState, 2),
      isVisible = _useState2[0],
      setIsVisible = _useState2[1];

  var loaderClasses = StyleClassHelper.StyleClassHelper.of(classes.loader);

  if (className) {
    loaderClasses.put(className);
  }

  loaderClasses.put(classes["loader".concat(type)]);
  var inlineStyles = React.useMemo(function () {
    var backgroundSize = type !== LoaderType.LoaderType.Determinate ? '40%' : progress;
    return _objectSpread(_objectSpread({}, style), {}, {
      backgroundSize: backgroundSize
    });
  }, [progress, style, type]);
  React.useEffect(function () {
    var timeout;

    if (delay > 0) {
      timeout = setTimeout(function () {
        setIsVisible(true);
      }, delay);
    }

    return function () {
      clearTimeout(timeout);
    };
  }, []);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);

  var _useI18nText = hooks.useI18nText('@ui5/webcomponents-react', i18nDefaults.PLEASE_WAIT),
      _useI18nText2 = _slicedToArray(_useI18nText, 1),
      pleaseWait = _useI18nText2[0];

  if (!isVisible) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: loaderClasses.valueOf(),
    "data-component-name": "Loader",
    "aria-busy": "true",
    role: "progressbar",
    title: tooltip || pleaseWait,
    slot: slot,
    style: inlineStyles
  }, passThroughProps));
});
Loader.defaultProps = {
  type: LoaderType.LoaderType.Indeterminate,
  progress: '0px',
  delay: 0
};
Loader.displayName = 'Loader';

(function (LoaderType) {
  LoaderType["Determinate"] = "Determinate";
  LoaderType["Indeterminate"] = "Indeterminate";
})(exports.LoaderType || (exports.LoaderType = {}));

var style = {
  messageBox: {
    '--sapContent_Shadow0': 'none'
  },
  header: {
    display: 'flex',
    height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight,
    textAlign: 'center',
    width: '100%',
    alignItems: 'center',
    padding: '0.25rem 1rem',
    boxSizing: 'border-box',
    borderBottom: "1px solid var(--messageBoxBorderColor)",
    color: ThemingParameters.ThemingParameters.sapContent_LabelColor,
    fontSize: '1rem',
    '& ui5-icon:first-child': {
      padding: '0 0.25rem',
      width: '1rem',
      height: '1rem'
    },
    '&[data-type="Error"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapErrorBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapErrorBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapNegativeElementColor
    },
    '&[data-type="Warning"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapWarningBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapWarningBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapCriticalElementColor
    },
    '&[data-type="Success"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapSuccessBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapSuccessBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapPositiveElementColor
    },
    '&[data-type="Confirm"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapNeutralBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapNeutralBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapNeutralElementColor
    },
    '&[data-type="Information"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapNeutralBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapNeutralBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapNeutralElementColor
    },
    '&[data-type="Highlight"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.ThemingParameters.sapInformationBorderColor,
      '--messageBoxBorderColor': ThemingParameters.ThemingParameters.sapInformationBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.ThemingParameters.sapInformativeElementColor
    }
  },
  content: {
    padding: '1rem'
  },
  footer: {
    height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight,
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: '0 0.5rem',
    '& > *': {
      margin: '0 0.25rem'
    },
    '& > ui5-button': {
      display: 'flex',
      minWidth: '4rem'
    }
  }
};

var actionTextMap = new Map();
actionTextMap.set(MessageBoxActions.MessageBoxActions.ABORT, 0);
actionTextMap.set(MessageBoxActions.MessageBoxActions.CANCEL, 1);
actionTextMap.set(MessageBoxActions.MessageBoxActions.CLOSE, 2);
actionTextMap.set(MessageBoxActions.MessageBoxActions.DELETE, 3);
actionTextMap.set(MessageBoxActions.MessageBoxActions.IGNORE, 4);
actionTextMap.set(MessageBoxActions.MessageBoxActions.NO, 5);
actionTextMap.set(MessageBoxActions.MessageBoxActions.OK, 6);
actionTextMap.set(MessageBoxActions.MessageBoxActions.RETRY, 7);
actionTextMap.set(MessageBoxActions.MessageBoxActions.YES, 8);
var useStyles$h = createComponentStyles.createComponentStyles(style, {
  name: 'MessageBox'
});
var MessageBox = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var open = props.open,
      type = props.type,
      children = props.children,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot,
      title = props.title,
      icon = props.icon,
      actions = props.actions,
      onClose = props.onClose;
  var classes = useStyles$h();
  var iconToRender = React.useMemo(function () {
    if ( /*#__PURE__*/React.isValidElement(icon)) return icon;

    switch (type) {
      case MessageBoxTypes.MessageBoxTypes.CONFIRM:
        return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
          name: "question-mark"
        });

      case MessageBoxTypes.MessageBoxTypes.ERROR:
        return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
          name: "message-error"
        });

      case MessageBoxTypes.MessageBoxTypes.INFORMATION:
        return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
          name: "message-information"
        });

      case MessageBoxTypes.MessageBoxTypes.SUCCESS:
        return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
          name: "message-success"
        });

      case MessageBoxTypes.MessageBoxTypes.WARNING:
        return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
          name: "message-warning"
        });

      case MessageBoxTypes.MessageBoxTypes.HIGHLIGHT:
        return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
          name: "hint"
        });

      default:
        return null;
    }
  }, [icon, type]);

  var _useI18nText = hooks.useI18nText('@ui5/webcomponents-react', i18nDefaults.CONFIRMATION, i18nDefaults.ERROR, i18nDefaults.INFORMATION, i18nDefaults.SUCCESS, i18nDefaults.WARNING, i18nDefaults.HIGHLIGHT, i18nDefaults.ABORT, i18nDefaults.CANCEL, i18nDefaults.CLOSE, i18nDefaults.DELETE, i18nDefaults.IGNORE, i18nDefaults.NO, i18nDefaults.OK, i18nDefaults.RETRY, i18nDefaults.YES),
      _useI18nText2 = _toArray(_useI18nText),
      titleConfirmation = _useI18nText2[0],
      titleError = _useI18nText2[1],
      titleInformation = _useI18nText2[2],
      titleSuccess = _useI18nText2[3],
      titleWarning = _useI18nText2[4],
      titleHighlight = _useI18nText2[5],
      actionTranslations = _useI18nText2.slice(6);

  var titleToRender = function titleToRender() {
    if (title) {
      return title;
    }

    switch (type) {
      case MessageBoxTypes.MessageBoxTypes.CONFIRM:
        return titleConfirmation;

      case MessageBoxTypes.MessageBoxTypes.ERROR:
        return titleError;

      case MessageBoxTypes.MessageBoxTypes.INFORMATION:
        return titleInformation;

      case MessageBoxTypes.MessageBoxTypes.SUCCESS:
        return titleSuccess;

      case MessageBoxTypes.MessageBoxTypes.WARNING:
        return titleWarning;

      case MessageBoxTypes.MessageBoxTypes.HIGHLIGHT:
        return titleHighlight;

      default:
        return null;
    }
  };

  var actionsToRender = React.useMemo(function () {
    if (actions && actions.length > 0) {
      return actions;
    }

    if (type === MessageBoxTypes.MessageBoxTypes.CONFIRM) {
      return [MessageBoxActions.MessageBoxActions.OK, MessageBoxActions.MessageBoxActions.CANCEL];
    }

    if (type === MessageBoxTypes.MessageBoxTypes.ERROR) {
      return [MessageBoxActions.MessageBoxActions.CLOSE];
    }

    return [MessageBoxActions.MessageBoxActions.OK];
  }, [actions, type]);
  var handleOnClose = React.useCallback(function (e) {
    var action = e.target.dataset.action;
    stopPropagation(e);
    onClose(Utils.enrichEventWithDetails(e, {
      action: action
    }));
  }, [onClose]);
  var dialogRef = hooks.useConsolidatedRef(ref);
  React.useEffect(function () {
    if (dialogRef.current) {
      if (open) {
        dialogRef.current.open();
      } else {
        dialogRef.current.close();
      }
    }
  }, [open, dialogRef]);
  var passThroughProps = hooks.usePassThroughHtmlProps(props, ['onClose']);
  var messageBoxClassNames = StyleClassHelper.StyleClassHelper.of(classes.messageBox).putIfPresent(className).className;
  return /*#__PURE__*/React__default.createElement(Dialog$2.Dialog, _extends({
    slot: slot,
    ref: dialogRef,
    style: style,
    tooltip: tooltip,
    className: messageBoxClassNames,
    header: /*#__PURE__*/React__default.createElement("header", {
      className: classes.header,
      "data-type": type
    }, iconToRender, /*#__PURE__*/React__default.createElement(Title$1.Title, {
      level: TitleLevel.TitleLevel.H5
    }, titleToRender())),
    footer: /*#__PURE__*/React__default.createElement("footer", {
      className: classes.footer
    }, actionsToRender.map(function (action, index) {
      return /*#__PURE__*/React__default.createElement(Button$2.Button, {
        key: action,
        design: index === 0 ? ButtonDesign.ButtonDesign.Emphasized : ButtonDesign.ButtonDesign.Transparent,
        onClick: handleOnClose,
        "data-action": action
      }, actionTextMap.has(action) ? actionTranslations[actionTextMap.get(action)] : action);
    })),
    onAfterClose: open ? handleOnClose : stopPropagation
  }, passThroughProps), /*#__PURE__*/React__default.createElement(Text$1.Text, {
    className: classes.content
  }, children));
});
MessageBox.displayName = 'MessageBox';
MessageBox.defaultProps = {
  open: false,
  title: null,
  icon: null,
  type: MessageBoxTypes.MessageBoxTypes.CONFIRM,
  actions: []
};

(function (MessageBoxActions) {
  MessageBoxActions["ABORT"] = "Abort";
  MessageBoxActions["CANCEL"] = "Cancel";
  MessageBoxActions["CLOSE"] = "Close";
  MessageBoxActions["DELETE"] = "Delete";
  MessageBoxActions["IGNORE"] = "Ignore";
  MessageBoxActions["NO"] = "No";
  MessageBoxActions["OK"] = "OK";
  MessageBoxActions["RETRY"] = "Retry";
  MessageBoxActions["YES"] = "Yes";
})(exports.MessageBoxActions || (exports.MessageBoxActions = {}));

(function (MessageBoxTypes) {
  MessageBoxTypes["CONFIRM"] = "Confirm";
  MessageBoxTypes["ERROR"] = "Error";
  MessageBoxTypes["INFORMATION"] = "Information";
  MessageBoxTypes["SUCCESS"] = "Success";
  MessageBoxTypes["WARNING"] = "Warning";
  MessageBoxTypes["HIGHLIGHT"] = "Highlight";
})(exports.MessageBoxTypes || (exports.MessageBoxTypes = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/MessageStrip" target="_blank">UI5 Web Components Playground</a>
 */
var MessageStrip = withWebComponent$1.withWebComponent('ui5-messagestrip', ['type'], ['noCloseButton', 'noIcon'], ['icon'], ['close']);
MessageStrip.displayName = 'MessageStrip';
MessageStrip.defaultProps = {
  noCloseButton: false,
  noIcon: false,
  type: MessageStripType.MessageStripType.Information
};

(function (MessageStripType) {
  MessageStripType["Information"] = "Information";
  MessageStripType["Positive"] = "Positive";
  MessageStripType["Negative"] = "Negative";
  MessageStripType["Warning"] = "Warning";
})(exports.MessageStripType || (exports.MessageStripType = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/MultiComboBox" target="_blank">UI5 Web Components Playground</a>
 */
var MultiComboBox = withWebComponent$1.withWebComponent('ui5-multi-combobox', ['placeholder', 'value', 'valueState'], ['allowCustomValues', 'disabled', 'open', 'readonly', 'required'], [], ['change', 'input', 'open-change', 'selection-change']);
MultiComboBox.displayName = 'MultiComboBox';
MultiComboBox.defaultProps = {
  allowCustomValues: false,
  disabled: false,
  open: false,
  readonly: false,
  required: false,
  valueState: ValueState.ValueState.None
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/MultiComboBoxItem" target="_blank">UI5 Web Components Playground</a>
 */
var MultiComboBoxItem = withWebComponent$1.withWebComponent('ui5-mcb-item', ['text'], ['selected'], [], []);
MultiComboBoxItem.displayName = 'MultiComboBoxItem';
MultiComboBoxItem.defaultProps = {
  selected: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/NotificationListGroupItem" target="_blank">UI5 Web Components Playground</a>
 */
var NotificationListGroupItem = withWebComponent$1.withWebComponent('ui5-li-notification-group', ['heading', 'priority'], ['collapsed', 'showCounter', 'busy', 'showClose', 'selected'], ['actions'], ['toggle', 'close']);
NotificationListGroupItem.displayName = 'NotificationListGroupItem';
NotificationListGroupItem.defaultProps = {
  collapsed: false,
  showCounter: false,
  busy: false,
  priority: Priority.Priority.None,
  showClose: false,
  selected: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/NotificationListItem" target="_blank">UI5 Web Components Playground</a>
 */
var NotificationListItem = withWebComponent$1.withWebComponent('ui5-li-notification', ['wrap', 'heading', 'priority'], ['read', 'busy', 'showClose', 'selected'], ['avatar', 'footnotes', 'actions'], ['close']);
NotificationListItem.displayName = 'NotificationListItem';
NotificationListItem.defaultProps = {
  read: false,
  wrap: false,
  busy: false,
  priority: Priority.Priority.None,
  showClose: false,
  selected: false
};

var NotificationOverflowAction = withWebComponent$1.withWebComponent('ui5-notification-overflow-action', ['design', 'icon', 'text'], ['disabled'], [], []);
NotificationOverflowAction.displayName = 'NotificationOverflowAction';
NotificationOverflowAction.defaultProps = {
  design: ButtonDesign.ButtonDesign.Transparent,
  disabled: false
};

var styles$h = {
  base: {
    margin: 'var(--_ui5wcr_ObjectPage_avatar_margin)',
    // defined in ObjectPage JSS
    opacity: 0
  },
  hidden: {
    opacity: 0
  },
  visible: {
    transition: 'opacity 0.5s',
    opacity: 1
  },
  imageContainer: {
    display: 'inline-block',
    verticalAlign: 'middle',
    maxHeight: '3rem',
    width: '3rem',
    maxWidth: '3rem'
  },
  image: {
    width: '100%',
    height: '100%'
  }
};
var useStyles$i = createComponentStyles.createComponentStyles(styles$h, {
  name: 'CollapsedAvatar'
});
var CollapsedAvatar = function CollapsedAvatar(props) {
  var image = props.image,
      imageShapeCircle = props.imageShapeCircle;
  var classes = useStyles$i();

  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isMounted = _useState2[0],
      setIsMounted = _useState2[1];

  var domRef = React.useRef();
  var avatarContent = React.useMemo(function () {
    if (!image) return null;

    if (typeof image === 'string') {
      return /*#__PURE__*/React__default.createElement("span", {
        className: classes.imageContainer,
        style: {
          borderRadius: imageShapeCircle ? '50%' : 0,
          overflow: 'hidden'
        }
      }, /*#__PURE__*/React__default.createElement("img", {
        className: classes.image,
        src: image,
        alt: "Object Page Image"
      }));
    } else {
      var _image$props, _image$props2;

      return /*#__PURE__*/React__default.cloneElement(image, {
        size: AvatarSize.AvatarSize.S,
        // @ts-ignore
        className: ((_image$props = image.props) === null || _image$props === void 0 ? void 0 : _image$props.className) ? "".concat(classes.imageContainer, " ").concat((_image$props2 = image.props) === null || _image$props2 === void 0 ? void 0 : _image$props2.className) : classes.imageContainer
      });
    }
  }, [image, imageShapeCircle]);
  React.useEffect(function () {
    setIsMounted(true);
  }, []);
  var containerClasses = StyleClassHelper.StyleClassHelper.of(classes.base);

  if (isMounted) {
    containerClasses.put(classes.visible);
  } else {
    containerClasses.put(classes.hidden);
  }

  return /*#__PURE__*/React__default.createElement("div", {
    ref: domRef,
    className: containerClasses.valueOf()
  }, avatarContent);
};

var _objectPage, _globalHtml, _globalDirRtl;
var ObjectPageCssVariables = {
  anchorFloat: '--_ui5wcr_ObjectPage_actions_float',
  anchorLeft: '--_ui5wcr_ObjectPage_actions_left',
  anchorRight: '--_ui5wcr_ObjectPage_actions_right',
  avatarMargin: '--_ui5wcr_ObjectPage_avatar_margin',
  lastSectionMargin: '--_ui5wcr_ObjectPage_last_section_margin_bottom'
};
var styles$i = {
  objectPage: (_objectPage = {
    width: '100%',
    height: '100%',
    maxHeight: '100vh',
    position: 'relative',
    whiteSpace: 'normal',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    backgroundColor: ThemingParameters.ThemingParameters.sapBackgroundColor,
    overflowX: 'hidden',
    overflowY: 'auto'
  }, _defineProperty(_objectPage, ObjectPageCssVariables.lastSectionMargin, 0), _defineProperty(_objectPage, '& section[id*="ObjectPageSection-"] > div[role="heading"]', {
    display: 'none'
  }), _defineProperty(_objectPage, '& section[id*="ObjectPageSection-"] ~ section[id*="ObjectPageSection-"] > div[role="heading"]', {
    display: 'block'
  }), _defineProperty(_objectPage, '& section[data-component-name="ObjectPageSection"]:last-child', {
    marginBottom: "var(".concat(ObjectPageCssVariables.lastSectionMargin, ")")
  }), _objectPage),
  '@global html': (_globalHtml = {}, _defineProperty(_globalHtml, ObjectPageCssVariables.anchorFloat, 'right'), _defineProperty(_globalHtml, ObjectPageCssVariables.anchorRight, '1.25rem'), _defineProperty(_globalHtml, ObjectPageCssVariables.anchorLeft, 'unset'), _defineProperty(_globalHtml, ObjectPageCssVariables.avatarMargin, '0 1rem 0 0'), _globalHtml),
  '@global [dir="rtl"]': (_globalDirRtl = {}, _defineProperty(_globalDirRtl, ObjectPageCssVariables.anchorFloat, 'left'), _defineProperty(_globalDirRtl, ObjectPageCssVariables.anchorRight, 'unset'), _defineProperty(_globalDirRtl, ObjectPageCssVariables.anchorLeft, '1.25rem'), _defineProperty(_globalDirRtl, ObjectPageCssVariables.avatarMargin, '0 0 0 1rem'), _globalDirRtl),
  iconTabBarMode: {
    '& section[data-component-name="ObjectPageSection"] > div[role="heading"]': {
      display: 'none'
    }
  },
  noHeader: {
    '& $header': {
      display: 'none'
    },
    '& $contentHeader': {
      display: 'none'
    }
  },
  headerCollapsed: {
    '& $contentHeader': {
      display: 'none'
    }
  },
  // header
  header: {
    flexShrink: 0,
    backgroundColor: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    position: 'sticky',
    top: 0,
    zIndex: 2
  },
  contentHeader: {
    backgroundColor: ThemingParameters.ThemingParameters.sapObjectHeader_Background,
    position: 'sticky',
    paddingBottom: '0.25rem',
    maxHeight: '500px',
    overflow: 'hidden',
    paddingLeft: '2rem'
  },
  anchorBar: {
    position: 'sticky',
    zIndex: 2,
    '--_ui5_tc_header_box_shadow': 'inset 0px -1px 0 0px rgba(0,0,0,0.15)'
  },
  titleBar: {
    padding: '0.5rem 2rem',
    display: 'block',
    position: 'relative'
  },
  container: {
    flex: '1 1 70%',
    boxSizing: 'border-box'
  },
  title: {
    padding: '0.3125rem 0 0 0'
  },
  subTitle: {
    verticalAlign: 'baseline',
    padding: '0 0 0.5rem 0.5rem'
  },
  actions: {
    position: 'absolute',
    top: '0',
    paddingTop: '0.75rem',
    zIndex: 1,
    right: "var(".concat(ObjectPageCssVariables.anchorRight, ")"),
    left: "var(".concat(ObjectPageCssVariables.anchorLeft, ")"),
    display: 'inline-block',
    "float": "var(".concat(ObjectPageCssVariables.anchorFloat, ")"),
    verticalAlign: 'top',
    '& > *': {
      marginLeft: '0.5rem',
      padding: 0
    }
  },
  titleInHeaderContent: {
    '& $subTitle': {
      padding: '0.5rem 0'
    },
    '& $keyInfos': {
      alignSelf: 'unset'
    },
    '& contentHeader': {
      paddingTop: 0,
      '& > *': {
        display: 'flex',
        verticalAlign: 'top',
        '&:not(:first-child)': {
          marginRight: '2rem',
          marginBottom: '1rem'
        }
      }
    }
  },
  headerCustomContent: {
    display: 'inline-block',
    verticalAlign: 'top',
    '& > *': {
      "float": 'left',
      marginRight: '2rem',
      marginBottom: '1rem',
      lineHeight: '1.5rem'
    },
    '&:after': {
      clear: 'both'
    }
  },
  headerCustomContentItem: {
    marginLeft: '1rem'
  },
  headerImage: {
    minWidth: '5rem',
    maxWidth: '5rem',
    maxHeight: '5rem',
    display: 'inline-block',
    marginRight: '2rem',
    marginBottom: '1rem'
  },
  image: {
    width: '100%',
    height: '100%'
  },
  keyInfos: {
    '& > *': {
      marginLeft: '1rem'
    },
    display: 'flex',
    flexDirection: 'row',
    alignSelf: 'center'
  },
  avatar: {
    margin: "var(".concat(ObjectPageCssVariables.avatarMargin, ")")
  }
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/StandardListItem" target="_blank">UI5 Web Components Playground</a>
 */
var StandardListItem = withWebComponent$1.withWebComponent('ui5-li', ['description', 'icon', 'image', 'info', 'infoState', 'type'], ['iconEnd', 'selected'], [], ['detail-click']);
StandardListItem.displayName = 'StandardListItem';
StandardListItem.defaultProps = {
  iconEnd: false,
  infoState: ValueState.ValueState.None,
  type: ListItemTypes.ListItemTypes.Active,
  selected: false
};

var ObjectPageAnchorButton = function ObjectPageAnchorButton(props) {
  var ref = React.useRef();
  var section = props.section,
      index = props.index,
      selected = props.selected,
      onShowSubSectionPopover = props.onShowSubSectionPopover;
  var subSectionsAvailable = false;

  if (section.props.children && section.props.children.filter) {
    var subSections = section.props.children.filter(function (item) {
      return item.props && item.props.isSubSection;
    });
    subSectionsAvailable = subSections.length > 0;
  }

  React.useEffect(function () {
    if (subSectionsAvailable) {
      try {
        var _ref$current, _ref$current$parentEl, _ref$current$parentEl2;

        var element = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : (_ref$current$parentEl = _ref$current.parentElement) === null || _ref$current$parentEl === void 0 ? void 0 : (_ref$current$parentEl2 = _ref$current$parentEl.shadowRoot) === null || _ref$current$parentEl2 === void 0 ? void 0 : _ref$current$parentEl2.querySelector(".ui5-tc__headerList li[aria-posinset=\"".concat(index + 1, "\"] .ui5-tab-strip-itemContent"));

        if (element && !element.querySelector('ui5-icon')) {
          var icon = document.createElement('ui5-icon');
          icon.name = 'slim-arrow-down';
          icon.style.verticalAlign = 'text-bottom';
          icon.style.pointerEvents = 'all';
          icon.addEventListener('click', function (e) {
            e.stopImmediatePropagation();
            e.preventDefault();
            e.stopPropagation();
            onShowSubSectionPopover(e, section);
          });
          element.appendChild(icon);
        }
      } catch (e) {// empty catch block, mainly required for tests
      }
    }
  }, [subSectionsAvailable, ref, onShowSubSectionPopover, section]);
  return /*#__PURE__*/React__default.createElement(Tab$1.Tab, {
    ref: ref,
    "data-index": index,
    "data-section-id": section.props.id,
    text: section.props.title,
    selected: selected
  });
};

var safeGetChildrenArray = function safeGetChildrenArray(children) {
  return React.Children.toArray(children).filter(Boolean);
};
var getSectionById = function getSectionById(sections, id) {
  return safeGetChildrenArray(sections).find(function (objectPageSection) {
    var _objectPageSection$pr;

    return ((_objectPageSection$pr = objectPageSection.props) === null || _objectPageSection$pr === void 0 ? void 0 : _objectPageSection$pr.id) === id;
  });
};
var extractSectionIdFromHtmlId = function extractSectionIdFromHtmlId(id) {
  return id.replace(/^ObjectPageSection-/, '');
};
var getLastObjectPageSection = function getLastObjectPageSection(ref) {
  var sections = ref.current.querySelectorAll('[id^="ObjectPageSection"]');

  if (!sections || sections.length < 1) {
    return null;
  }

  return sections[sections.length - 1];
};

Theming.addCustomCSS('ui5-button', "\n:host([data-ui5wcr-object-page-header-action]) .ui5-button-root {\n padding: 0;\n}");
Theming.addCustomCSS('ui5-togglebutton', "\n:host([data-ui5wcr-object-page-header-action]) .ui5-button-root {\n padding: 0;\n}");
var anchorBarStyles = {
  anchorBarActionButton: {
    position: 'absolute',
    '--_ui5_button_compact_height': '1.375rem',
    '--_ui5_button_base_height': '1.375rem',
    '--_ui5_button_base_min_width': '1.375rem',
    '--_ui5_button_base_min_compact_width': '1.375rem',
    top: "-0.6875rem",
    marginLeft: "-0.6875rem",
    left: '50%',
    '&:before, &:after': {
      content: '""',
      position: 'absolute',
      width: '4rem',
      top: '50%',
      height: '0.0625rem'
    },
    '&:before': {
      right: '100%',
      backgroundImage: "linear-gradient(to left, ".concat(ThemingParameters.ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))")
    },
    '&:after': {
      backgroundImage: "linear-gradient(to right, ".concat(ThemingParameters.ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))"),
      left: '100%'
    }
  },
  anchorBarActionButtonExpandable: {},
  anchorBarActionButtonPinnable: {},
  anchorBarActionPinnableAndExandable: {
    '&$anchorBarActionButtonPinnable': {
      marginLeft: '0.25rem',
      '&:before': {
        backgroundImage: 'none'
      }
    },
    '&$anchorBarActionButtonExpandable': {
      marginLeft: '-1.75rem'
    }
  }
};
var useStyles$j = reactJss.createUseStyles(anchorBarStyles, {
  name: 'ObjectPageAnchorBar'
});
var ObjectPageAnchorBar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _popoverContent$props;

  var sections = props.sections,
      selectedSectionId = props.selectedSectionId,
      handleOnSectionSelected = props.handleOnSectionSelected,
      handleOnSubSectionSelected = props.handleOnSubSectionSelected,
      showHideHeaderButton = props.showHideHeaderButton,
      headerContentPinnable = props.headerContentPinnable,
      onToggleHeaderContentVisibility = props.onToggleHeaderContentVisibility,
      headerPinned = props.headerPinned,
      setHeaderPinned = props.setHeaderPinned,
      headerContentHeight = props.headerContentHeight,
      style = props.style,
      className = props.className;
  var classes = useStyles$j();
  var shouldRenderHideHeaderButton = showHideHeaderButton;
  var shouldRenderHeaderPinnableButton = headerContentPinnable && headerContentHeight > 0;
  var showBothActions = shouldRenderHeaderPinnableButton && shouldRenderHideHeaderButton;

  var _useState = React.useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      popoverContent = _useState2[0],
      setPopoverContent = _useState2[1];

  var popoverRef = React.useRef(null);
  var onPinHeader = React.useCallback(function (e) {
    setHeaderPinned(e.target.pressed);
  }, [setHeaderPinned]);
  var onTabItemSelect = React.useCallback(function (event) {
    var _event$detail$tab$dat = event.detail.tab.dataset,
        sectionId = _event$detail$tab$dat.sectionId,
        index = _event$detail$tab$dat.index; // eslint-disable-next-line eqeqeq

    var section = safeGetChildrenArray(sections).find(function (el) {
      return el.props.id == sectionId;
    });
    handleOnSectionSelected(Utils.enrichEventWithDetails({}, _objectSpread(_objectSpread({}, section), {}, {
      index: index
    })));
  }, [sections]);
  var onShowSubSectionPopover = React.useCallback(function (e, section) {
    setPopoverContent(section);
    popoverRef.current.openBy(e.target.parentElement);
  }, [setPopoverContent, popoverRef]);
  var onSubSectionClick = React.useCallback(function (e) {
    var selectedId = e.detail.item.dataset.key;
    var subSection = popoverContent.props.children.filter(function (item) {
      return item.props && item.props.isSubSection;
    }).find(function (item) {
      return item.props.id === selectedId;
    });

    if (subSection) {
      handleOnSubSectionSelected(Utils.enrichEventWithDetails(e, {
        section: popoverContent,
        subSection: subSection
      }));
    }

    popoverRef.current.close();
  }, [handleOnSubSectionSelected, popoverRef, popoverContent]);
  return /*#__PURE__*/React__default.createElement("section", {
    className: className,
    role: "navigation",
    style: style,
    ref: ref
  }, /*#__PURE__*/React__default.createElement(TabContainer$1.TabContainer, {
    collapsed: true,
    fixed: true,
    onTabSelect: onTabItemSelect,
    showOverflow: true
  }, safeGetChildrenArray(sections).map(function (section, index) {
    var _section$props, _section$props2;

    return /*#__PURE__*/React__default.createElement(ObjectPageAnchorButton, {
      key: "Anchor-".concat((_section$props = section.props) === null || _section$props === void 0 ? void 0 : _section$props.id),
      section: section,
      index: index,
      selected: selectedSectionId === ((_section$props2 = section.props) === null || _section$props2 === void 0 ? void 0 : _section$props2.id),
      onShowSubSectionPopover: onShowSubSectionPopover
    });
  })), shouldRenderHideHeaderButton && /*#__PURE__*/React__default.createElement(Button$2.Button, {
    icon: headerContentHeight === 0 ? 'slim-arrow-down' : 'slim-arrow-up',
    onClick: onToggleHeaderContentVisibility,
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonExpandable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExandable : ''),
    "data-ui5wcr-object-page-header-action": ""
  }), shouldRenderHeaderPinnableButton && /*#__PURE__*/React__default.createElement(ToggleButton$1.ToggleButton, {
    icon: "pushpin-off",
    pressed: headerPinned,
    onClick: onPinHeader,
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonPinnable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExandable : ''),
    "data-ui5wcr-object-page-header-action": ""
  }), /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default.createElement(Popover$1.Popover, {
    placementType: PlacementType.PlacementType.Bottom,
    noArrow: true,
    ref: popoverRef,
    onAfterClose: stopPropagation
  }, /*#__PURE__*/React__default.createElement(List$1.List, {
    onItemClick: onSubSectionClick
  }, popoverContent === null || popoverContent === void 0 ? void 0 : (_popoverContent$props = popoverContent.props) === null || _popoverContent$props === void 0 ? void 0 : _popoverContent$props.children.filter(function (item) {
    return item.props && item.props.isSubSection;
  }).map(function (item) {
    return /*#__PURE__*/React__default.createElement(StandardListItem, {
      key: item.props.id,
      "data-key": item.props.id
    }, item.props.title);
  }))), document.body));
});
ObjectPageAnchorBar.displayName = 'ObjectPageAnchorBar';

var ObjectPageHeader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var image = props.image,
      classes = props.classes,
      imageShapeCircle = props.imageShapeCircle,
      showTitleInHeaderContent = props.showTitleInHeaderContent,
      headerContentProp = props.headerContentProp,
      breadcrumbs = props.breadcrumbs,
      title = props.title,
      subTitle = props.subTitle,
      keyInfos = props.keyInfos,
      headerPinned = props.headerPinned,
      topHeaderHeight = props.topHeaderHeight,
      headerActions = props.headerActions;
  var avatar = React.useMemo(function () {
    if (!image) {
      return null;
    }

    if (typeof image === 'string') {
      return /*#__PURE__*/React__default.createElement("span", {
        className: classes.headerImage,
        style: {
          borderRadius: imageShapeCircle ? '50%' : 0,
          overflow: 'hidden'
        }
      }, /*#__PURE__*/React__default.createElement("img", {
        src: image,
        className: classes.image,
        alt: "Company Logo"
      }));
    } else {
      var _image$props, _image$props2;

      return /*#__PURE__*/React__default.cloneElement(image, {
        size: AvatarSize.AvatarSize.L,
        className: ((_image$props = image.props) === null || _image$props === void 0 ? void 0 : _image$props.className) ? "".concat(classes.headerImage, " ").concat((_image$props2 = image.props) === null || _image$props2 === void 0 ? void 0 : _image$props2.className) : classes.headerImage
      });
    }
  }, [image, classes.headerImage, classes.image, imageShapeCircle]);
  var headerStyles = React.useMemo(function () {
    if (headerPinned) {
      return {
        top: "".concat(topHeaderHeight, "px"),
        zIndex: 1
      };
    }

    return null;
  }, [headerPinned, topHeaderHeight]);
  var renderedHeaderContent = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, avatar, headerContentProp && /*#__PURE__*/React__default.createElement("span", {
    className: classes.headerCustomContent
  }, headerContentProp));

  if (showTitleInHeaderContent) {
    var firstElement;
    var contents = [];

    if ((headerContentProp === null || headerContentProp === void 0 ? void 0 : headerContentProp.type) === React__default.Fragment) {
      var _safeGetChildrenArray = safeGetChildrenArray(headerContentProp.props.children);

      var _safeGetChildrenArray2 = _toArray(_safeGetChildrenArray);

      firstElement = _safeGetChildrenArray2[0];
      contents = _safeGetChildrenArray2.slice(1);
    } else {
      firstElement = headerContentProp;
    }

    renderedHeaderContent = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, null, avatar, /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
      direction: FlexBoxDirection.FlexBoxDirection.Column
    }, /*#__PURE__*/React__default.createElement("div", null, breadcrumbs), /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, null, /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
      direction: FlexBoxDirection.FlexBoxDirection.Column
    }, /*#__PURE__*/React__default.createElement(Title$1.Title, {
      level: TitleLevel.TitleLevel.H3,
      className: classes.title
    }, title), /*#__PURE__*/React__default.createElement(Label$1.Label, {
      className: classes.subTitle
    }, subTitle), /*#__PURE__*/React__default.createElement("span", null, " ", firstElement)), /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, null, contents.map(function (c, index) {
      return /*#__PURE__*/React__default.createElement("div", {
        key: "customContent-".concat(index),
        className: classes.headerCustomContentItem
      }, c);
    })), /*#__PURE__*/React__default.createElement("div", {
      className: classes.keyInfos
    }, keyInfos))), /*#__PURE__*/React__default.createElement(Toolbar$1.Toolbar, {
      toolbarStyle: ToolbarStyle.ToolbarStyle.Clear,
      design: ToolbarDesign.ToolbarDesign.Transparent
    }, /*#__PURE__*/React__default.createElement(ToolbarSpacer$1.ToolbarSpacer, null), headerActions)));
  }

  return /*#__PURE__*/React__default.createElement("div", {
    style: headerStyles,
    className: classes.contentHeader,
    ref: ref
  }, renderedHeaderContent);
});
ObjectPageHeader.displayName = 'ObjectPageHeader';

var useObserveHeights = function useObserveHeights(objectPage, topHeader, headerContentRef, anchorBarRef, _ref) {
  var _anchorBarRef$current, _anchorBarRef$current2;

  var noHeader = _ref.noHeader;

  var _useState = React.useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      topHeaderHeight = _useState2[0],
      setTopHeaderHeight = _useState2[1];

  var _useState3 = React.useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      headerContentHeight = _useState4[0],
      setHeaderContentHeight = _useState4[1];

  var _useState5 = React.useState(true),
      _useState6 = _slicedToArray(_useState5, 2),
      isIntersecting = _useState6[0],
      setIsIntersecting = _useState6[1];

  React.useEffect(function () {
    var headerIntersectionObserver = new IntersectionObserver(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 1),
          header = _ref3[0];

      if (header.isIntersecting) {
        setIsIntersecting(true);
        setHeaderContentHeight(header.target.offsetHeight);
      } else {
        setIsIntersecting(false);
        setHeaderContentHeight(0);
      }
    }, {
      rootMargin: "-".concat(topHeaderHeight, "px 0px 0px 0px"),
      root: objectPage.current,
      threshold: 0.3
    });

    if (headerContentRef.current) {
      headerIntersectionObserver.observe(headerContentRef.current);
    }

    return function () {
      headerIntersectionObserver.disconnect();
    };
  }, [topHeaderHeight, setHeaderContentHeight, headerContentRef, setIsIntersecting]); // top header

  React.useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref4) {
      var _header$contentRect$h, _header$contentRect;

      var _ref5 = _slicedToArray(_ref4, 1),
          header = _ref5[0];

      setTopHeaderHeight((_header$contentRect$h = header === null || header === void 0 ? void 0 : (_header$contentRect = header.contentRect) === null || _header$contentRect === void 0 ? void 0 : _header$contentRect.height) !== null && _header$contentRect$h !== void 0 ? _header$contentRect$h : 0);
    });

    if (topHeader.current) {
      headerContentResizeObserver.observe(topHeader.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [topHeader.current, setTopHeaderHeight]); // header content

  React.useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 1),
          headerContent = _ref7[0];

      if (isIntersecting) {
        var _headerContent$conten, _headerContent$conten2;

        setHeaderContentHeight((_headerContent$conten = headerContent === null || headerContent === void 0 ? void 0 : (_headerContent$conten2 = headerContent.contentRect) === null || _headerContent$conten2 === void 0 ? void 0 : _headerContent$conten2.height) !== null && _headerContent$conten !== void 0 ? _headerContent$conten : 0);
      }
    });

    if (headerContentRef.current) {
      headerContentResizeObserver.observe(headerContentRef.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [headerContentRef.current, setHeaderContentHeight, isIntersecting]);
  var anchorBarHeight = (_anchorBarRef$current = (_anchorBarRef$current2 = anchorBarRef.current) === null || _anchorBarRef$current2 === void 0 ? void 0 : _anchorBarRef$current2.offsetHeight) !== null && _anchorBarRef$current !== void 0 ? _anchorBarRef$current : 33;
  var totalHeaderHeight = (noHeader ? 0 : topHeaderHeight + headerContentHeight) + anchorBarHeight;
  return {
    topHeaderHeight: topHeaderHeight,
    headerContentHeight: headerContentHeight,
    anchorBarHeight: anchorBarHeight,
    totalHeaderHeight: totalHeaderHeight
  };
};

var SCROLL_BAR_WIDTH = 12;
var useStyles$k = createComponentStyles.createComponentStyles(styles$i, {
  name: 'ObjectPage'
});
var ObjectPage = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _safeGetChildrenArray, _safeGetChildrenArray2;

  var _props$title = props.title,
      title = _props$title === void 0 ? '' : _props$title,
      _props$image = props.image,
      image = _props$image === void 0 ? null : _props$image,
      _props$subTitle = props.subTitle,
      subTitle = _props$subTitle === void 0 ? '' : _props$subTitle,
      _props$headerActions = props.headerActions,
      headerActions = _props$headerActions === void 0 ? [] : _props$headerActions,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? ObjectPageMode.ObjectPageMode.Default : _props$mode,
      _props$imageShapeCirc = props.imageShapeCircle,
      imageShapeCircle = _props$imageShapeCirc === void 0 ? false : _props$imageShapeCirc,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot,
      _props$showHideHeader = props.showHideHeaderButton,
      showHideHeaderButton = _props$showHideHeader === void 0 ? false : _props$showHideHeader,
      children = props.children,
      _props$onSelectedSect = props.onSelectedSectionChanged,
      onSelectedSectionChanged = _props$onSelectedSect === void 0 ? function () {
    /* noop */
  } : _props$onSelectedSect,
      selectedSectionId = props.selectedSectionId,
      _props$noHeader = props.noHeader,
      noHeader = _props$noHeader === void 0 ? false : _props$noHeader,
      alwaysShowContentHeader = props.alwaysShowContentHeader,
      showTitleInHeaderContent = props.showTitleInHeaderContent,
      headerContentPinnable = props.headerContentPinnable,
      headerContent = props.headerContent,
      breadcrumbs = props.breadcrumbs,
      keyInfos = props.keyInfos;
  var firstSectionId = (_safeGetChildrenArray = safeGetChildrenArray(children)[0]) === null || _safeGetChildrenArray === void 0 ? void 0 : (_safeGetChildrenArray2 = _safeGetChildrenArray.props) === null || _safeGetChildrenArray2 === void 0 ? void 0 : _safeGetChildrenArray2.id;

  var _useState = React.useState(selectedSectionId !== null && selectedSectionId !== void 0 ? selectedSectionId : firstSectionId),
      _useState2 = _slicedToArray(_useState, 2),
      internalSelectedSectionId = _useState2[0],
      setInternalSelectedSectionId = _useState2[1];

  var _useState3 = React.useState(props.selectedSubSectionId),
      _useState4 = _slicedToArray(_useState3, 2),
      selectedSubSectionId = _useState4[0],
      setSelectedSubSectionId = _useState4[1];

  var _useState5 = React.useState(alwaysShowContentHeader),
      _useState6 = _slicedToArray(_useState5, 2),
      headerPinned = _useState6[0],
      setHeaderPinned = _useState6[1];

  var isProgrammaticallyScrolled = React.useRef(false);
  var objectPageRef = useConsolidatedRef.useConsolidatedRef(ref);
  var topHeaderRef = React.useRef();
  var headerContentRef = React.useRef();
  var anchorBarRef = React.useRef();

  var _useState7 = React.useState(SCROLL_BAR_WIDTH),
      _useState8 = _slicedToArray(_useState7, 2),
      scrollbarWidth = _useState8[0],
      setScrollbarWidth = _useState8[1];

  var isMounted = React.useRef(false); // observe heights of header parts

  var _useObserveHeights = useObserveHeights(objectPageRef, topHeaderRef, headerContentRef, anchorBarRef, {
    noHeader: noHeader
  }),
      topHeaderHeight = _useObserveHeights.topHeaderHeight,
      headerContentHeight = _useObserveHeights.headerContentHeight,
      anchorBarHeight = _useObserveHeights.anchorBarHeight,
      totalHeaderHeight = _useObserveHeights.totalHeaderHeight; // *****
  // SECTION SELECTION
  // ****


  var scrollToSection = React.useCallback(function (sectionId) {
    if (!sectionId) {
      return;
    }

    if (firstSectionId === sectionId) {
      objectPageRef.current.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    } else {
      var _objectPageRef$curren;

      var childOffset = (_objectPageRef$curren = objectPageRef.current.querySelector("#ObjectPageSection-".concat(sectionId))) === null || _objectPageRef$curren === void 0 ? void 0 : _objectPageRef$curren.offsetTop;

      if (!isNaN(childOffset)) {
        objectPageRef.current.scrollTo({
          top: childOffset - topHeaderHeight - anchorBarHeight - (headerPinned ? headerContentHeight : 0) + 45,
          behavior: 'smooth'
        });
      }
    }

    isProgrammaticallyScrolled.current = false;
  }, [firstSectionId, objectPageRef, topHeaderHeight, anchorBarHeight, headerPinned, headerContentHeight]); // change selected section when prop is changed (external change)

  React.useEffect(function () {
    isProgrammaticallyScrolled.current = true;
    setInternalSelectedSectionId(selectedSectionId !== null && selectedSectionId !== void 0 ? selectedSectionId : firstSectionId);
  }, [selectedSectionId, isProgrammaticallyScrolled, firstSectionId]); // section was selected by clicking on the anchor bar buttons

  var handleOnSectionSelected = React.useCallback(function (e) {
    var _e$detail$props;

    isProgrammaticallyScrolled.current = true;
    var newSelectionSection = (_e$detail$props = e.detail.props) === null || _e$detail$props === void 0 ? void 0 : _e$detail$props.id;
    setInternalSelectedSectionId(function (oldSelectedSection) {
      if (oldSelectedSection === newSelectionSection) {
        scrollToSection(newSelectionSection);
      }

      return newSelectionSection;
    });
    fireOnSelectedChangedEvent(e);
  }, [onSelectedSectionChanged, setInternalSelectedSectionId, isProgrammaticallyScrolled, scrollToSection]); // do internal scrolling

  React.useEffect(function () {
    if (!isMounted.current) return;

    if (mode === ObjectPageMode.ObjectPageMode.Default && isProgrammaticallyScrolled.current === true) {
      scrollToSection(internalSelectedSectionId);
    }
  }, [internalSelectedSectionId, isMounted, mode, isProgrammaticallyScrolled, scrollToSection]); // Scrolling for Sub Section Selection

  React.useEffect(function () {
    if (selectedSubSectionId && isProgrammaticallyScrolled.current === true) {
      var _objectPageRef$curren2;

      var childOffset = (_objectPageRef$curren2 = objectPageRef.current.querySelector("div[id=\"ObjectPageSubSection-".concat(selectedSubSectionId, "\"]"))) === null || _objectPageRef$curren2 === void 0 ? void 0 : _objectPageRef$curren2.offsetTop;

      if (!isNaN(childOffset)) {
        objectPageRef.current.scrollTo({
          top: childOffset - topHeaderHeight - anchorBarHeight - (headerPinned ? headerContentHeight : 0) + 45,
          behavior: 'smooth'
        });
      }

      isProgrammaticallyScrolled.current = false;
    }
  }, [selectedSubSectionId, isProgrammaticallyScrolled, topHeaderHeight, anchorBarHeight, headerPinned, headerContentHeight]);
  React.useEffect(function () {
    setHeaderPinned(alwaysShowContentHeader);
  }, [setHeaderPinned, alwaysShowContentHeader]);
  var classes = useStyles$k();
  React.useEffect(function () {
    setSelectedSubSectionId(props.selectedSubSectionId);

    if (props.selectedSubSectionId) {
      isProgrammaticallyScrolled.current = true;

      if (mode === ObjectPageMode.ObjectPageMode.IconTabBar) {
        var sectionId;
        safeGetChildrenArray(children).forEach(function (section) {
          if ( /*#__PURE__*/React__default.isValidElement(section) && section.props && section.props.children) {
            safeGetChildrenArray(section.props.children).forEach(function (subSection) {
              if ( /*#__PURE__*/React__default.isValidElement(subSection) && subSection.props && subSection.props.id === props.selectedSubSectionId) {
                var _section$props;

                sectionId = (_section$props = section.props) === null || _section$props === void 0 ? void 0 : _section$props.id;
              }
            });
          }
        });

        if (sectionId) {
          setInternalSelectedSectionId(sectionId);
        }
      }
    }
  }, [props.selectedSubSectionId, setInternalSelectedSectionId, setSelectedSubSectionId, children, mode, isProgrammaticallyScrolled]);
  React.useEffect(function () {
    var fillerDivObserver = new ResizeObserver(function () {
      var maxHeight = Math.min(objectPageRef.current.clientHeight, window.innerHeight);
      var availableScrollHeight = maxHeight - totalHeaderHeight;
      var lastSectionDomRef = getLastObjectPageSection(objectPageRef);
      var subSections = lastSectionDomRef.querySelectorAll('[id^="ObjectPageSubSection"]');
      var lastSubSectionHeight;

      if (subSections.length > 0) {
        lastSubSectionHeight = subSections[subSections.length - 1].offsetHeight;
      } else {
        lastSubSectionHeight = lastSectionDomRef.offsetHeight - lastSectionDomRef.querySelector("[role='heading']").offsetHeight;
      }

      var heightDiff = availableScrollHeight - lastSubSectionHeight;
      heightDiff = heightDiff > 0 ? heightDiff : 0;
      objectPageRef.current.style.setProperty(ObjectPageCssVariables.lastSectionMargin, "".concat(heightDiff, "px"));
    });
    fillerDivObserver.observe(objectPageRef.current);
    return function () {
      fillerDivObserver.disconnect();
    };
  }, [totalHeaderHeight, objectPageRef, children]);
  var fireOnSelectedChangedEvent = debounce(function (e) {
    onSelectedSectionChanged(Utils.enrichEventWithDetails(e, {
      selectedSectionIndex: e.detail.index,
      selectedSectionId: e.detail.props.id,
      section: e.detail
    }));
  }, 500);
  var handleOnSubSectionSelected = React.useCallback(function (e) {
    isProgrammaticallyScrolled.current = true;

    if (mode === ObjectPageMode.ObjectPageMode.IconTabBar) {
      var _e$detail$section$pro;

      var sectionId = (_e$detail$section$pro = e.detail.section.props) === null || _e$detail$section$pro === void 0 ? void 0 : _e$detail$section$pro.id;
      setInternalSelectedSectionId(sectionId);
    }

    var subSection = e.detail.subSection;
    setSelectedSubSectionId(subSection.props.id);
  }, [mode, setInternalSelectedSectionId, setSelectedSubSectionId, isProgrammaticallyScrolled]);
  var onToggleHeaderContentVisibility = React.useCallback(function (e) {
    var srcElement = e.target;
    var shouldHideHeader = srcElement.icon === 'slim-arrow-up';

    if (shouldHideHeader) {
      objectPageRef.current.classList.add(classes.headerCollapsed);
    } else {
      objectPageRef.current.classList.remove(classes.headerCollapsed);
    }

    requestAnimationFrame(function () {
      if (objectPageRef.current.scrollTop > 0 && !shouldHideHeader) {
        var prevHeaderTop = headerContentRef.current.style.top;
        headerContentRef.current.style.top = "".concat(topHeaderHeight, "px");
        var prevAnchorTop = anchorBarRef.current.style.top;
        anchorBarRef.current.style.top = "".concat(headerContentRef.current.offsetHeight + topHeaderHeight, "px");
        objectPageRef.current.addEventListener('scroll', function (e) {
          if (prevHeaderTop !== null && prevHeaderTop !== void 0 ? prevHeaderTop : true) {
            headerContentRef.current.style.top = prevHeaderTop;
          } else {
            headerContentRef.current.style.removeProperty('top');
          }

          if (prevAnchorTop !== null && prevAnchorTop !== void 0 ? prevAnchorTop : true) {
            anchorBarRef.current.style.top = prevAnchorTop;
          } else {
            anchorBarRef.current.style.removeProperty('top');
          }
        }, {
          once: true
        });
      }
    });
  }, [objectPageRef, classes.headerCollapsed, headerContentHeight, topHeaderHeight]);
  React.useEffect(function () {
    requestAnimationFrame(function () {
      var calculatedScrollBarWidth = Utils.getScrollBarWidth();

      if (calculatedScrollBarWidth && calculatedScrollBarWidth !== 0 && calculatedScrollBarWidth !== SCROLL_BAR_WIDTH) {
        setScrollbarWidth(calculatedScrollBarWidth);
      }
    });
    isMounted.current = true;
  }, [isMounted, setScrollbarWidth]);
  var objectPageClasses = StyleClassHelper.StyleClassHelper.of(classes.objectPage, GlobalStyleClasses.GlobalStyleClasses.sapScrollBar);

  if (className) {
    objectPageClasses.put(className);
  }

  if (showTitleInHeaderContent) {
    objectPageClasses.put(classes.titleInHeaderContent);
  }

  if (mode === ObjectPageMode.ObjectPageMode.IconTabBar) {
    objectPageClasses.put(classes.iconTabBarMode);
  }

  if (noHeader) {
    objectPageClasses.put(classes.noHeader);
  }

  var scrollBarWidthPadding = React.useMemo(function () {
    return {
      paddingRight: "".concat(scrollbarWidth, "px")
    };
  }, [scrollbarWidth]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onSelectedSectionChanged']);
  React.useEffect(function () {
    var _objectPageRef$curren3, _objectPageRef$curren4;

    var objectPageHeight = (_objectPageRef$curren3 = (_objectPageRef$curren4 = objectPageRef.current) === null || _objectPageRef$curren4 === void 0 ? void 0 : _objectPageRef$curren4.clientHeight) !== null && _objectPageRef$curren3 !== void 0 ? _objectPageRef$curren3 : 1000;
    var marginBottom = objectPageHeight - totalHeaderHeight;
    var rootMargin = "-".concat(totalHeaderHeight, "px 0px -").concat(marginBottom < 0 ? 0 : marginBottom, "px 0px");
    var observer = new IntersectionObserver(function (elements) {
      elements.forEach(function (section) {
        if (section.isIntersecting && isProgrammaticallyScrolled.current === false) {
          setInternalSelectedSectionId(extractSectionIdFromHtmlId(section.target.id));
        }
      });
    }, {
      root: objectPageRef.current,
      rootMargin: rootMargin,
      threshold: [0]
    });
    objectPageRef.current.querySelectorAll('section[data-component-name="ObjectPageSection"]').forEach(function (el) {
      observer.observe(el);
    });
    return function () {
      observer.disconnect();
    };
  }, [objectPageRef, children, totalHeaderHeight, setInternalSelectedSectionId, isProgrammaticallyScrolled]);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    "data-component-name": "ObjectPage",
    slot: slot,
    className: objectPageClasses.toString(),
    style: style,
    ref: objectPageRef,
    title: tooltip
  }, passThroughProps), /*#__PURE__*/React__default.createElement("header", {
    ref: topHeaderRef,
    role: "banner",
    "aria-roledescription": "Object Page header",
    style: scrollBarWidthPadding,
    className: classes.header
  }, /*#__PURE__*/React__default.createElement("header", {
    className: classes.titleBar
  }, (!showTitleInHeaderContent || headerContentHeight === 0) && /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Center
  }, image && headerContentHeight === 0 && /*#__PURE__*/React__default.createElement("div", {
    className: classes.avatar
  }, /*#__PURE__*/React__default.createElement(CollapsedAvatar, {
    image: image,
    imageShapeCircle: imageShapeCircle
  })), /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    direction: FlexBoxDirection.FlexBoxDirection.Column,
    className: classes.container
  }, breadcrumbs, /*#__PURE__*/React__default.createElement(FlexBox$1.FlexBox, {
    alignItems: FlexBoxAlignItems.FlexBoxAlignItems.Baseline
  }, /*#__PURE__*/React__default.createElement(Title$1.Title, {
    level: TitleLevel.TitleLevel.H3,
    className: classes.title
  }, title), /*#__PURE__*/React__default.createElement(Label$1.Label, {
    className: classes.subTitle
  }, subTitle), /*#__PURE__*/React__default.createElement("div", {
    className: classes.keyInfos
  }, keyInfos))), /*#__PURE__*/React__default.createElement(Toolbar$1.Toolbar, {
    toolbarStyle: ToolbarStyle.ToolbarStyle.Clear,
    design: ToolbarDesign.ToolbarDesign.Transparent
  }, /*#__PURE__*/React__default.createElement(ToolbarSpacer$1.ToolbarSpacer, null), headerActions)))), /*#__PURE__*/React__default.createElement(ObjectPageHeader, {
    headerActions: headerActions,
    image: image,
    classes: classes,
    imageShapeCircle: imageShapeCircle,
    showTitleInHeaderContent: showTitleInHeaderContent,
    headerContentProp: headerContent,
    breadcrumbs: breadcrumbs,
    keyInfos: keyInfos,
    title: title,
    subTitle: subTitle,
    headerPinned: headerPinned,
    topHeaderHeight: topHeaderHeight,
    ref: headerContentRef
  }), /*#__PURE__*/React__default.createElement(ObjectPageAnchorBar, {
    sections: children,
    selectedSectionId: internalSelectedSectionId,
    handleOnSectionSelected: handleOnSectionSelected,
    handleOnSubSectionSelected: handleOnSubSectionSelected,
    headerContentPinnable: headerContentPinnable,
    showHideHeaderButton: showHideHeaderButton && !noHeader,
    headerPinned: headerPinned,
    setHeaderPinned: setHeaderPinned,
    headerContentHeight: headerContentHeight,
    style: {
      top: noHeader ? 0 : headerPinned ? topHeaderHeight + headerContentHeight : topHeaderHeight
    },
    onToggleHeaderContentVisibility: onToggleHeaderContentVisibility,
    ref: anchorBarRef,
    className: classes.anchorBar
  }), mode === ObjectPageMode.ObjectPageMode.IconTabBar ? getSectionById(children, internalSelectedSectionId) : children);
});
ObjectPage.displayName = 'ObjectPage';

(function (ObjectPageMode) {
  ObjectPageMode["Default"] = "Default";
  ObjectPageMode["IconTabBar"] = "IconTabBar";
})(exports.ObjectPageMode || (exports.ObjectPageMode = {}));

var EmptyIdPropException = /*#__PURE__*/function (_Error) {
  _inherits(EmptyIdPropException, _Error);

  var _super = _createSuper(EmptyIdPropException);

  function EmptyIdPropException(message) {
    var _this;

    _classCallCheck(this, EmptyIdPropException);

    _this = _super.call(this, message);
    _this.name = _this.constructor.name;
    return _this;
  }

  return EmptyIdPropException;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var styles$j = {
  header: {
    padding: '0 3rem 0 2.5rem',
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapGroup_TitleBorderColor),
    boxSizing: 'border-box',
    height: '2.75rem'
  },
  title: {
    height: '2.75rem',
    color: ThemingParameters.ThemingParameters.sapTextColor,
    fontSize: ThemingParameters.ThemingParameters.sapFontHeader4Size,
    borderBottom: "1px solid ".concat(ThemingParameters.ThemingParameters.sapActiveColor),
    display: 'inline-block',
    maxWidth: '100%',
    overflow: 'hidden',
    whiteSpace: 'nowrap',
    textOverflow: 'ellipsis',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily
  },
  uppercase: {
    textTransform: 'uppercase'
  },
  sectionContent: {
    whiteSpace: 'normal'
  },
  sectionContentInner: {
    padding: '1rem 2rem 2rem 2.5rem',
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily
  }
};

var useStyles$l = createComponentStyles.createComponentStyles(styles$j, {
  name: 'ObjectPageSection'
});
var ObjectPageSection = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var title = props.title,
      id = props.id,
      children = props.children,
      titleUppercase = props.titleUppercase,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip;
  var classes = useStyles$l();

  if (!id) {
    throw new EmptyIdPropException('ObjectPageSection requires a unique ID property!');
  }

  var sectionRef = useConsolidatedRef.useConsolidatedRef(ref);
  var htmlId = "ObjectPageSection-".concat(id);
  var titleClasses = StyleClassHelper.StyleClassHelper.of(classes.title);

  if (titleUppercase) {
    titleClasses.put(classes.uppercase);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['id']);
  return /*#__PURE__*/React__default.createElement("section", _extends({
    ref: sectionRef,
    role: "region",
    className: className,
    style: style,
    title: tooltip
  }, passThroughProps, {
    id: htmlId,
    "data-component-name": "ObjectPageSection"
  }), /*#__PURE__*/React__default.createElement("div", {
    role: "heading",
    className: classes.header
  }, /*#__PURE__*/React__default.createElement("div", {
    className: titleClasses.valueOf()
  }, title)), /*#__PURE__*/React__default.createElement("div", {
    className: classes.sectionContent
  }, /*#__PURE__*/React__default.createElement("div", {
    className: classes.sectionContentInner
  }, children)));
});
ObjectPageSection.defaultProps = {
  title: '',
  // @ts-ignore
  isSection: true,
  titleUppercase: true
};
ObjectPageSection.displayName = 'ObjectPageSection';

var styles$k = {
  objectPageSubSection: {
    padding: '1rem 0',
    '&:focus': {
      outline: "1px dotted ".concat(ThemingParameters.ThemingParameters.sapContent_FocusColor),
      outlineOffset: '-1px'
    }
  },
  objectPageSubSectionHeaderTitle: {
    fontSize: ThemingParameters.ThemingParameters.sapFontHeader5Size,
    color: ThemingParameters.ThemingParameters.sapGroup_TitleTextColor,
    marginBottom: '0.5rem'
  },
  subSectionContent: {
    padding: '1rem 2rem 3rem 0'
  }
};
var useStyles$m = createComponentStyles.createComponentStyles(styles$k, {
  name: 'ObjectPageSubSection'
});
var ObjectPageSubSection = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      id = props.id,
      title = props.title,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip;

  if (!id) {
    throw new EmptyIdPropException('ObjectPageSubSection requires a unique ID property!');
  }

  var htmlRef = useConsolidatedRef.useConsolidatedRef(ref);
  var htmlId = "ObjectPageSubSection-".concat(id);
  var classes = useStyles$m();
  var subSectionClassName = StyleClassHelper.StyleClassHelper.of(classes.objectPageSubSection);

  if (className) {
    subSectionClassName.put(className);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['id']);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: htmlRef,
    className: subSectionClassName.toString(),
    role: "region",
    style: style,
    title: tooltip
  }, passThroughProps, {
    id: htmlId,
    "data-component-name": "ObjectPageSubSection"
  }), /*#__PURE__*/React__default.createElement("div", {
    className: classes.objectPageSubSectionHeaderTitle
  }, title), /*#__PURE__*/React__default.createElement("div", {
    className: classes.subSectionContent
  }, children));
});
ObjectPageSubSection.defaultProps = {
  title: null,
  // @ts-ignore
  isSubSection: true
};
ObjectPageSubSection.displayName = 'ObjectPageSubSection';

var styles$l = {
  objectStatus: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    position: 'relative',
    display: 'flex'
  },
  iconSuccess: {
    '& ui5-icon': {
      color: ThemingParameters.ThemingParameters.sapPositiveTextColor
    }
  },
  iconWarning: {
    '& ui5-icon': {
      color: ThemingParameters.ThemingParameters.sapCriticalTextColor
    }
  },
  iconError: {
    '& ui5-icon': {
      color: ThemingParameters.ThemingParameters.sapNegativeTextColor
    }
  },
  iconNone: {
    '& ui5-icon': {
      color: ThemingParameters.ThemingParameters.sapNeutralTextColor
    }
  },
  iconInformation: {
    color: ThemingParameters.ThemingParameters.sapInformativeElementColor
  },
  icon: {
    marginRight: '0.5rem',
    fontSize: '1rem',
    verticalAlign: 'bottom',
    lineHeight: 'inherit'
  },
  textSuccess: {
    color: ThemingParameters.ThemingParameters.sapPositiveTextColor
  },
  textError: {
    color: ThemingParameters.ThemingParameters.sapNegativeTextColor
  },
  textWarning: {
    color: ThemingParameters.ThemingParameters.sapCriticalTextColor
  },
  textInformation: {
    color: ThemingParameters.ThemingParameters.sapInformativeTextColor
  },
  textNone: {
    color: ThemingParameters.ThemingParameters.sapNeutralTextColor
  }
};

var defaultIconStyle = {
  fontSize: '1rem'
};

var getDefaultIcon = function getDefaultIcon(state) {
  switch (state) {
    case ValueState.ValueState.Error:
      return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
        name: "status-negative",
        style: defaultIconStyle
      });

    case ValueState.ValueState.Success:
      return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
        name: "status-positive",
        style: defaultIconStyle
      });

    case ValueState.ValueState.Warning:
      return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
        name: "status-critical",
        style: defaultIconStyle
      });

    case ValueState.ValueState.Information:
      return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
        name: "hint",
        style: defaultIconStyle
      });

    default:
      return /*#__PURE__*/React__default.createElement(Icon$1.Icon, {
        name: "status-inactive",
        style: defaultIconStyle
      });
  }
};

var useStyles$n = createComponentStyles.createComponentStyles(styles$l, {
  name: 'ObjectStatus'
});
var ObjectStatus = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var state = props.state,
      showDefaultIcon = props.showDefaultIcon,
      children = props.children,
      icon = props.icon,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot;
  var iconToRender = React.useMemo(function () {
    if (icon) {
      return icon;
    }

    if (showDefaultIcon) {
      return getDefaultIcon(state);
    }

    return null;
  }, [icon, showDefaultIcon, state]);
  var classes = useStyles$n();
  var objStatusClasses = StyleClassHelper.StyleClassHelper.of(classes.objectStatus);

  if (className) {
    objStatusClasses.put(className);
  }

  var iconClasses = StyleClassHelper.StyleClassHelper.of(classes.icon);
  iconClasses.put(classes["icon".concat(state)]);
  var textClass = classes["text".concat(state)];
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: objStatusClasses.valueOf(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), iconToRender && /*#__PURE__*/React__default.createElement("div", {
    className: iconClasses.valueOf()
  }, iconToRender), children !== null && children !== undefined && /*#__PURE__*/React__default.createElement("span", {
    className: textClass
  }, children));
});
ObjectStatus.displayName = 'ObjectStatus';
ObjectStatus.defaultProps = {
  state: ValueState.ValueState.None,
  showDefaultIcon: false,
  icon: null,
  children: null
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Option" target="_blank">UI5 Web Components Playground</a>
 */
var Option = withWebComponent$1.withWebComponent('ui5-option', ['icon', 'value'], ['selected'], [], []);
Option.displayName = 'Option';
Option.defaultProps = {
  selected: false
};

/**
 * Style Class Generator Function
 *
 * @param {Object} obj - Current Theme Context by JSS Provider.
 * @param {object} obj.parameters - Theming parameters (e.g. LabelColor)
 */

var styles$m = {
  // const isS = '@media (max-width: 600px)';
  // const isM = '@media (min-width: 601px) and (max-width: 1024px)';
  // const isL = '@media (min-width: 1025px) and (max-width: 1440px)';
  // const isXL = '@media (min-width: 1441px) and (max-width: 1920px)';
  // const isXXL = '(min-width: 1921px)';
  // function getHeaderAndFooterPaddings() {
  //   return {
  //     '& [data-bar-part="Left"]': {
  //       [isS]: {
  //         paddingLeft: '1rem'
  //       },
  //       [isM]: {
  //         paddingLeft: '2rem'
  //       },
  //       [isL]: {
  //         paddingLeft: '2rem'
  //       },
  //       [isXL]: {
  //         paddingLeft: '3rem'
  //       },
  //       [isXXL]: {
  //         paddingLeft: '3rem'
  //       }
  //     },
  //     '& [data-bar-part="Right"]': {
  //       [isS]: {
  //         paddingRight: '1rem'
  //       },
  //       [isM]: {
  //         paddingRight: '2rem'
  //       },
  //       [isL]: {
  //         paddingRight: '2rem'
  //       },
  //       [isXL]: {
  //         paddingRight: '3rem'
  //       },
  //       [isXXL]: {
  //         paddingRight: '3rem'
  //       }
  //     }
  //   };
  // }
  pageContainer: {
    width: '100%',
    height: '100%',
    overflow: 'hidden',
    position: 'relative',
    '& $pageHeader': {// ...getHeaderAndFooterPaddings()
    },
    '& $pageFooter': {// ...getHeaderAndFooterPaddings()
    },
    '& $contentSection': {// [isS]: {
      //   padding: '1rem 1rem 0 1rem'
      // },
      // [isM]: {
      //   padding: '1rem 2rem 0 2rem'
      // },
      // [isL]: {
      //   padding: '1rem 2rem 0 2rem'
      // },
      // [isXL]: {
      //   padding: '1rem 3rem 0 3rem'
      // },
      // [isXXL]: {
      //   padding: '1rem 3rem 0 3rem'
      // }
    }
  },
  backgroundStandard: {
    background: ThemingParameters.ThemingParameters.sapBackgroundColor
  },
  backgroundSolid: {
    background: ThemingParameters.ThemingParameters.sapShell_Background
  },
  backgroundList: {
    background: ThemingParameters.ThemingParameters.sapGroup_ContentBackground
  },
  backgroundTransparent: {
    background: 'transparent'
  },
  baseBar: {
    '& >*': {
      paddingLeft: '0rem',
      paddingRight: '0rem',
      '& [data-bar-part="Left"]': {
        paddingLeft: '0rem'
      },
      '& [data-bar-part="Right"]': {
        paddingRight: '0rem'
      }
    }
  },
  pageHeader: {
    top: 0,
    width: '100%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    textAlign: 'center',
    background: ThemingParameters.ThemingParameters.sapPageHeader_Background,
    '& >*': {
      background: ThemingParameters.ThemingParameters.sapPageHeader_Background,
      boxShadow: "inset 0 -0.0625rem ".concat(ThemingParameters.ThemingParameters.sapPageHeader_BorderColor)
    }
  },
  contentSection: {
    position: 'absolute',
    top: '0',
    left: '0',
    right: '0',
    bottom: '0',
    overflowY: 'auto',
    overflowX: 'hidden',
    // marginTop: '1px',
    // marginBottom: '1px',
    boxSizing: 'border-box' // backgroundColor: ThemingParameters.sapBackgroundColor

  },
  pageWithHeader: {
    '& $contentSection': {
      top: CssSizeVariables.CssSizeVariables.sapWcrBarHeight
    }
  },
  pageWithFooter: {
    '& $contentSection': {
      bottom: CssSizeVariables.CssSizeVariables.sapWcrBarHeight
    }
  },
  pageFooter: {
    position: 'absolute',
    bottom: '0',
    left: '0',
    width: '100%',
    borderTop: "1px solid ".concat(ThemingParameters.ThemingParameters.sapPageFooter_BorderColor),
    '& >*': {
      height: CssSizeVariables.CssSizeVariables.sapWcrBarHeight,
      background: ThemingParameters.ThemingParameters.sapPageFooter_Background,
      borderTop: "0.0625rem solid ".concat(ThemingParameters.ThemingParameters.sapPageFooter_BorderColor)
    }
  }
};

var useStyles$o = createComponentStyles.createComponentStyles(styles$m, {
  name: 'Page'
});
var Page = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      showFooter = props.showFooter,
      showHeader = props.showHeader,
      showBackButton = props.showBackButton,
      className = props.className,
      style = props.style,
      backgroundDesign = props.backgroundDesign,
      tooltip = props.tooltip,
      slot = props.slot,
      onNavButtonPress = props.onNavButtonPress,
      title = props.title,
      customFooter = props.customFooter,
      customHeader = props.customHeader;
  var classes = useStyles$o();
  var handleNavBackButtonPress = React.useCallback(function (e) {
    if (typeof onNavButtonPress === 'function') {
      onNavButtonPress(Utils.enrichEventWithDetails(e));
    }
  }, [onNavButtonPress]);
  var renderBackButton = React.useCallback(function () {
    if (showBackButton) {
      return /*#__PURE__*/React__default.createElement(Button$2.Button, {
        icon: "navigation-left-arrow",
        design: ButtonDesign.ButtonDesign.Transparent,
        onClick: handleNavBackButtonPress
      });
    }

    return null;
  }, [showBackButton]);
  var renderTitle = React.useCallback(function () {
    return /*#__PURE__*/React__default.createElement(Title$1.Title, {
      level: TitleLevel.TitleLevel.H5
    }, title);
  }, [title]);
  var header = React.useMemo(function () {
    return customHeader !== null && customHeader !== void 0 ? customHeader : /*#__PURE__*/React__default.createElement(Bar$1.Bar, {
      contentLeft: renderBackButton(),
      contentMiddle: renderTitle()
    });
  }, [customHeader, renderTitle, renderBackButton]);
  var pageContainer = StyleClassHelper.StyleClassHelper.of(classes.pageContainer);
  var headerClasses = StyleClassHelper.StyleClassHelper.of(classes.pageHeader, classes.baseBar);
  var footerClasses = StyleClassHelper.StyleClassHelper.of(classes.pageFooter, classes.baseBar);

  if (showHeader) {
    pageContainer.put(classes.pageWithHeader);
  }

  if (showFooter) {
    pageContainer.put(classes.pageWithFooter);
  }

  if (className) {
    pageContainer.put(className);
  }

  pageContainer.put(classes["background".concat(backgroundDesign)]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onNavButtonPress']);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: pageContainer.valueOf(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), showHeader && /*#__PURE__*/React__default.createElement("header", {
    className: headerClasses.valueOf()
  }, header), /*#__PURE__*/React__default.createElement("section", {
    className: classes.contentSection
  }, children), showFooter && /*#__PURE__*/React__default.createElement("footer", {
    className: footerClasses.valueOf()
  }, customFooter));
});
Page.defaultProps = {
  showHeader: true,
  showFooter: false,
  showBackButton: true,
  title: '',
  backgroundDesign: PageBackgroundDesign.PageBackgroundDesign.Standard
};
Page.displayName = 'Page';

(function (PageBackgroundDesign) {
  PageBackgroundDesign["Standard"] = "Standard";
  PageBackgroundDesign["Solid"] = "Solid";
  PageBackgroundDesign["List"] = "List";
  PageBackgroundDesign["Transparent"] = "Transparent";
})(exports.PageBackgroundDesign || (exports.PageBackgroundDesign = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Panel" target="_blank">UI5 Web Components Playground</a>
 */
var Panel = withWebComponent$1.withWebComponent('ui5-panel', ['accessibleRole', 'headerLevel', 'headerText'], ['collapsed', 'fixed'], ['header'], []);
Panel.displayName = 'Panel';
Panel.defaultProps = {
  accessibleRole: PanelAccessibleRoles.PanelAccessibleRoles.Form,
  collapsed: false,
  fixed: false,
  headerLevel: TitleLevel.TitleLevel.H2
};

// introduced because of web components

(function (PanelAccessibleRoles) {
  PanelAccessibleRoles["Complementary"] = "Complementary";
  PanelAccessibleRoles["Form"] = "Form";
  PanelAccessibleRoles["Region"] = "Region";
})(exports.PanelAccessibleRoles || (exports.PanelAccessibleRoles = {}));

(function (PlacementType) {
  PlacementType["Auto"] = "Auto";
  PlacementType["Top"] = "Top";
  PlacementType["Left"] = "Left";
  PlacementType["Right"] = "Right";
  PlacementType["Bottom"] = "Bottom";
})(exports.PlacementType || (exports.PlacementType = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Popover" target="_blank">UI5 Web Components Playground</a>
 */
var Popover = withWebComponent$1.withWebComponent('ui5-popover', ['headerText', 'horizontalAlign', 'placementType', 'verticalAlign', 'initialFocus'], ['allowTargetOverlap', 'modal', 'noArrow', 'preventFocusRestore'], ['footer', 'header'], ['after-close', 'after-open', 'before-close', 'before-open']);
Popover.displayName = 'Popover';
Popover.defaultProps = {
  allowTargetOverlap: false,
  horizontalAlign: PopoverHorizontalAlign.PopoverHorizontalAlign.Center,
  modal: false,
  noArrow: false,
  placementType: PlacementType.PlacementType.Right,
  verticalAlign: PopoverVerticalAlign.PopoverVerticalAlign.Center,
  preventFocusRestore: false
};

(function (PopoverHorizontalAlign) {
  PopoverHorizontalAlign["Center"] = "Center";
  PopoverHorizontalAlign["Left"] = "Left";
  PopoverHorizontalAlign["Right"] = "Right";
  PopoverHorizontalAlign["Stretch"] = "Stretch";
})(exports.PopoverHorizontalAlign || (exports.PopoverHorizontalAlign = {}));

(function (PopoverPlacementType) {
  PopoverPlacementType["Left"] = "Left";
  PopoverPlacementType["Right"] = "Right";
  PopoverPlacementType["Top"] = "Top";
  PopoverPlacementType["Bottom"] = "Bottom";
})(exports.PopoverPlacementType || (exports.PopoverPlacementType = {}));

// introduced because of web components

(function (PopoverVerticalAlign) {
  PopoverVerticalAlign["Center"] = "Center";
  PopoverVerticalAlign["Top"] = "Top";
  PopoverVerticalAlign["Bottom"] = "Bottom";
  PopoverVerticalAlign["Stretch"] = "Stretch";
})(exports.PopoverVerticalAlign || (exports.PopoverVerticalAlign = {}));

(function (Priority) {
  Priority["High"] = "High";
  Priority["Low"] = "Low";
  Priority["Medium"] = "Medium";
  Priority["None"] = "None";
})(exports.Priority || (exports.Priority = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ProductSwitch" target="_blank">UI5 Web Components Playground</a>
 */
var ProductSwitch = withWebComponent$1.withWebComponent('ui5-product-switch', [], [], [], []);
ProductSwitch.displayName = 'ProductSwitch';
ProductSwitch.defaultProps = {};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ProductSwitchItem" target="_blank">UI5 Web Components Playground</a>
 */
var ProductSwitchItem = withWebComponent$1.withWebComponent('ui5-product-switch-item', ['heading', 'icon', 'subtitle', 'target', 'targetSrc'], [], [], ['click']);
ProductSwitchItem.displayName = 'ProductSwitchItem';
ProductSwitchItem.defaultProps = {
  target: '_self'
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ProgressIndicator" target="_blank">UI5 Web Components Playground</a>
 */
var ProgressIndicator = withWebComponent$1.withWebComponent('ui5-progress-indicator', ['value', 'valueState'], ['disabled', 'hideValue'], [], []);
ProgressIndicator.displayName = 'ProgressIndicator';
ProgressIndicator.defaultProps = {
  disabled: false,
  hideValue: false,
  value: 0,
  valueState: ValueState.ValueState.None
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/RadioButton" target="_blank">UI5 Web Components Playground</a>
 */
var RadioButton = withWebComponent$1.withWebComponent('ui5-radiobutton', ['name', 'text', 'value', 'valueState'], ['disabled', 'readonly', 'selected', 'wrap'], [], ['select']);
RadioButton.displayName = 'RadioButton';
RadioButton.defaultProps = {
  disabled: false,
  readonly: false,
  selected: false,
  valueState: ValueState.ValueState.None,
  wrap: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/RatingIndicator" target="_blank">UI5 Web Components Playground</a>
 */
var RatingIndicator = withWebComponent$1.withWebComponent('ui5-rating-indicator', ['maxValue', 'value'], ['disabled', 'readonly'], [], ['change']);
RatingIndicator.displayName = 'RatingIndicator';
RatingIndicator.defaultProps = {
  disabled: false,
  maxValue: 5,
  readonly: false,
  value: 0
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ResponsivePopover" target="_blank">UI5 Web Components Playground</a>
 */
var ResponsivePopover = withWebComponent$1.withWebComponent('ui5-responsive-popover', ['headerText', 'horizontalAlign', 'placementType', 'verticalAlign', 'initialFocus'], ['allowTargetOverlap', 'modal', 'noArrow', 'preventFocusRestore'], ['footer', 'header'], ['after-close', 'after-open', 'before-close', 'before-open']);
ResponsivePopover.displayName = 'ResponsivePopover';
ResponsivePopover.defaultProps = {
  allowTargetOverlap: false,
  horizontalAlign: PopoverHorizontalAlign.PopoverHorizontalAlign.Center,
  modal: false,
  noArrow: false,
  placementType: PlacementType.PlacementType.Right,
  verticalAlign: PopoverVerticalAlign.PopoverVerticalAlign.Center,
  preventFocusRestore: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SegmentedButton" target="_blank">UI5 Web Components Playground</a>
 */
var SegmentedButton = withWebComponent$1.withWebComponent('ui5-segmentedbutton', [], [], [], ['selection-change']);
SegmentedButton.displayName = 'SegmentedButton';
SegmentedButton.defaultProps = {};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Select" target="_blank">UI5 Web Components Playground</a>
 */
var Select = withWebComponent$1.withWebComponent('ui5-select', ['name', 'valueState'], ['disabled'], [], ['change']);
Select.displayName = 'Select';
Select.defaultProps = {
  disabled: false,
  valueState: ValueState.ValueState.None
};

(function (SemanticColor) {
  SemanticColor["Default"] = "Default";
  SemanticColor["Positive"] = "Positive";
  SemanticColor["Negative"] = "Negative";
  SemanticColor["Critical"] = "Critical";
  SemanticColor["Neutral"] = "Neutral";
})(exports.SemanticColor || (exports.SemanticColor = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ShellBar" target="_blank">UI5 Web Components Playground</a>
 */
var ShellBar = withWebComponent$1.withWebComponent('ui5-shellbar', ['notificationCount', 'primaryTitle', 'secondaryTitle'], ['showCoPilot', 'showNotifications', 'showProductSwitch'], ['logo', 'menuItems', 'profile', 'searchField', 'startButton'], ['co-pilot-click', 'logo-click', 'menu-item-click', 'notifications-click', 'product-switch-click', 'profile-click']);
ShellBar.displayName = 'ShellBar';
ShellBar.defaultProps = {
  showCoPilot: false,
  showNotifications: false,
  showProductSwitch: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ShellBarItem" target="_blank">UI5 Web Components Playground</a>
 */
var ShellBarItem = withWebComponent$1.withWebComponent('ui5-shellbar-item', ['count', 'icon', 'stableDomRef', 'text'], [], [], ['item-click']);
ShellBarItem.displayName = 'ShellBarItem';
ShellBarItem.defaultProps = {};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SideNavigation" target="_blank">UI5 Web Components Playground</a>
 */
var SideNavigation = withWebComponent$1.withWebComponent('ui5-side-navigation', [], ['collapsed'], ['fixedItems'], ['selection-change']);
SideNavigation.displayName = 'SideNavigation';
SideNavigation.defaultProps = {
  collapsed: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SideNavigationItem" target="_blank">UI5 Web Components Playground</a>
 */
var SideNavigationItem = withWebComponent$1.withWebComponent('ui5-side-navigation-item', ['icon', 'text'], ['expanded', 'selected'], [], []);
SideNavigationItem.displayName = 'SideNavigationItem';
SideNavigationItem.defaultProps = {
  expanded: false,
  selected: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SideNavigationSubItem" target="_blank">UI5 Web Components Playground</a>
 */
var SideNavigationSubItem = withWebComponent$1.withWebComponent('ui5-side-navigation-sub-item', ['icon', 'text'], ['selected'], [], []);
SideNavigationSubItem.displayName = 'SideNavigationSubItem';
SideNavigationSubItem.defaultProps = {
  selected: false
};

(function (Size) {
  Size["Small"] = "Small";
  Size["Medium"] = "Medium";
  Size["Large"] = "Large";
})(exports.Size || (exports.Size = {}));

var styles$n = {
  '@keyframes spin': {
    '0%': {
      transform: 'rotate(0deg)'
    },
    '100%': {
      transform: 'rotate(360deg)'
    }
  },
  spinnerSmall: {},
  spinnerMedium: {},
  spinnerLarge: {},
  spinner: {
    '&$spinnerSmall, $spinnerSmall:after': {
      borderRadius: '50%',
      width: '24px',
      height: '24px'
    },
    '&$spinnerMedium, $spinnerMedium:after': {
      borderRadius: '50%',
      width: '40px',
      height: '40px'
    },
    '&$spinnerLarge, $spinnerLarge:after': {
      borderRadius: '50%',
      width: '64px',
      height: '64px'
    },
    margin: 'auto',
    fontSize: '10px',
    position: 'relative',
    textIndent: '-9999em',
    borderTop: '4px solid rgba(54, 64, 81, 0.16)',
    borderRight: '4px solid rgba(54, 64, 81, 0.16)',
    borderBottom: '4px solid rgba(54, 64, 81, 0.16)',
    borderLeft: '4px solid rgba(54, 64, 81, 1)',
    transform: 'translateZ(0)',
    animation: '$spin .8s infinite linear'
  }
};

var useStyles$p = createComponentStyles.createComponentStyles(styles$n, {
  name: 'Spinner'
});
/**
 */

var Spinner = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var className = props.className,
      size = props.size,
      tooltip = props.tooltip,
      slot = props.slot,
      style = props.style,
      delay = props.delay;
  var classes = useStyles$p();

  var _useState = React.useState(delay === 0),
      _useState2 = _slicedToArray(_useState, 2),
      isVisible = _useState2[0],
      setIsVisible = _useState2[1];

  var spinnerClasses = StyleClassHelper.StyleClassHelper.of(classes.spinner);

  if (className) {
    spinnerClasses.put(className);
  }

  spinnerClasses.put(classes["spinner".concat(size)]);
  React.useEffect(function () {
    var timeout;

    if (delay > 0) {
      timeout = setTimeout(function () {
        setIsVisible(true);
      }, delay);
    }

    return function () {
      clearTimeout(timeout);
    };
  }, []);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);

  var _useI18nText = hooks.useI18nText('@ui5/webcomponents-react', i18nDefaults.PLEASE_WAIT),
      _useI18nText2 = _slicedToArray(_useI18nText, 1),
      pleaseWait = _useI18nText2[0];

  if (!isVisible) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref,
    className: spinnerClasses.valueOf(),
    "data-component-name": "Spinner",
    "aria-busy": "true",
    role: "progressbar",
    tabIndex: 0,
    "aria-valuemin": 0,
    "aria-valuemax": 100,
    title: tooltip || pleaseWait,
    slot: slot,
    style: style
  }, passThroughProps), "Loading...");
});
Spinner.defaultProps = {
  delay: 0,
  size: Size.Size.Medium
};
Spinner.displayName = 'Spinner';

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/SuggestionItem" target="_blank">UI5 Web Components Playground</a>
 */
var SuggestionItem = withWebComponent$1.withWebComponent('ui5-suggestion-item', ['description', 'icon', 'image', 'info', 'infoState', 'text', 'type'], ['group', 'iconEnd'], [], []);
SuggestionItem.displayName = 'SuggestionItem';
SuggestionItem.defaultProps = {
  group: false,
  iconEnd: false,
  infoState: ValueState.ValueState.None,
  type: ListItemTypes.ListItemTypes.Active
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Switch" target="_blank">UI5 Web Components Playground</a>
 */
var Switch = withWebComponent$1.withWebComponent('ui5-switch', ['textOff', 'textOn'], ['checked', 'disabled', 'graphical'], [], ['change']);
Switch.displayName = 'Switch';
Switch.defaultProps = {
  checked: false,
  disabled: false,
  graphical: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Tab" target="_blank">UI5 Web Components Playground</a>
 */
var Tab = withWebComponent$1.withWebComponent('ui5-tab', ['additionalText', 'icon', 'semanticColor', 'stableDomRef', 'text'], ['disabled', 'selected'], [], []);
Tab.displayName = 'Tab';
Tab.defaultProps = {
  disabled: false,
  selected: false,
  semanticColor: SemanticColor.SemanticColor.Default
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TabContainer" target="_blank">UI5 Web Components Playground</a>
 */
var TabContainer = withWebComponent$1.withWebComponent('ui5-tabcontainer', ['tabLayout', 'tabsPlacement'], ['collapsed', 'fixed', 'showOverflow'], [], ['tab-select']);
TabContainer.displayName = 'TabContainer';
TabContainer.defaultProps = {
  collapsed: false,
  fixed: false,
  showOverflow: false,
  tabLayout: TabLayout.TabLayout.Standard,
  tabsPlacement: TabContainerTabsPlacement.TabContainerTabsPlacement.Top
};

(function (TabContainerTabsPlacement) {
  TabContainerTabsPlacement["Top"] = "Top";
  TabContainerTabsPlacement["Bottom"] = "Bottom";
})(exports.TabContainerTabsPlacement || (exports.TabContainerTabsPlacement = {}));

(function (TabLayout) {
  TabLayout["Inline"] = "Inline";
  TabLayout["Standard"] = "Standard";
})(exports.TabLayout || (exports.TabLayout = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TabSeparator" target="_blank">UI5 Web Components Playground</a>
 */
var TabSeparator = withWebComponent$1.withWebComponent('ui5-tab-separator', [], [], [], []);
TabSeparator.displayName = 'TabSeparator';
TabSeparator.defaultProps = {};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Table" target="_blank">UI5 Web Components Playground</a>
 */
var Table = withWebComponent$1.withWebComponent('ui5-table', ['noDataText'], ['showNoData', 'stickyColumnHeader'], ['columns'], ['popin-change', 'row-click']);
Table.displayName = 'Table';
Table.defaultProps = {
  showNoData: false,
  stickyColumnHeader: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TableCell" target="_blank">UI5 Web Components Playground</a>
 */
var TableCell = withWebComponent$1.withWebComponent('ui5-table-cell', [], [], [], []);
TableCell.displayName = 'TableCell';
TableCell.defaultProps = {};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TableColumn" target="_blank">UI5 Web Components Playground</a>
 */
var TableColumn = withWebComponent$1.withWebComponent('ui5-table-column', ['minWidth', 'popinText'], ['demandPopin'], [], []);
TableColumn.displayName = 'TableColumn';
TableColumn.defaultProps = {
  demandPopin: false,
  minWidth: Infinity
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TableRow" target="_blank">UI5 Web Components Playground</a>
 */
var TableRow$1 = withWebComponent$1.withWebComponent('ui5-table-row', [], [], [], []);
TableRow$1.displayName = 'TableRow';
TableRow$1.defaultProps = {};

(function (TableScaleWidthMode) {
  TableScaleWidthMode["Default"] = "Default";
  TableScaleWidthMode["Smart"] = "Smart";
  TableScaleWidthMode["Grow"] = "Grow";
})(exports.TableScaleWidthMode || (exports.TableScaleWidthMode = {}));

(function (TableSelectionBehavior) {
  TableSelectionBehavior["ROW"] = "Row";
  TableSelectionBehavior["ROW_ONLY"] = "RowOnly";
  TableSelectionBehavior["ROW_SELECTOR"] = "RowSelector";
})(exports.TableSelectionBehavior || (exports.TableSelectionBehavior = {}));

(function (TableSelectionMode) {
  TableSelectionMode["NONE"] = "None";
  TableSelectionMode["SINGLE_SELECT"] = "SingleSelect";
  TableSelectionMode["MULTI_SELECT"] = "MultiSelect";
})(exports.TableSelectionMode || (exports.TableSelectionMode = {}));

var TextStyles = {
  // Text Style
  text: {
    fontFamily: ThemingParameters.ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.ThemingParameters.sapTextColor,
    display: 'inline-block',
    boxSizing: 'border-box',
    whiteSpace: 'pre-line',
    wordWrap: 'break-word',
    maxWidth: '100%'
  },
  renderWhitespace: {
    whiteSpace: 'pre-wrap'
  },
  noWrap: {
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    wordWrap: 'normal',
    overflow: 'hidden',
    '&$renderWhitespace': {
      whiteSpace: 'pre'
    }
  }
};

var useStyles$q = createComponentStyles.createComponentStyles(TextStyles, {
  name: 'Text'
});
var Text = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      renderWhitespace = props.renderWhitespace,
      wrapping = props.wrapping,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot;
  var classes = useStyles$q();
  var classNameString = StyleClassHelper.StyleClassHelper.of(classes.text);

  if (wrapping === false) {
    classNameString.put(classes.noWrap);
  }

  if (renderWhitespace) {
    classNameString.put(classes.renderWhitespace);
  }

  if (className) {
    classNameString.put(className);
  }

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props);
  return /*#__PURE__*/React__default.createElement("span", _extends({
    ref: ref,
    style: style,
    className: classNameString.toString(),
    title: tooltip,
    slot: slot
  }, passThroughProps), children);
});
Text.defaultProps = {
  renderWhitespace: false,
  wrapping: true
};
Text.displayName = 'Text';

(function (TextAlign) {
  TextAlign["Begin"] = "Begin";
  TextAlign["End"] = "End";
  TextAlign["Left"] = "Left";
  TextAlign["Right"] = "Right";
  TextAlign["Center"] = "Center";
  TextAlign["Initial"] = "Initial";
})(exports.TextAlign || (exports.TextAlign = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TextArea" target="_blank">UI5 Web Components Playground</a>
 */
var TextArea = withWebComponent$1.withWebComponent('ui5-textarea', ['growingMaxLines', 'maxlength', 'name', 'placeholder', 'rows', 'value', 'valueState'], ['disabled', 'growing', 'readonly', 'required', 'showExceededText'], ['valueStateMessage'], ['change', 'input']);
TextArea.displayName = 'TextArea';
TextArea.defaultProps = {
  disabled: false,
  growing: false,
  growingMaxLines: 0,
  maxlength: null,
  readonly: false,
  required: false,
  rows: 0,
  showExceededText: false,
  valueState: ValueState.ValueState.None
};

var GlobalStyleClassesStyles = {
  '@global': _defineProperty({}, ".".concat(GlobalStyleClasses.GlobalStyleClasses.sapScrollBar), {
    '&::-webkit-scrollbar': {
      backgroundColor: ThemingParameters.ThemingParameters.sapScrollBar_TrackColor,
      '&:horizontal': {
        height: ThemingParameters.ThemingParameters.sapScrollBar_Dimension
      },
      '&:vertical': {
        width: ThemingParameters.ThemingParameters.sapScrollBar_Dimension
      }
    },
    '&::-webkit-scrollbar-thumb': {
      backgroundColor: ThemingParameters.ThemingParameters.sapScrollBar_FaceColor,
      borderRadius: '0.25rem',
      '&:hover': {
        backgroundColor: ThemingParameters.ThemingParameters.sapScrollBar_Hover_FaceColor
      },
      '&:horizontal': {
        height: ThemingParameters.ThemingParameters.sapScrollBar_Dimension
      },
      '&:vertical': {
        width: ThemingParameters.ThemingParameters.sapScrollBar_Dimension
      }
    },
    '&::-webkit-scrollbar-corner': {
      backgroundColor: ThemingParameters.ThemingParameters.sapScrollBar_TrackColor
    }
  })
};

var useStyles$r = createComponentStyles.createComponentStyles(GlobalStyleClassesStyles);

var cssVarsPonyfillNeeded = function cssVarsPonyfillNeeded() {
  return !!window.CSSVarsPonyfill;
};

// inject the size variables first before the ThemeProvider Component is mounted, otherwise there will be some flickering
if (!document.querySelector('style[data-ui5-webcomponents-react-sizes]')) {
  var variables = document.createElement('style');
  variables.setAttribute('data-ui5-webcomponents-react-sizes', '');
  variables.innerHTML = CssSizeVariables.cssVariablesStyles;
  document.head.appendChild(variables);
}

var ThemeProvider = function ThemeProvider(props) {
  var children = props.children;
  var isCompactSize = document.body.classList.contains('ui5-content-density-compact');
  useStyles$r();
  var theme = Theme.getTheme();
  var themeContext = React.useMemo(function () {
    return {
      theme: theme,
      contentDensity: isCompactSize ? ContentDensity.ContentDensity.Compact : ContentDensity.ContentDensity.Cozy,
      parameters: ThemingParameters.ThemingParameters,
      rtl: RTL.getRTL()
    };
  }, [theme, isCompactSize]);
  React.useEffect(function () {
    if (cssVarsPonyfillNeeded()) {
      window.CSSVarsPonyfill.cssVars({
        rootElement: document.head,
        include: 'style[data-ui5-webcomponents-react-sizes],style[data-jss]',
        watch: true,
        silent: true
      });
    }
  }, []);
  return /*#__PURE__*/React__default.createElement(reactJss.ThemeProvider, {
    theme: themeContext
  }, children);
};

ThemeProvider.displayName = 'ThemeProvider';

(function (Themes) {
  Themes["sap_fiori_3"] = "sap_fiori_3";
  Themes["sap_fiori_3_dark"] = "sap_fiori_3_dark";
  Themes["sap_fiori_3_hcb"] = "sap_fiori_3_hcb";
  Themes["sap_fiori_3_hcw"] = "sap_fiori_3_hcw";
  Themes["sap_belize"] = "sap_belize";
  Themes["sap_belize_hcb"] = "sap_belize_hcb";
  Themes["sap_belize_hcw"] = "sap_belize_hcw";
})(exports.Themes || (exports.Themes = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TimePicker" target="_blank">UI5 Web Components Playground</a>
 */
var TimePicker = withWebComponent$1.withWebComponent('ui5-time-picker', ['formatPattern', 'placeholder', 'value', 'valueState'], ['disabled', 'readonly'], ['valueStateMessage'], ['change', 'input']);
TimePicker.displayName = 'TimePicker';
TimePicker.defaultProps = {
  disabled: false,
  placeholder: undefined,
  readonly: false,
  value: undefined,
  valueState: ValueState.ValueState.None
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Timeline" target="_blank">UI5 Web Components Playground</a>
 */
var Timeline = withWebComponent$1.withWebComponent('ui5-timeline', [], [], [], []);
Timeline.displayName = 'Timeline';
Timeline.defaultProps = {};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TimelineItem" target="_blank">UI5 Web Components Playground</a>
 */
var TimelineItem = withWebComponent$1.withWebComponent('ui5-timeline-item', ['icon', 'itemName', 'subtitleText', 'titleText'], ['itemNameClickable'], [], ['item-name-click']);
TimelineItem.displayName = 'TimelineItem';
TimelineItem.defaultProps = {
  itemNameClickable: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Title" target="_blank">UI5 Web Components Playground</a>
 */
var Title = withWebComponent$1.withWebComponent('ui5-title', ['level'], ['wrap'], [], []);
Title.displayName = 'Title';
Title.defaultProps = {
  level: TitleLevel.TitleLevel.H2,
  wrap: false
};

(function (TitleLevel) {
  TitleLevel["H1"] = "H1";
  TitleLevel["H2"] = "H2";
  TitleLevel["H3"] = "H3";
  TitleLevel["H4"] = "H4";
  TitleLevel["H5"] = "H5";
  TitleLevel["H6"] = "H6";
})(exports.TitleLevel || (exports.TitleLevel = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Toast" target="_blank">UI5 Web Components Playground</a>
 */
var Toast = withWebComponent$1.withWebComponent('ui5-toast', ['duration', 'placement'], [], [], []);
Toast.displayName = 'Toast';
Toast.defaultProps = {
  duration: 3000,
  placement: ToastPlacement.ToastPlacement.BottomCenter
};

(function (ToastPlacement) {
  ToastPlacement["TopStart"] = "TopStart";
  ToastPlacement["TopCenter"] = "TopCenter";
  ToastPlacement["TopEnd"] = "TopEnd";
  ToastPlacement["MiddleStart"] = "MiddleStart";
  ToastPlacement["MiddleCenter"] = "MiddleCenter";
  ToastPlacement["MiddleEnd"] = "MiddleEnd";
  ToastPlacement["BottomStart"] = "BottomStart";
  ToastPlacement["BottomCenter"] = "BottomCenter";
  ToastPlacement["BottomEnd"] = "BottomEnd";
})(exports.ToastPlacement || (exports.ToastPlacement = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/ToggleButton" target="_blank">UI5 Web Components Playground</a>
 */
var ToggleButton = withWebComponent$1.withWebComponent('ui5-togglebutton', ['design', 'icon'], ['pressed', 'disabled', 'iconEnd', 'submits'], [], ['click']);
ToggleButton.displayName = 'ToggleButton';
ToggleButton.defaultProps = {
  pressed: false,
  design: ButtonDesign.ButtonDesign.Default,
  disabled: false,
  iconEnd: false,
  submits: false
};

var Token = withWebComponent$1.withWebComponent('ui5-token', [], ['selected', 'readonly'], [], ['delete', 'select']);
Token.displayName = 'Token';

var Tokenizer = withWebComponent$1.withWebComponent('ui5-tokenizer', [], ['showMore', 'disabled'], [], ['tokenDelete', 'showMoreItemsPress']);
Tokenizer.displayName = 'Tokenizer';

var OverflowPopover = function OverflowPopover(props) {
  var lastVisibleIndex = props.lastVisibleIndex,
      contentClass = props.contentClass,
      children = props.children;
  var popoverRef = React.useRef();

  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      pressed = _useState2[0],
      setPressed = _useState2[1];

  var handleToggleButtonClick = React.useCallback(function (e) {
    if (popoverRef.current) {
      if (!pressed) {
        popoverRef.current.openBy(e.target);
        setPressed(true);
      } else {
        popoverRef.current.close();
      }
    }
  }, []);
  React.useEffect(function () {
    return function () {
      if (popoverRef.current) {
        popoverRef.current.close();
      }
    };
  }, []);
  var handleClose = React.useCallback(function (e) {
    stopPropagation(e);
    setPressed(false);
  }, [setPressed]);
  var renderChildren = React.useCallback(function () {
    return React__default.Children.toArray((children === null || children === void 0 ? void 0 : children.type) === React__default.Fragment ? children.props.children : children).map(function (item, index) {
      if (index > lastVisibleIndex) {
        if (item.type.displayName === 'ToolbarSeparator') {
          return /*#__PURE__*/React__default.cloneElement(item, {
            style: {
              height: '0.0625rem',
              margin: '0.375rem 0.1875rem',
              width: '100%',
              background: ThemingParameters.ThemingParameters.sapToolbar_SeparatorColor
            }
          });
        }

        return item;
      }

      return null;
    });
  }, [children, lastVisibleIndex]);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(ToggleButton$1.ToggleButton, {
    design: ButtonDesign.ButtonDesign.Transparent,
    icon: "overflow",
    onClick: handleToggleButtonClick,
    pressed: pressed
  }), /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default.createElement(Popover$1.Popover, {
    placementType: PlacementType.PlacementType.Bottom,
    ref: popoverRef,
    onAfterClose: handleClose
  }, /*#__PURE__*/React__default.createElement("div", {
    className: contentClass
  }, renderChildren())), document.body));
};

var styles$o = {
  outerContainer: {
    width: '100%',
    height: CssSizeVariables.CssSizeVariables.sapWcrToolbarHeight,
    position: 'relative',
    overflow: 'hidden',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottom: "solid 0.0625rem ".concat(ThemingParameters.ThemingParameters.sapGroup_TitleBorderColor)
  },
  hasOverflow: {
    '& $toolbar': {
      maxWidth: 'calc(100% - 44px)'
    }
  },
  clear: {
    borderBottom: 'none'
  },
  active: {
    cursor: 'pointer',
    '&:active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapActiveColor
    },
    '&:hover': {
      backgroundColor: ThemingParameters.ThemingParameters.sapList_Hover_Background
    }
  },
  info: {
    // This color is most similar to darken(@sapUiBaseColor, 10)
    backgroundColor: ThemingParameters.ThemingParameters.sapList_HeaderBorderColor,
    '&$active': {
      backgroundColor: ThemingParameters.ThemingParameters.sapInfobar_Active_Background,
      '&:active': {
        backgroundColor: "".concat(ThemingParameters.ThemingParameters.sapInfobar_Active_Background)
      },
      '&:hover': {
        backgroundColor: ThemingParameters.ThemingParameters.sapInfobar_Hover_Background
      }
    }
  },
  solid: {
    backgroundColor: ThemingParameters.ThemingParameters.sapBackgroundColor
  },
  transparent: {
    backgroundColor: ThemingParameters.ThemingParameters.sapToolbar_Background
  },
  toolbar: {
    width: '100%',
    '& >:first-child:not(.spacer)': {
      margin: '0 0.25rem 0 0'
    },
    '& >:last-child:not(.spacer)': {
      margin: '0 0.5rem 0 0.25rem'
    },
    '& > *:not(first-child):not(last-child):not(.spacer)': {
      margin: '0 0.25rem'
    },
    display: 'flex',
    alignItems: 'center',
    maxWidth: '100%'
  },
  overflowButtonContainer: {
    marginRight: '0.5rem'
  },
  popoverContent: {
    maxWidth: '20rem',
    padding: CssSizeVariables.CssSizeVariables.sapWcrToolbarPopoverContentPadding,
    display: 'flex',
    flexDirection: 'column'
  }
};

var useStyles$s = createComponentStyles.createComponentStyles(styles$o, {
  name: 'Toolbar'
});
var Toolbar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      toolbarStyle = props.toolbarStyle,
      design = props.design,
      active = props.active,
      style = props.style,
      tooltip = props.tooltip,
      className = props.className,
      onToolbarClick = props.onToolbarClick,
      slot = props.slot;
  var classes = useStyles$s(styles$o);
  var outerContainer = hooks.useConsolidatedRef(ref);
  var controlMetaData = React.useRef([]);

  var _useState = React.useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      lastVisibleIndex = _useState2[0],
      setLastVisibleIndex = _useState2[1];

  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onToolbarClick']);

  var _useI18nText = hooks.useI18nText('@ui5/webcomponents-react', i18nDefaults.SHOW_MORE),
      _useI18nText2 = _slicedToArray(_useI18nText, 1),
      showMoreText = _useI18nText2[0];

  var toolbarClasses = StyleClassHelper.StyleClassHelper.of(classes.outerContainer);

  if (toolbarStyle === ToolbarStyle.ToolbarStyle.Clear) {
    toolbarClasses.put(classes.clear);
  }

  if (active) {
    toolbarClasses.put(classes.active);
  }

  switch (design) {
    case ToolbarDesign.ToolbarDesign.Solid:
      toolbarClasses.put(classes.solid);
      break;

    case ToolbarDesign.ToolbarDesign.Transparent:
      toolbarClasses.put(classes.transparent);
      break;

    case ToolbarDesign.ToolbarDesign.Info:
      toolbarClasses.put(classes.info);
      break;
  }

  toolbarClasses.putIfPresent(className);
  var childrenWithRef = React.useMemo(function () {
    controlMetaData.current = [];
    return React__default.Children.toArray((children === null || children === void 0 ? void 0 : children.type) === React__default.Fragment ? children.props.children : children).map(function (item, index) {
      var _item$type;

      var itemRef = /*#__PURE__*/React.createRef();
      controlMetaData.current.push({
        ref: itemRef
      }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

      if ((item === null || item === void 0 ? void 0 : (_item$type = item.type) === null || _item$type === void 0 ? void 0 : _item$type.displayName) === 'ToolbarSpacer') {
        return item;
      }

      return /*#__PURE__*/React__default.createElement("div", {
        ref: itemRef,
        key: index
      }, item);
    });
  }, [children, controlMetaData]);
  var overflowNeeded = (lastVisibleIndex || lastVisibleIndex === 0) && React__default.Children.count(childrenWithRef) !== lastVisibleIndex + 1;
  toolbarClasses.putIfPresent(overflowNeeded && classes.hasOverflow);
  var calculateVisibleItems = React.useCallback(function () {
    var OVERFLOW_BUTTON_WIDTH = 32 + 8;
    requestAnimationFrame(function () {
      if (!outerContainer.current) return;
      var availableWidth = outerContainer.current.getBoundingClientRect().width;
      var consumedWidth = 0;
      var lastIndex = null;

      if (availableWidth - OVERFLOW_BUTTON_WIDTH <= 0) {
        lastIndex = -1;
      } else {
        controlMetaData.current.forEach(function (item, index) {
          var currentMeta = controlMetaData.current[index];

          if (currentMeta && currentMeta.ref && currentMeta.ref.current) {
            var nextWidth = currentMeta.ref.current.getBoundingClientRect().width;
            nextWidth += index === 0 || index === controlMetaData.current.length - 1 ? 4 : 8; //first & last element = padding: 4px

            if (index === controlMetaData.current.length - 1) {
              if (consumedWidth + nextWidth <= availableWidth - 8) {
                lastIndex = index;
              }
            } else {
              if (consumedWidth + nextWidth <= availableWidth - OVERFLOW_BUTTON_WIDTH) {
                lastIndex = index;
              }

              if (consumedWidth < availableWidth - OVERFLOW_BUTTON_WIDTH && consumedWidth + nextWidth >= availableWidth - OVERFLOW_BUTTON_WIDTH) {
                lastIndex = index - 1;
              }
            }

            consumedWidth += nextWidth;
          }
        });
      }

      setLastVisibleIndex(lastIndex);
    });
  }, [outerContainer.current, controlMetaData.current, setLastVisibleIndex, childrenWithRef, overflowNeeded]);
  var observer = React.useRef(new ResizeObserver(calculateVisibleItems));
  React.useEffect(function () {
    if (outerContainer.current) {
      observer.current.observe(outerContainer.current);
    }

    return function () {
      observer.current.disconnect();
    };
  }, [outerContainer.current]);
  React.useLayoutEffect(function () {
    calculateVisibleItems();
  }, [calculateVisibleItems]);
  var onClick = React.useCallback(function (e) {
    if (active && typeof onToolbarClick === 'function') {
      onToolbarClick(Utils.enrichEventWithDetails(e));
    }
  }, [onToolbarClick, active]);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    title: tooltip,
    style: style,
    className: toolbarClasses.className,
    ref: outerContainer,
    onClick: onClick,
    slot: slot
  }, passThroughProps), /*#__PURE__*/React__default.createElement("div", {
    className: classes.toolbar
  }, overflowNeeded && React__default.Children.map(childrenWithRef, function (item, index) {
    if (index >= lastVisibleIndex + 1) {
      return /*#__PURE__*/React__default.cloneElement(item, {
        style: {
          visibility: 'hidden'
        }
      });
    }

    return item;
  }), !overflowNeeded && childrenWithRef), overflowNeeded && /*#__PURE__*/React__default.createElement("div", {
    className: classes.overflowButtonContainer,
    title: showMoreText
  }, /*#__PURE__*/React__default.createElement(OverflowPopover, {
    lastVisibleIndex: lastVisibleIndex,
    contentClass: classes.popoverContent
  }, children)));
});
Toolbar.defaultProps = {
  toolbarStyle: ToolbarStyle.ToolbarStyle.Standard,
  design: ToolbarDesign.ToolbarDesign.Auto,
  active: false
};
Toolbar.displayName = 'Toolbar';

(function (ToolbarDesign) {
  ToolbarDesign["Auto"] = "Auto";
  ToolbarDesign["Info"] = "Info";
  ToolbarDesign["Solid"] = "Solid";
  ToolbarDesign["Transparent"] = "Transparent";
})(exports.ToolbarDesign || (exports.ToolbarDesign = {}));

var styles$p = {
  separator: {
    width: '0.0625rem',
    height: CssSizeVariables.CssSizeVariables.sapWcrToolbarSeparatorHeight,
    background: ThemingParameters.ThemingParameters.sapToolbar_SeparatorColor
  }
};
var useStyles$t = createComponentStyles.createComponentStyles(styles$p, {
  name: 'ToolbarSeparator'
});

var ToolbarSeparator = function ToolbarSeparator(props) {
  var style = props.style,
      className = props.className;
  var classes = useStyles$t(styles$p);
  var separatorClasses = StyleClassHelper.StyleClassHelper.of(classes.separator);

  if (className) {
    separatorClasses.put(className);
  }

  return /*#__PURE__*/React__default.createElement("div", {
    style: style,
    className: separatorClasses.valueOf()
  });
};

ToolbarSeparator.displayName = 'ToolbarSeparator';

var ToolbarSpacer = function ToolbarSpacer() {
  return /*#__PURE__*/React__default.createElement("span", {
    style: {
      flexGrow: 1
    },
    className: "spacer"
  });
};

ToolbarSpacer.displayName = 'ToolbarSpacer';

(function (ToolbarStyle) {
  ToolbarStyle["Clear"] = "Clear";
  ToolbarStyle["Standard"] = "Standard";
})(exports.ToolbarStyle || (exports.ToolbarStyle = {}));

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/Tree" target="_blank">UI5 Web Components Playground</a>
 */
var Tree = withWebComponent$1.withWebComponent('ui5-tree', ['footerText', 'headerText', 'mode', 'noDataText'], [], ['header'], ['item-click', 'item-delete', 'item-toggle', 'selection-change']);
Tree.displayName = 'Tree';
Tree.defaultProps = {
  mode: ListMode.ListMode.None
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/TreeItem" target="_blank">UI5 Web Components Playground</a>
 */
var TreeItem = withWebComponent$1.withWebComponent('ui5-tree-item', ['icon', 'text'], ['expanded', 'hasChildren', 'selected'], [], []);
TreeItem.displayName = 'TreeItem';
TreeItem.defaultProps = {
  expanded: false,
  hasChildren: false,
  selected: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/UploadCollection" target="_blank">UI5 Web Components Playground</a>
 */
var UploadCollection = withWebComponent$1.withWebComponent('ui5-upload-collection', ['mode', 'noDataDescription', 'noDataText'], ['noDnd'], ['header'], ['file-deleted', 'selection-change']);
UploadCollection.displayName = 'UploadCollection';
UploadCollection.defaultProps = {
  mode: ListMode.ListMode.None,
  noDnd: false
};

/**
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/UploadCollectionItem" target="_blank">UI5 Web Components Playground</a>
 */
var UploadCollectionItem = withWebComponent$1.withWebComponent('ui5-upload-collection-item', ['file', 'fileName', 'progress', 'uploadState'], ['fileNameClickable', 'noDelete', 'noRetry', 'noTerminate'], ['thumbnail'], ['file-name-click', 'rename', 'retry', 'terminate']);
UploadCollectionItem.displayName = 'UploadCollectionItem';
UploadCollectionItem.defaultProps = {
  file: null,
  fileNameClickable: false,
  noDelete: false,
  noRetry: false,
  noTerminate: false,
  progress: 0,
  uploadState: UploadState.UploadState.Ready
};

(function (UploadState) {
  UploadState["Complete"] = "Complete";
  UploadState["Error"] = "Error";
  UploadState["Ready"] = "Ready";
  UploadState["Uploading"] = "Uploading";
})(exports.UploadState || (exports.UploadState = {}));

(function (ValueState) {
  ValueState["Error"] = "Error";
  ValueState["None"] = "None";
  ValueState["Success"] = "Success";
  ValueState["Warning"] = "Warning";
  ValueState["Information"] = "Information";
})(exports.ValueState || (exports.ValueState = {}));

var styles$q = {
  container: {
    display: 'flex',
    alignItems: 'center',
    textAlign: 'center',
    cursor: 'pointer'
  },
  title: {
    cursor: 'pointer',
    color: ThemingParameters.ThemingParameters.sapButton_TextColor,
    '&:hover': {
      color: ThemingParameters.ThemingParameters.sapButton_Hover_TextColor
    }
  },
  disabled: {
    '& $title': {
      color: ThemingParameters.ThemingParameters.sapGroup_TitleTextColor,
      cursor: 'default',
      '&:hover': {
        color: 'ThemingParameters.sapGroup_TitleTextColor'
      }
    }
  },
  footer: {
    margin: '0.4375rem 1rem 0.4325rem auto'
  }
};
var useStyles$u = createComponentStyles.createComponentStyles(styles$q, {
  name: 'VariantManagement'
});
/**
 * The `VariantManagement` component can be used to manage variants, such as FilterBar variants or AnalyticalTable variants.
 */

var VariantManagement = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _ref, _props$selectedKey, _variantItems$;

  var variantItems = props.variantItems,
      popupTitle = props.popupTitle,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      placement = props.placement,
      level = props.level,
      onSelect = props.onSelect,
      closeOnItemSelect = props.closeOnItemSelect,
      disabled = props.disabled;
  var classes = useStyles$u();
  var popoverRef = React.useRef(null);

  var _useState = React.useState((_ref = (_props$selectedKey = props.selectedKey) !== null && _props$selectedKey !== void 0 ? _props$selectedKey : variantItems === null || variantItems === void 0 ? void 0 : (_variantItems$ = variantItems[0]) === null || _variantItems$ === void 0 ? void 0 : _variantItems$.key) !== null && _ref !== void 0 ? _ref : null),
      _useState2 = _slicedToArray(_useState, 2),
      selectedKey = _useState2[0],
      setSelectedKey = _useState2[1];

  React.useEffect(function () {
    if (props.selectedKey) {
      setSelectedKey(props.selectedKey);
    }
  }, [props.selectedKey, setSelectedKey]);
  var handleCancelButtonClick = React.useCallback(function () {
    popoverRef.current.close();
  }, [popoverRef]);
  var handleOpenVariantManagement = React.useCallback(function (e) {
    popoverRef.current.open(e.target);
  }, [popoverRef]);

  var _useI18nText = hooks.useI18nText('@ui5/webcomponents-react', i18nDefaults.CANCEL),
      _useI18nText2 = _slicedToArray(_useI18nText, 1),
      cancel = _useI18nText2[0];

  var footerButtons = React.useMemo(function () {
    return /*#__PURE__*/React__default.createElement(Button$2.Button, {
      className: classes.footer,
      onClick: handleCancelButtonClick,
      design: ButtonDesign.ButtonDesign.Emphasized
    }, cancel);
  }, [classes.footer, handleCancelButtonClick, cancel]);

  var getItemByKey = function getItemByKey(key) {
    return variantItems === null || variantItems === void 0 ? void 0 : variantItems.find(function (item) {
      return item.key === key;
    });
  };

  var selectedItem = getItemByKey(selectedKey) || variantItems[0];
  var variantManagementClasses = StyleClassHelper.StyleClassHelper.of(classes.container);

  if (disabled) {
    variantManagementClasses.put(classes.disabled);
  }

  if (className) {
    variantManagementClasses.put(className);
  }

  var handleVariantItemSelect = React.useCallback(function (event) {
    var newSelectedKey = event.detail.item.dataset.key;
    setSelectedKey(newSelectedKey);
    onSelect(Utils.enrichEventWithDetails(event, _objectSpread(_objectSpread({}, event.details), {}, {
      selectedItem: getItemByKey(newSelectedKey) || variantItems[0]
    })));

    if (closeOnItemSelect) {
      handleCancelButtonClick();
    }
  }, [handleCancelButtonClick, closeOnItemSelect, selectedKey, variantItems, setSelectedKey]);
  var passThroughProps = usePassThroughHtmlProps.usePassThroughHtmlProps(props, ['onSelect']);

  if (!variantItems || variantItems.length < 1) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: variantManagementClasses.valueOf(),
    style: style,
    title: tooltip
  }, passThroughProps, {
    ref: ref
  }), /*#__PURE__*/React__default.createElement(Title$1.Title, {
    level: level,
    className: classes.title
  }, selectedItem.label), /*#__PURE__*/React__default.createElement(Button$2.Button, {
    onClick: handleOpenVariantManagement,
    design: ButtonDesign.ButtonDesign.Transparent,
    icon: "navigation-down-arrow",
    disabled: disabled
  }), /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React__default.createElement(ResponsivePopover$1.ResponsivePopover, {
    ref: popoverRef,
    headerText: popupTitle,
    placementType: placement,
    footer: footerButtons,
    onAfterClose: stopPropagation
  }, /*#__PURE__*/React__default.createElement(List$1.List, {
    onItemClick: handleVariantItemSelect,
    mode: ListMode.ListMode.SingleSelect
  }, variantItems.map(function (item) {
    return /*#__PURE__*/React__default.createElement(StandardListItem$1.StandardListItem, {
      style: {
        width: '300px'
      },
      "data-key": item.key,
      type: ListItemTypes.ListItemTypes.Active,
      key: item.key,
      selected: selectedKey === item.key
    }, item.label);
  }))), document.body));
});
VariantManagement.defaultProps = {
  popupTitle: 'Variants',
  selectedKey: null,
  onSelect: function onSelect() {},
  closeOnItemSelect: true,
  placement: PlacementType.PlacementType.Bottom,
  level: TitleLevel.TitleLevel.H4,
  disabled: false,
  variantItems: []
};
VariantManagement.displayName = 'VariantManagement';

(function (VerticalAlign) {
  VerticalAlign["Bottom"] = "Bottom";
  VerticalAlign["Inherit"] = "Inherit";
  VerticalAlign["Middle"] = "Middle";
  VerticalAlign["Top"] = "Top";
})(exports.VerticalAlign || (exports.VerticalAlign = {}));

var capitalizeFirstLetter = function capitalizeFirstLetter(s) {
  return s.charAt(0).toUpperCase() + s.slice(1);
};

var camelToKebabCase = function camelToKebabCase(s) {
  return s.replace(/([A-Z])/g, function (a, b) {
    return "-".concat(b.toLowerCase());
  });
};

var kebabToCamelCase = function kebabToCamelCase(str) {
  return str.replace(/([-_]\w)/g, function (g) {
    return g[1].toUpperCase();
  });
};

var createEventPropName = function createEventPropName(eventName) {
  return "on".concat(capitalizeFirstLetter(kebabToCamelCase(eventName)));
};

var withWebComponent = function withWebComponent(TagName, regularProperties, booleanProperties, slotProperties, eventProperties) {
  var WithWebComponent = /*#__PURE__*/React.forwardRef(function (props, wcRef) {
    var className = props.className,
        tooltip = props.tooltip,
        children = props.children,
        rest = _objectWithoutProperties(props, ["className", "tooltip", "children"]);

    var ref = useConsolidatedRef.useConsolidatedRef(wcRef);
    var eventRegistry = React.useRef({}); // regular props (no booleans, no slots and no events)

    var regularProps = regularProperties.reduce(function (acc, name) {
      if (rest.hasOwnProperty(name)) {
        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, camelToKebabCase(name), rest[name]));
      }

      return acc;
    }, {}); // boolean properties - only attach if they are truthy

    var booleanProps = booleanProperties.reduce(function (acc, name) {
      if (rest[name] === true || rest[name] === 'true') {
        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, camelToKebabCase(name), true));
      }

      return acc;
    }, {});
    var slots = slotProperties.reduce(function (acc, name) {
      var slotValue = rest[name];

      if (slotValue) {
        var _slotValue$props;

        return [].concat(_toConsumableArray(acc), _toConsumableArray(React.Children.map((slotValue === null || slotValue === void 0 ? void 0 : slotValue.type) === React__default.Fragment ? (_slotValue$props = slotValue.props) === null || _slotValue$props === void 0 ? void 0 : _slotValue$props.children : slotValue, function (item, index) {
          return /*#__PURE__*/React.cloneElement(item, {
            key: "".concat(name, "-").concat(index),
            slot: name
          });
        })));
      }

      return acc;
    }, []); // event binding

    React.useEffect(function () {
      eventProperties.forEach(function (eventName) {
        var eventHandler = rest[createEventPropName(eventName)];

        if (typeof eventHandler === 'function') {
          eventRegistry.current[eventName] = eventHandler;
          ref.current.addEventListener(eventName, eventRegistry.current[eventName]);
        }
      });
      return function () {
        // eslint-disable-next-line guard-for-in
        for (var eventName in eventRegistry.current) {
          var _ref$current;

          (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.removeEventListener(eventName, eventRegistry.current[eventName]);
        }
      };
    }, eventProperties.map(function (eventName) {
      return rest[createEventPropName(eventName)];
    })); // non web component related props, just pass them

    var nonWebComponentRelatedProps = Object.entries(rest).filter(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          key = _ref2[0];

      return !regularProperties.includes(key);
    }).filter(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
          key = _ref4[0];

      return !slotProperties.includes(key);
    }).filter(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 1),
          key = _ref6[0];

      return !booleanProperties.includes(key);
    }).filter(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 1),
          key = _ref8[0];

      return !eventProperties.map(function (eventName) {
        return createEventPropName(eventName);
      }).includes(key);
    }).reduce(function (acc, _ref9) {
      var _ref10 = _slicedToArray(_ref9, 2),
          key = _ref10[0],
          val = _ref10[1];

      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, val));
    }, {});
    return (
      /*#__PURE__*/
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      React__default.createElement(TagName, _extends({
        ref: ref
      }, booleanProps, regularProps, nonWebComponentRelatedProps, {
        "class": className,
        title: tooltip
      }), slots, children)
    );
  });
  WithWebComponent.displayName = "WithWebComponent(".concat(TagName, ")");
  return WithWebComponent;
};

exports.ActionSheet = ActionSheet;
exports.AnalyticalCard = AnalyticalCard;
exports.AnalyticalCardHeader = AnalyticalCardHeader;
exports.AnalyticalTable = AnalyticalTable;
exports.Avatar = Avatar;
exports.Badge = Badge;
exports.Bar = Bar;
exports.Breadcrumbs = Breadcrumbs;
exports.BusyIndicator = BusyIndicator;
exports.Button = Button;
exports.Calendar = Calendar;
exports.Card = Card;
exports.Carousel = Carousel;
exports.CheckBox = CheckBox;
exports.ComboBox = ComboBox;
exports.ComboBoxItem = ComboBoxItem;
exports.CustomListItem = CustomListItem;
exports.DatePicker = DatePicker;
exports.DateRangePicker = DateRangePicker;
exports.DateTimePicker = DateTimePicker;
exports.Dialog = Dialog;
exports.DurationPicker = DurationPicker;
exports.FileUploader = FileUploader;
exports.FilterBar = FilterBar;
exports.FilterGroupItem = FilterGroupItem;
exports.FilterItem = FilterItem;
exports.FlexBox = FlexBox;
exports.FlexibleColumnLayout = FlexibleColumnLayout;
exports.Form = Form;
exports.FormGroup = FormGroup;
exports.FormItem = FormItem;
exports.Grid = Grid;
exports.GroupHeaderListItem = GroupHeaderListItem;
exports.Icon = Icon;
exports.Input = Input;
exports.Label = Label;
exports.Link = Link;
exports.List = List;
exports.Loader = Loader;
exports.MessageBox = MessageBox;
exports.MessageStrip = MessageStrip;
exports.MultiComboBox = MultiComboBox;
exports.MultiComboBoxItem = MultiComboBoxItem;
exports.NotificationListGroupItem = NotificationListGroupItem;
exports.NotificationListItem = NotificationListItem;
exports.NotificationOverflowAction = NotificationOverflowAction;
exports.ObjectPage = ObjectPage;
exports.ObjectPageSection = ObjectPageSection;
exports.ObjectPageSubSection = ObjectPageSubSection;
exports.ObjectStatus = ObjectStatus;
exports.Option = Option;
exports.Page = Page;
exports.Panel = Panel;
exports.Popover = Popover;
exports.ProductSwitch = ProductSwitch;
exports.ProductSwitchItem = ProductSwitchItem;
exports.ProgressIndicator = ProgressIndicator;
exports.RadioButton = RadioButton;
exports.RatingIndicator = RatingIndicator;
exports.ResponsivePopover = ResponsivePopover;
exports.SegmentedButton = SegmentedButton;
exports.Select = Select;
exports.ShellBar = ShellBar;
exports.ShellBarItem = ShellBarItem;
exports.SideNavigation = SideNavigation;
exports.SideNavigationItem = SideNavigationItem;
exports.SideNavigationSubItem = SideNavigationSubItem;
exports.Spinner = Spinner;
exports.StandardListItem = StandardListItem;
exports.SuggestionItem = SuggestionItem;
exports.Switch = Switch;
exports.Tab = Tab;
exports.TabContainer = TabContainer;
exports.TabSeparator = TabSeparator;
exports.Table = Table;
exports.TableCell = TableCell;
exports.TableColumn = TableColumn;
exports.TablePlaceholder = TablePlaceholder;
exports.TableRow = TableRow$1;
exports.Text = Text;
exports.TextArea = TextArea;
exports.ThemeProvider = ThemeProvider;
exports.TimePicker = TimePicker;
exports.Timeline = Timeline;
exports.TimelineItem = TimelineItem;
exports.Title = Title;
exports.Toast = Toast;
exports.ToggleButton = ToggleButton;
exports.Token = Token;
exports.Tokenizer = Tokenizer;
exports.Toolbar = Toolbar;
exports.ToolbarSeparator = ToolbarSeparator;
exports.ToolbarSpacer = ToolbarSpacer;
exports.Tree = Tree;
exports.TreeItem = TreeItem;
exports.UploadCollection = UploadCollection;
exports.UploadCollectionItem = UploadCollectionItem;
exports.VariantManagement = VariantManagement;
exports.withWebComponent = withWebComponent;
